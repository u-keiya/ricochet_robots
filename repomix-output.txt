This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)

Additional Info:
----------------

================================================================
Directory Structure
================================================================
project_desc/
  repo/
    add_to_repository.txt
    repository.txt
  definition.md
  requirements.md
  roadmap.md
public/
  vite.svg
server/
  coverage/
    lcov-report/
      services/
        cardDeck.ts.html
        gameManager.ts.html
        index.html
        roomManager.ts.html
      types/
        game.ts.html
        index.html
      utils/
        constants.ts.html
        index.html
      base.css
      block-navigation.js
      index.html
      prettify.css
      prettify.js
      roomManager.ts.html
      sorter.js
    clover.xml
    coverage-final.json
    lcov.info
  src/
    services/
      __tests__/
        gameManager.test.ts
        roomManager.test.ts
      cardDeck.ts
      gameManager.ts
      roomManager.ts
    types/
      game.ts
      player.ts
      room.ts
    utils/
      constants.ts
    server.ts
  .env.development
  jest.config.js
  package.json
  tsconfig.json
src/
  assets/
    boards.json
    react.svg
  components/
    GameBoard/
      BoardCell.tsx
      GameBoard.tsx
      Robot.tsx
    room/
      CreateRoomForm.tsx
      RoomList.tsx
    DeclarationCard.tsx
    GameInfo.tsx
    GameResultDisplay.tsx
  hooks/
    useGameState.ts
  pages/
    BoardTestPage.tsx
    CreateRoomPage.tsx
    GamePage.tsx
    JoinRoomPage.tsx
    OnlinePage.tsx
    SinglePlayerPage.tsx
    TitlePage.tsx
  services/
    __tests__/
      socketService.test.ts
    socketService.ts
  stores/
    gameStore.ts
  types/
    board.ts
    game.ts
    player.ts
    room.ts
    socket.ts
  utils/
    boardGenerator.ts
    boardLoader.ts
    boardRotation.ts
    boardValidator.ts
    cardGenerator.ts
    constants.ts
    robotMovement.ts
  App.tsx
  index.css
  main.tsx
  vite-env.d.ts
.env.development
.gitignore
eslint.config.js
index.html
package.json
postcss.config.js
README.md
tailwind.config.js
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts

================================================================
Files
================================================================

================
File: project_desc/definition.md
================
# Ricochet Robots - マルチプレイヤーモード定義

## 目的
複数のプレイヤーがオンラインで対戦できるようにし、ゲームの競技性と社交性を高める。

## システム要件
### 技術スタック
- フロントエンド: React + TypeScript + Tailwind CSS
- バックエンド: Node.js + Express + Socket.IO
- データベース: なし（インメモリ状態管理）

### 機能要件
1. ルーム管理
   - ルーム作成（名前、パスワード設定可能）
   - ルーム参加（パスワード認証）
   - ルーム一覧表示（現在のプレイヤー数表示）
   - 最大8プレイヤーまで参加可能

2. ゲームフロー
   - ホストプレイヤーがゲーム開始を制御
   - 全プレイヤーが同じボード、同じターゲットカードを共有
   - 宣言フェーズでは全プレイヤーが同時に手数を宣言可能
   - 最小手数を宣言したプレイヤーが解法を示す権利を得る
   - 制限時間内に解法を示せない場合、次に少ない手数を宣言したプレイヤーに権利が移る

3. スコアリング
   - 正しい解法を示した場合：宣言手数に応じてポイント獲得
   - 失敗した場合：ペナルティポイント
   - 全カード終了時に最高得点のプレイヤーが勝利

4. プレイヤー管理
   - プレイヤー名の設定
   - 現在のプレイヤーリスト表示
   - プレイヤーの接続状態の監視
   - 途中参加・離脱への対応

### 非機能要件
1. パフォーマンス
   - ロボットの移動をリアルタイムで全プレイヤーに同期
   - 宣言フェーズでのレスポンス時間を最小化

2. 信頼性
   - プレイヤーの切断時に自動再接続を試行
   - ゲーム状態の整合性を保証

3. セキュリティ
   - 不正な手数宣言の防止
   - ルームパスワードの保護

## ユーザーインターフェース
1. ルーム管理画面
   - ルーム作成フォーム
   - ルーム一覧表示
   - パスワード入力フォーム

2. ゲーム画面
   - プレイヤーリスト（スコア、オンライン状態）
   - 手数宣言インターフェース
   - 現在のターゲットカード表示
   - 残りカード数表示
   - チャット機能（オプション）

## 開発フェーズ
1. Phase 1: 基本機能実装
   - Socket.IOによる通信基盤
   - ルーム管理システム
   - 基本的なゲームフロー

2. Phase 2: ゲームロジック実装
   - 手数宣言システム
   - スコアリング
   - プレイヤー順序制御

3. Phase 3: UI/UX改善
   - リアルタイム同期の最適化
   - エラーハンドリングの改善
   - アニメーションの追加

4. Phase 4: 追加機能
   - チャット機能
   - 観戦モード
   - リプレイ機能

================
File: project_desc/requirements.md
================
# リコシェロボット（Ricochet Robots）要件定義

## 概要
ブラウザベースのリコシェロボットゲーム。オンライン対戦機能を備え、将来的にCPU対戦モードも実装予定。

## システムアーキテクチャ

### 技術スタック
#### フロントエンド
- フレームワーク: React
- 言語: TypeScript
- スタイリング: Tailwind CSS
- 状態管理: Redux/Context API

#### バックエンド
- サーバー: Node.js + Express
- WebSocket: Socket.io
- 言語: TypeScript

#### テスト
- フレームワーク: Jest
- ユニットテスト
- 統合テスト

## 機能要件

### 1. タイトル画面
- 「みんなで遊ぶ」（オンライン対戦）
- 「CPUと遊ぶ」（将来的な実装）

### 2. オンライン対戦機能
#### 2.1 部屋作成
- 部屋名設定
- パスワード設定
- 部屋の公開機能

#### 2.2 部屋参加
- 公開部屋一覧表示
- パスワード認証

### 3. ゲームプレイ
#### 3.1 ボード管理
- 16種類のボードから4つを選択
- ボードの組み合わせ生成
- ロボットの初期配置（赤・青・黄・緑）

#### 3.2 カードシステム
- 17種類のカード管理
  - 4種類のマーク × 4色
  - 特殊カード（4色混合）
- カードめくり機能
- 目標位置の管理

#### 3.3 ゲームフロー
1. ゲームマスターによるゲーム開始
2. ボード生成とロボット配置
3. カードめくり
4. 手数宣言フェーズ
   - 横スクロール可能な手数選択パネル
   - 宣言後の手数変更（より少ない手数のみ）
5. タイマー管理（1分間）
6. ロボット移動フェーズ
   - 4方向移動矢印表示
   - 手数制限内でのゴール判定
7. 得点付与（成功時1pt）
8. 次のラウンドへ

### 4. 拡張性考慮事項
#### 4.1 CPU対戦モード
- 探索アルゴリズムのインターフェース設計
- 難易度設定機能
- CPU行動決定ロジック

#### 4.2 移動システム
- 移動インターフェースの抽象化
- プレイヤー移動とCPU移動の共通化
- 行動履歴の管理

## 開発フェーズ

### Phase 1: 基盤構築
1. プロジェクトセットアップ
2. 基本的なUI実装
3. WebSocket接続の実装

### Phase 2: コアロジック実装
1. ボード生成システム
2. ロボット配置システム
3. 移動ロジックのインターフェース設計
4. 基本的な移動システム実装

### Phase 3: ゲームプレイ機能
1. 手数宣言システム
2. タイマー実装
3. ターン管理システム
4. 得点システム

### Phase 4: オンライン対戦機能
1. 部屋管理システム
2. プレイヤー同期
3. エラー処理

### Phase 5: 拡張準備
1. 探索アルゴリズムのインターフェース設計
2. テスト環境の整備
3. パフォーマンス最適化

================
File: public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: server/coverage/lcov-report/base.css
================
body, html {
  margin:0; padding: 0;
  height: 100%;
}
body {
    font-family: Helvetica Neue, Helvetica, Arial;
    font-size: 14px;
    color:#333;
}
.small { font-size: 12px; }
*, *:after, *:before {
  -webkit-box-sizing:border-box;
     -moz-box-sizing:border-box;
          box-sizing:border-box;
  }
h1 { font-size: 20px; margin: 0;}
h2 { font-size: 14px; }
pre {
    font: 12px/1.4 Consolas, "Liberation Mono", Menlo, Courier, monospace;
    margin: 0;
    padding: 0;
    -moz-tab-size: 2;
    -o-tab-size:  2;
    tab-size: 2;
}
a { color:#0074D9; text-decoration:none; }
a:hover { text-decoration:underline; }
.strong { font-weight: bold; }
.space-top1 { padding: 10px 0 0 0; }
.pad2y { padding: 20px 0; }
.pad1y { padding: 10px 0; }
.pad2x { padding: 0 20px; }
.pad2 { padding: 20px; }
.pad1 { padding: 10px; }
.space-left2 { padding-left:55px; }
.space-right2 { padding-right:20px; }
.center { text-align:center; }
.clearfix { display:block; }
.clearfix:after {
  content:'';
  display:block;
  height:0;
  clear:both;
  visibility:hidden;
  }
.fl { float: left; }
@media only screen and (max-width:640px) {
  .col3 { width:100%; max-width:100%; }
  .hide-mobile { display:none!important; }
}

.quiet {
  color: #7f7f7f;
  color: rgba(0,0,0,0.5);
}
.quiet a { opacity: 0.7; }

.fraction {
  font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace;
  font-size: 10px;
  color: #555;
  background: #E8E8E8;
  padding: 4px 5px;
  border-radius: 3px;
  vertical-align: middle;
}

div.path a:link, div.path a:visited { color: #333; }
table.coverage {
  border-collapse: collapse;
  margin: 10px 0 0 0;
  padding: 0;
}

table.coverage td {
  margin: 0;
  padding: 0;
  vertical-align: top;
}
table.coverage td.line-count {
    text-align: right;
    padding: 0 5px 0 20px;
}
table.coverage td.line-coverage {
    text-align: right;
    padding-right: 10px;
    min-width:20px;
}

table.coverage td span.cline-any {
    display: inline-block;
    padding: 0 5px;
    width: 100%;
}
.missing-if-branch {
    display: inline-block;
    margin-right: 5px;
    border-radius: 3px;
    position: relative;
    padding: 0 4px;
    background: #333;
    color: yellow;
}

.skip-if-branch {
    display: none;
    margin-right: 10px;
    position: relative;
    padding: 0 4px;
    background: #ccc;
    color: white;
}
.missing-if-branch .typ, .skip-if-branch .typ {
    color: inherit !important;
}
.coverage-summary {
  border-collapse: collapse;
  width: 100%;
}
.coverage-summary tr { border-bottom: 1px solid #bbb; }
.keyline-all { border: 1px solid #ddd; }
.coverage-summary td, .coverage-summary th { padding: 10px; }
.coverage-summary tbody { border: 1px solid #bbb; }
.coverage-summary td { border-right: 1px solid #bbb; }
.coverage-summary td:last-child { border-right: none; }
.coverage-summary th {
  text-align: left;
  font-weight: normal;
  white-space: nowrap;
}
.coverage-summary th.file { border-right: none !important; }
.coverage-summary th.pct { }
.coverage-summary th.pic,
.coverage-summary th.abs,
.coverage-summary td.pct,
.coverage-summary td.abs { text-align: right; }
.coverage-summary td.file { white-space: nowrap;  }
.coverage-summary td.pic { min-width: 120px !important;  }
.coverage-summary tfoot td { }

.coverage-summary .sorter {
    height: 10px;
    width: 7px;
    display: inline-block;
    margin-left: 0.5em;
    background: url(sort-arrow-sprite.png) no-repeat scroll 0 0 transparent;
}
.coverage-summary .sorted .sorter {
    background-position: 0 -20px;
}
.coverage-summary .sorted-desc .sorter {
    background-position: 0 -10px;
}
.status-line {  height: 10px; }
/* yellow */
.cbranch-no { background: yellow !important; color: #111; }
/* dark red */
.red.solid, .status-line.low, .low .cover-fill { background:#C21F39 }
.low .chart { border:1px solid #C21F39 }
.highlighted,
.highlighted .cstat-no, .highlighted .fstat-no, .highlighted .cbranch-no{
  background: #C21F39 !important;
}
/* medium red */
.cstat-no, .fstat-no, .cbranch-no, .cbranch-no { background:#F6C6CE }
/* light red */
.low, .cline-no { background:#FCE1E5 }
/* light green */
.high, .cline-yes { background:rgb(230,245,208) }
/* medium green */
.cstat-yes { background:rgb(161,215,106) }
/* dark green */
.status-line.high, .high .cover-fill { background:rgb(77,146,33) }
.high .chart { border:1px solid rgb(77,146,33) }
/* dark yellow (gold) */
.status-line.medium, .medium .cover-fill { background: #f9cd0b; }
.medium .chart { border:1px solid #f9cd0b; }
/* light yellow */
.medium { background: #fff4c2; }

.cstat-skip { background: #ddd; color: #111; }
.fstat-skip { background: #ddd; color: #111 !important; }
.cbranch-skip { background: #ddd !important; color: #111; }

span.cline-neutral { background: #eaeaea; }

.coverage-summary td.empty {
    opacity: .5;
    padding-top: 4px;
    padding-bottom: 4px;
    line-height: 1;
    color: #888;
}

.cover-fill, .cover-empty {
  display:inline-block;
  height: 12px;
}
.chart {
  line-height: 0;
}
.cover-empty {
    background: white;
}
.cover-full {
    border-right: none !important;
}
pre.prettyprint {
    border: none !important;
    padding: 0 !important;
    margin: 0 !important;
}
.com { color: #999 !important; }
.ignore-none { color: #999; font-weight: normal; }

.wrapper {
  min-height: 100%;
  height: auto !important;
  height: 100%;
  margin: 0 auto -48px;
}
.footer, .push {
  height: 48px;
}

================
File: server/coverage/lcov-report/block-navigation.js
================
/* eslint-disable */
var jumpToCode = (function init() {
    // Classes of code we would like to highlight in the file view
    var missingCoverageClasses = ['.cbranch-no', '.cstat-no', '.fstat-no'];

    // Elements to highlight in the file listing view
    var fileListingElements = ['td.pct.low'];

    // We don't want to select elements that are direct descendants of another match
    var notSelector = ':not(' + missingCoverageClasses.join('):not(') + ') > '; // becomes `:not(a):not(b) > `

    // Selecter that finds elements on the page to which we can jump
    var selector =
        fileListingElements.join(', ') +
        ', ' +
        notSelector +
        missingCoverageClasses.join(', ' + notSelector); // becomes `:not(a):not(b) > a, :not(a):not(b) > b`

    // The NodeList of matching elements
    var missingCoverageElements = document.querySelectorAll(selector);

    var currentIndex;

    function toggleClass(index) {
        missingCoverageElements
            .item(currentIndex)
            .classList.remove('highlighted');
        missingCoverageElements.item(index).classList.add('highlighted');
    }

    function makeCurrent(index) {
        toggleClass(index);
        currentIndex = index;
        missingCoverageElements.item(index).scrollIntoView({
            behavior: 'smooth',
            block: 'center',
            inline: 'center'
        });
    }

    function goToPrevious() {
        var nextIndex = 0;
        if (typeof currentIndex !== 'number' || currentIndex === 0) {
            nextIndex = missingCoverageElements.length - 1;
        } else if (missingCoverageElements.length > 1) {
            nextIndex = currentIndex - 1;
        }

        makeCurrent(nextIndex);
    }

    function goToNext() {
        var nextIndex = 0;

        if (
            typeof currentIndex === 'number' &&
            currentIndex < missingCoverageElements.length - 1
        ) {
            nextIndex = currentIndex + 1;
        }

        makeCurrent(nextIndex);
    }

    return function jump(event) {
        if (
            document.getElementById('fileSearch') === document.activeElement &&
            document.activeElement != null
        ) {
            // if we're currently focused on the search input, we don't want to navigate
            return;
        }

        switch (event.which) {
            case 78: // n
            case 74: // j
                goToNext();
                break;
            case 66: // b
            case 75: // k
            case 80: // p
                goToPrevious();
                break;
        }
    };
})();
window.addEventListener('keydown', jumpToCode);

================
File: server/coverage/lcov-report/prettify.css
================
.pln{color:#000}@media screen{.str{color:#080}.kwd{color:#008}.com{color:#800}.typ{color:#606}.lit{color:#066}.pun,.opn,.clo{color:#660}.tag{color:#008}.atn{color:#606}.atv{color:#080}.dec,.var{color:#606}.fun{color:red}}@media print,projection{.str{color:#060}.kwd{color:#006;font-weight:bold}.com{color:#600;font-style:italic}.typ{color:#404;font-weight:bold}.lit{color:#044}.pun,.opn,.clo{color:#440}.tag{color:#006;font-weight:bold}.atn{color:#404}.atv{color:#060}}pre.prettyprint{padding:2px;border:1px solid #888}ol.linenums{margin-top:0;margin-bottom:0}li.L0,li.L1,li.L2,li.L3,li.L5,li.L6,li.L7,li.L8{list-style-type:none}li.L1,li.L3,li.L5,li.L7,li.L9{background:#eee}

================
File: server/coverage/lcov-report/prettify.js
================
/* eslint-disable */
window.PR_SHOULD_USE_CONTINUATION=true;(function(){var h=["break,continue,do,else,for,if,return,while"];var u=[h,"auto,case,char,const,default,double,enum,extern,float,goto,int,long,register,short,signed,sizeof,static,struct,switch,typedef,union,unsigned,void,volatile"];var p=[u,"catch,class,delete,false,import,new,operator,private,protected,public,this,throw,true,try,typeof"];var l=[p,"alignof,align_union,asm,axiom,bool,concept,concept_map,const_cast,constexpr,decltype,dynamic_cast,explicit,export,friend,inline,late_check,mutable,namespace,nullptr,reinterpret_cast,static_assert,static_cast,template,typeid,typename,using,virtual,where"];var x=[p,"abstract,boolean,byte,extends,final,finally,implements,import,instanceof,null,native,package,strictfp,super,synchronized,throws,transient"];var R=[x,"as,base,by,checked,decimal,delegate,descending,dynamic,event,fixed,foreach,from,group,implicit,in,interface,internal,into,is,lock,object,out,override,orderby,params,partial,readonly,ref,sbyte,sealed,stackalloc,string,select,uint,ulong,unchecked,unsafe,ushort,var"];var r="all,and,by,catch,class,else,extends,false,finally,for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,true,try,unless,until,when,while,yes";var w=[p,"debugger,eval,export,function,get,null,set,undefined,var,with,Infinity,NaN"];var s="caller,delete,die,do,dump,elsif,eval,exit,foreach,for,goto,if,import,last,local,my,next,no,our,print,package,redo,require,sub,undef,unless,until,use,wantarray,while,BEGIN,END";var I=[h,"and,as,assert,class,def,del,elif,except,exec,finally,from,global,import,in,is,lambda,nonlocal,not,or,pass,print,raise,try,with,yield,False,True,None"];var f=[h,"alias,and,begin,case,class,def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,rescue,retry,self,super,then,true,undef,unless,until,when,yield,BEGIN,END"];var H=[h,"case,done,elif,esac,eval,fi,function,in,local,set,then,until"];var A=[l,R,w,s+I,f,H];var e=/^(DIR|FILE|vector|(de|priority_)?queue|list|stack|(const_)?iterator|(multi)?(set|map)|bitset|u?(int|float)\d*)/;var C="str";var z="kwd";var j="com";var O="typ";var G="lit";var L="pun";var F="pln";var m="tag";var E="dec";var J="src";var P="atn";var n="atv";var N="nocode";var M="(?:^^\\.?|[+-]|\\!|\\!=|\\!==|\\#|\\%|\\%=|&|&&|&&=|&=|\\(|\\*|\\*=|\\+=|\\,|\\-=|\\->|\\/|\\/=|:|::|\\;|<|<<|<<=|<=|=|==|===|>|>=|>>|>>=|>>>|>>>=|\\?|\\@|\\[|\\^|\\^=|\\^\\^|\\^\\^=|\\{|\\||\\|=|\\|\\||\\|\\|=|\\~|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\s*";function k(Z){var ad=0;var S=false;var ac=false;for(var V=0,U=Z.length;V<U;++V){var ae=Z[V];if(ae.ignoreCase){ac=true}else{if(/[a-z]/i.test(ae.source.replace(/\\u[0-9a-f]{4}|\\x[0-9a-f]{2}|\\[^ux]/gi,""))){S=true;ac=false;break}}}var Y={b:8,t:9,n:10,v:11,f:12,r:13};function ab(ah){var ag=ah.charCodeAt(0);if(ag!==92){return ag}var af=ah.charAt(1);ag=Y[af];if(ag){return ag}else{if("0"<=af&&af<="7"){return parseInt(ah.substring(1),8)}else{if(af==="u"||af==="x"){return parseInt(ah.substring(2),16)}else{return ah.charCodeAt(1)}}}}function T(af){if(af<32){return(af<16?"\\x0":"\\x")+af.toString(16)}var ag=String.fromCharCode(af);if(ag==="\\"||ag==="-"||ag==="["||ag==="]"){ag="\\"+ag}return ag}function X(am){var aq=am.substring(1,am.length-1).match(new RegExp("\\\\u[0-9A-Fa-f]{4}|\\\\x[0-9A-Fa-f]{2}|\\\\[0-3][0-7]{0,2}|\\\\[0-7]{1,2}|\\\\[\\s\\S]|-|[^-\\\\]","g"));var ak=[];var af=[];var ao=aq[0]==="^";for(var ar=ao?1:0,aj=aq.length;ar<aj;++ar){var ah=aq[ar];if(/\\[bdsw]/i.test(ah)){ak.push(ah)}else{var ag=ab(ah);var al;if(ar+2<aj&&"-"===aq[ar+1]){al=ab(aq[ar+2]);ar+=2}else{al=ag}af.push([ag,al]);if(!(al<65||ag>122)){if(!(al<65||ag>90)){af.push([Math.max(65,ag)|32,Math.min(al,90)|32])}if(!(al<97||ag>122)){af.push([Math.max(97,ag)&~32,Math.min(al,122)&~32])}}}}af.sort(function(av,au){return(av[0]-au[0])||(au[1]-av[1])});var ai=[];var ap=[NaN,NaN];for(var ar=0;ar<af.length;++ar){var at=af[ar];if(at[0]<=ap[1]+1){ap[1]=Math.max(ap[1],at[1])}else{ai.push(ap=at)}}var an=["["];if(ao){an.push("^")}an.push.apply(an,ak);for(var ar=0;ar<ai.length;++ar){var at=ai[ar];an.push(T(at[0]));if(at[1]>at[0]){if(at[1]+1>at[0]){an.push("-")}an.push(T(at[1]))}}an.push("]");return an.join("")}function W(al){var aj=al.source.match(new RegExp("(?:\\[(?:[^\\x5C\\x5D]|\\\\[\\s\\S])*\\]|\\\\u[A-Fa-f0-9]{4}|\\\\x[A-Fa-f0-9]{2}|\\\\[0-9]+|\\\\[^ux0-9]|\\(\\?[:!=]|[\\(\\)\\^]|[^\\x5B\\x5C\\(\\)\\^]+)","g"));var ah=aj.length;var an=[];for(var ak=0,am=0;ak<ah;++ak){var ag=aj[ak];if(ag==="("){++am}else{if("\\"===ag.charAt(0)){var af=+ag.substring(1);if(af&&af<=am){an[af]=-1}}}}for(var ak=1;ak<an.length;++ak){if(-1===an[ak]){an[ak]=++ad}}for(var ak=0,am=0;ak<ah;++ak){var ag=aj[ak];if(ag==="("){++am;if(an[am]===undefined){aj[ak]="(?:"}}else{if("\\"===ag.charAt(0)){var af=+ag.substring(1);if(af&&af<=am){aj[ak]="\\"+an[am]}}}}for(var ak=0,am=0;ak<ah;++ak){if("^"===aj[ak]&&"^"!==aj[ak+1]){aj[ak]=""}}if(al.ignoreCase&&S){for(var ak=0;ak<ah;++ak){var ag=aj[ak];var ai=ag.charAt(0);if(ag.length>=2&&ai==="["){aj[ak]=X(ag)}else{if(ai!=="\\"){aj[ak]=ag.replace(/[a-zA-Z]/g,function(ao){var ap=ao.charCodeAt(0);return"["+String.fromCharCode(ap&~32,ap|32)+"]"})}}}}return aj.join("")}var aa=[];for(var V=0,U=Z.length;V<U;++V){var ae=Z[V];if(ae.global||ae.multiline){throw new Error(""+ae)}aa.push("(?:"+W(ae)+")")}return new RegExp(aa.join("|"),ac?"gi":"g")}function a(V){var U=/(?:^|\s)nocode(?:\s|$)/;var X=[];var T=0;var Z=[];var W=0;var S;if(V.currentStyle){S=V.currentStyle.whiteSpace}else{if(window.getComputedStyle){S=document.defaultView.getComputedStyle(V,null).getPropertyValue("white-space")}}var Y=S&&"pre"===S.substring(0,3);function aa(ab){switch(ab.nodeType){case 1:if(U.test(ab.className)){return}for(var ae=ab.firstChild;ae;ae=ae.nextSibling){aa(ae)}var ad=ab.nodeName;if("BR"===ad||"LI"===ad){X[W]="\n";Z[W<<1]=T++;Z[(W++<<1)|1]=ab}break;case 3:case 4:var ac=ab.nodeValue;if(ac.length){if(!Y){ac=ac.replace(/[ \t\r\n]+/g," ")}else{ac=ac.replace(/\r\n?/g,"\n")}X[W]=ac;Z[W<<1]=T;T+=ac.length;Z[(W++<<1)|1]=ab}break}}aa(V);return{sourceCode:X.join("").replace(/\n$/,""),spans:Z}}function B(S,U,W,T){if(!U){return}var V={sourceCode:U,basePos:S};W(V);T.push.apply(T,V.decorations)}var v=/\S/;function o(S){var V=undefined;for(var U=S.firstChild;U;U=U.nextSibling){var T=U.nodeType;V=(T===1)?(V?S:U):(T===3)?(v.test(U.nodeValue)?S:V):V}return V===S?undefined:V}function g(U,T){var S={};var V;(function(){var ad=U.concat(T);var ah=[];var ag={};for(var ab=0,Z=ad.length;ab<Z;++ab){var Y=ad[ab];var ac=Y[3];if(ac){for(var ae=ac.length;--ae>=0;){S[ac.charAt(ae)]=Y}}var af=Y[1];var aa=""+af;if(!ag.hasOwnProperty(aa)){ah.push(af);ag[aa]=null}}ah.push(/[\0-\uffff]/);V=k(ah)})();var X=T.length;var W=function(ah){var Z=ah.sourceCode,Y=ah.basePos;var ad=[Y,F];var af=0;var an=Z.match(V)||[];var aj={};for(var ae=0,aq=an.length;ae<aq;++ae){var ag=an[ae];var ap=aj[ag];var ai=void 0;var am;if(typeof ap==="string"){am=false}else{var aa=S[ag.charAt(0)];if(aa){ai=ag.match(aa[1]);ap=aa[0]}else{for(var ao=0;ao<X;++ao){aa=T[ao];ai=ag.match(aa[1]);if(ai){ap=aa[0];break}}if(!ai){ap=F}}am=ap.length>=5&&"lang-"===ap.substring(0,5);if(am&&!(ai&&typeof ai[1]==="string")){am=false;ap=J}if(!am){aj[ag]=ap}}var ab=af;af+=ag.length;if(!am){ad.push(Y+ab,ap)}else{var al=ai[1];var ak=ag.indexOf(al);var ac=ak+al.length;if(ai[2]){ac=ag.length-ai[2].length;ak=ac-al.length}var ar=ap.substring(5);B(Y+ab,ag.substring(0,ak),W,ad);B(Y+ab+ak,al,q(ar,al),ad);B(Y+ab+ac,ag.substring(ac),W,ad)}}ah.decorations=ad};return W}function i(T){var W=[],S=[];if(T.tripleQuotedStrings){W.push([C,/^(?:\'\'\'(?:[^\'\\]|\\[\s\S]|\'{1,2}(?=[^\']))*(?:\'\'\'|$)|\"\"\"(?:[^\"\\]|\\[\s\S]|\"{1,2}(?=[^\"]))*(?:\"\"\"|$)|\'(?:[^\\\']|\\[\s\S])*(?:\'|$)|\"(?:[^\\\"]|\\[\s\S])*(?:\"|$))/,null,"'\""])}else{if(T.multiLineStrings){W.push([C,/^(?:\'(?:[^\\\']|\\[\s\S])*(?:\'|$)|\"(?:[^\\\"]|\\[\s\S])*(?:\"|$)|\`(?:[^\\\`]|\\[\s\S])*(?:\`|$))/,null,"'\"`"])}else{W.push([C,/^(?:\'(?:[^\\\'\r\n]|\\.)*(?:\'|$)|\"(?:[^\\\"\r\n]|\\.)*(?:\"|$))/,null,"\"'"])}}if(T.verbatimStrings){S.push([C,/^@\"(?:[^\"]|\"\")*(?:\"|$)/,null])}var Y=T.hashComments;if(Y){if(T.cStyleComments){if(Y>1){W.push([j,/^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/,null,"#"])}else{W.push([j,/^#(?:(?:define|elif|else|endif|error|ifdef|include|ifndef|line|pragma|undef|warning)\b|[^\r\n]*)/,null,"#"])}S.push([C,/^<(?:(?:(?:\.\.\/)*|\/?)(?:[\w-]+(?:\/[\w-]+)+)?[\w-]+\.h|[a-z]\w*)>/,null])}else{W.push([j,/^#[^\r\n]*/,null,"#"])}}if(T.cStyleComments){S.push([j,/^\/\/[^\r\n]*/,null]);S.push([j,/^\/\*[\s\S]*?(?:\*\/|$)/,null])}if(T.regexLiterals){var X=("/(?=[^/*])(?:[^/\\x5B\\x5C]|\\x5C[\\s\\S]|\\x5B(?:[^\\x5C\\x5D]|\\x5C[\\s\\S])*(?:\\x5D|$))+/");S.push(["lang-regex",new RegExp("^"+M+"("+X+")")])}var V=T.types;if(V){S.push([O,V])}var U=(""+T.keywords).replace(/^ | $/g,"");if(U.length){S.push([z,new RegExp("^(?:"+U.replace(/[\s,]+/g,"|")+")\\b"),null])}W.push([F,/^\s+/,null," \r\n\t\xA0"]);S.push([G,/^@[a-z_$][a-z_$@0-9]*/i,null],[O,/^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\w+_t\b)/,null],[F,/^[a-z_$][a-z_$@0-9]*/i,null],[G,new RegExp("^(?:0x[a-f0-9]+|(?:\\d(?:_\\d+)*\\d*(?:\\.\\d*)?|\\.\\d\\+)(?:e[+\\-]?\\d+)?)[a-z]*","i"),null,"0123456789"],[F,/^\\[\s\S]?/,null],[L,/^.[^\s\w\.$@\'\"\`\/\#\\]*/,null]);return g(W,S)}var K=i({keywords:A,hashComments:true,cStyleComments:true,multiLineStrings:true,regexLiterals:true});function Q(V,ag){var U=/(?:^|\s)nocode(?:\s|$)/;var ab=/\r\n?|\n/;var ac=V.ownerDocument;var S;if(V.currentStyle){S=V.currentStyle.whiteSpace}else{if(window.getComputedStyle){S=ac.defaultView.getComputedStyle(V,null).getPropertyValue("white-space")}}var Z=S&&"pre"===S.substring(0,3);var af=ac.createElement("LI");while(V.firstChild){af.appendChild(V.firstChild)}var W=[af];function ae(al){switch(al.nodeType){case 1:if(U.test(al.className)){break}if("BR"===al.nodeName){ad(al);if(al.parentNode){al.parentNode.removeChild(al)}}else{for(var an=al.firstChild;an;an=an.nextSibling){ae(an)}}break;case 3:case 4:if(Z){var am=al.nodeValue;var aj=am.match(ab);if(aj){var ai=am.substring(0,aj.index);al.nodeValue=ai;var ah=am.substring(aj.index+aj[0].length);if(ah){var ak=al.parentNode;ak.insertBefore(ac.createTextNode(ah),al.nextSibling)}ad(al);if(!ai){al.parentNode.removeChild(al)}}}break}}function ad(ak){while(!ak.nextSibling){ak=ak.parentNode;if(!ak){return}}function ai(al,ar){var aq=ar?al.cloneNode(false):al;var ao=al.parentNode;if(ao){var ap=ai(ao,1);var an=al.nextSibling;ap.appendChild(aq);for(var am=an;am;am=an){an=am.nextSibling;ap.appendChild(am)}}return aq}var ah=ai(ak.nextSibling,0);for(var aj;(aj=ah.parentNode)&&aj.nodeType===1;){ah=aj}W.push(ah)}for(var Y=0;Y<W.length;++Y){ae(W[Y])}if(ag===(ag|0)){W[0].setAttribute("value",ag)}var aa=ac.createElement("OL");aa.className="linenums";var X=Math.max(0,((ag-1))|0)||0;for(var Y=0,T=W.length;Y<T;++Y){af=W[Y];af.className="L"+((Y+X)%10);if(!af.firstChild){af.appendChild(ac.createTextNode("\xA0"))}aa.appendChild(af)}V.appendChild(aa)}function D(ac){var aj=/\bMSIE\b/.test(navigator.userAgent);var am=/\n/g;var al=ac.sourceCode;var an=al.length;var V=0;var aa=ac.spans;var T=aa.length;var ah=0;var X=ac.decorations;var Y=X.length;var Z=0;X[Y]=an;var ar,aq;for(aq=ar=0;aq<Y;){if(X[aq]!==X[aq+2]){X[ar++]=X[aq++];X[ar++]=X[aq++]}else{aq+=2}}Y=ar;for(aq=ar=0;aq<Y;){var at=X[aq];var ab=X[aq+1];var W=aq+2;while(W+2<=Y&&X[W+1]===ab){W+=2}X[ar++]=at;X[ar++]=ab;aq=W}Y=X.length=ar;var ae=null;while(ah<T){var af=aa[ah];var S=aa[ah+2]||an;var ag=X[Z];var ap=X[Z+2]||an;var W=Math.min(S,ap);var ak=aa[ah+1];var U;if(ak.nodeType!==1&&(U=al.substring(V,W))){if(aj){U=U.replace(am,"\r")}ak.nodeValue=U;var ai=ak.ownerDocument;var ao=ai.createElement("SPAN");ao.className=X[Z+1];var ad=ak.parentNode;ad.replaceChild(ao,ak);ao.appendChild(ak);if(V<S){aa[ah+1]=ak=ai.createTextNode(al.substring(W,S));ad.insertBefore(ak,ao.nextSibling)}}V=W;if(V>=S){ah+=2}if(V>=ap){Z+=2}}}var t={};function c(U,V){for(var S=V.length;--S>=0;){var T=V[S];if(!t.hasOwnProperty(T)){t[T]=U}else{if(window.console){console.warn("cannot override language handler %s",T)}}}}function q(T,S){if(!(T&&t.hasOwnProperty(T))){T=/^\s*</.test(S)?"default-markup":"default-code"}return t[T]}c(K,["default-code"]);c(g([],[[F,/^[^<?]+/],[E,/^<!\w[^>]*(?:>|$)/],[j,/^<\!--[\s\S]*?(?:-\->|$)/],["lang-",/^<\?([\s\S]+?)(?:\?>|$)/],["lang-",/^<%([\s\S]+?)(?:%>|$)/],[L,/^(?:<[%?]|[%?]>)/],["lang-",/^<xmp\b[^>]*>([\s\S]+?)<\/xmp\b[^>]*>/i],["lang-js",/^<script\b[^>]*>([\s\S]*?)(<\/script\b[^>]*>)/i],["lang-css",/^<style\b[^>]*>([\s\S]*?)(<\/style\b[^>]*>)/i],["lang-in.tag",/^(<\/?[a-z][^<>]*>)/i]]),["default-markup","htm","html","mxml","xhtml","xml","xsl"]);c(g([[F,/^[\s]+/,null," \t\r\n"],[n,/^(?:\"[^\"]*\"?|\'[^\']*\'?)/,null,"\"'"]],[[m,/^^<\/?[a-z](?:[\w.:-]*\w)?|\/?>$/i],[P,/^(?!style[\s=]|on)[a-z](?:[\w:-]*\w)?/i],["lang-uq.val",/^=\s*([^>\'\"\s]*(?:[^>\'\"\s\/]|\/(?=\s)))/],[L,/^[=<>\/]+/],["lang-js",/^on\w+\s*=\s*\"([^\"]+)\"/i],["lang-js",/^on\w+\s*=\s*\'([^\']+)\'/i],["lang-js",/^on\w+\s*=\s*([^\"\'>\s]+)/i],["lang-css",/^style\s*=\s*\"([^\"]+)\"/i],["lang-css",/^style\s*=\s*\'([^\']+)\'/i],["lang-css",/^style\s*=\s*([^\"\'>\s]+)/i]]),["in.tag"]);c(g([],[[n,/^[\s\S]+/]]),["uq.val"]);c(i({keywords:l,hashComments:true,cStyleComments:true,types:e}),["c","cc","cpp","cxx","cyc","m"]);c(i({keywords:"null,true,false"}),["json"]);c(i({keywords:R,hashComments:true,cStyleComments:true,verbatimStrings:true,types:e}),["cs"]);c(i({keywords:x,cStyleComments:true}),["java"]);c(i({keywords:H,hashComments:true,multiLineStrings:true}),["bsh","csh","sh"]);c(i({keywords:I,hashComments:true,multiLineStrings:true,tripleQuotedStrings:true}),["cv","py"]);c(i({keywords:s,hashComments:true,multiLineStrings:true,regexLiterals:true}),["perl","pl","pm"]);c(i({keywords:f,hashComments:true,multiLineStrings:true,regexLiterals:true}),["rb"]);c(i({keywords:w,cStyleComments:true,regexLiterals:true}),["js"]);c(i({keywords:r,hashComments:3,cStyleComments:true,multilineStrings:true,tripleQuotedStrings:true,regexLiterals:true}),["coffee"]);c(g([],[[C,/^[\s\S]+/]]),["regex"]);function d(V){var U=V.langExtension;try{var S=a(V.sourceNode);var T=S.sourceCode;V.sourceCode=T;V.spans=S.spans;V.basePos=0;q(U,T)(V);D(V)}catch(W){if("console" in window){console.log(W&&W.stack?W.stack:W)}}}function y(W,V,U){var S=document.createElement("PRE");S.innerHTML=W;if(U){Q(S,U)}var T={langExtension:V,numberLines:U,sourceNode:S};d(T);return S.innerHTML}function b(ad){function Y(af){return document.getElementsByTagName(af)}var ac=[Y("pre"),Y("code"),Y("xmp")];var T=[];for(var aa=0;aa<ac.length;++aa){for(var Z=0,V=ac[aa].length;Z<V;++Z){T.push(ac[aa][Z])}}ac=null;var W=Date;if(!W.now){W={now:function(){return +(new Date)}}}var X=0;var S;var ab=/\blang(?:uage)?-([\w.]+)(?!\S)/;var ae=/\bprettyprint\b/;function U(){var ag=(window.PR_SHOULD_USE_CONTINUATION?W.now()+250:Infinity);for(;X<T.length&&W.now()<ag;X++){var aj=T[X];var ai=aj.className;if(ai.indexOf("prettyprint")>=0){var ah=ai.match(ab);var am;if(!ah&&(am=o(aj))&&"CODE"===am.tagName){ah=am.className.match(ab)}if(ah){ah=ah[1]}var al=false;for(var ak=aj.parentNode;ak;ak=ak.parentNode){if((ak.tagName==="pre"||ak.tagName==="code"||ak.tagName==="xmp")&&ak.className&&ak.className.indexOf("prettyprint")>=0){al=true;break}}if(!al){var af=aj.className.match(/\blinenums\b(?::(\d+))?/);af=af?af[1]&&af[1].length?+af[1]:true:false;if(af){Q(aj,af)}S={langExtension:ah,sourceNode:aj,numberLines:af};d(S)}}}if(X<T.length){setTimeout(U,250)}else{if(ad){ad()}}}U()}window.prettyPrintOne=y;window.prettyPrint=b;window.PR={createSimpleLexer:g,registerLangHandler:c,sourceDecorator:i,PR_ATTRIB_NAME:P,PR_ATTRIB_VALUE:n,PR_COMMENT:j,PR_DECLARATION:E,PR_KEYWORD:z,PR_LITERAL:G,PR_NOCODE:N,PR_PLAIN:F,PR_PUNCTUATION:L,PR_SOURCE:J,PR_STRING:C,PR_TAG:m,PR_TYPE:O}})();PR.registerLangHandler(PR.createSimpleLexer([],[[PR.PR_DECLARATION,/^<!\w[^>]*(?:>|$)/],[PR.PR_COMMENT,/^<\!--[\s\S]*?(?:-\->|$)/],[PR.PR_PUNCTUATION,/^(?:<[%?]|[%?]>)/],["lang-",/^<\?([\s\S]+?)(?:\?>|$)/],["lang-",/^<%([\s\S]+?)(?:%>|$)/],["lang-",/^<xmp\b[^>]*>([\s\S]+?)<\/xmp\b[^>]*>/i],["lang-handlebars",/^<script\b[^>]*type\s*=\s*['"]?text\/x-handlebars-template['"]?\b[^>]*>([\s\S]*?)(<\/script\b[^>]*>)/i],["lang-js",/^<script\b[^>]*>([\s\S]*?)(<\/script\b[^>]*>)/i],["lang-css",/^<style\b[^>]*>([\s\S]*?)(<\/style\b[^>]*>)/i],["lang-in.tag",/^(<\/?[a-z][^<>]*>)/i],[PR.PR_DECLARATION,/^{{[#^>/]?\s*[\w.][^}]*}}/],[PR.PR_DECLARATION,/^{{&?\s*[\w.][^}]*}}/],[PR.PR_DECLARATION,/^{{{>?\s*[\w.][^}]*}}}/],[PR.PR_COMMENT,/^{{![^}]*}}/]]),["handlebars","hbs"]);PR.registerLangHandler(PR.createSimpleLexer([[PR.PR_PLAIN,/^[ \t\r\n\f]+/,null," \t\r\n\f"]],[[PR.PR_STRING,/^\"(?:[^\n\r\f\\\"]|\\(?:\r\n?|\n|\f)|\\[\s\S])*\"/,null],[PR.PR_STRING,/^\'(?:[^\n\r\f\\\']|\\(?:\r\n?|\n|\f)|\\[\s\S])*\'/,null],["lang-css-str",/^url\(([^\)\"\']*)\)/i],[PR.PR_KEYWORD,/^(?:url|rgb|\!important|@import|@page|@media|@charset|inherit)(?=[^\-\w]|$)/i,null],["lang-css-kw",/^(-?(?:[_a-z]|(?:\\[0-9a-f]+ ?))(?:[_a-z0-9\-]|\\(?:\\[0-9a-f]+ ?))*)\s*:/i],[PR.PR_COMMENT,/^\/\*[^*]*\*+(?:[^\/*][^*]*\*+)*\//],[PR.PR_COMMENT,/^(?:<!--|-->)/],[PR.PR_LITERAL,/^(?:\d+|\d*\.\d+)(?:%|[a-z]+)?/i],[PR.PR_LITERAL,/^#(?:[0-9a-f]{3}){1,2}/i],[PR.PR_PLAIN,/^-?(?:[_a-z]|(?:\\[\da-f]+ ?))(?:[_a-z\d\-]|\\(?:\\[\da-f]+ ?))*/i],[PR.PR_PUNCTUATION,/^[^\s\w\'\"]+/]]),["css"]);PR.registerLangHandler(PR.createSimpleLexer([],[[PR.PR_KEYWORD,/^-?(?:[_a-z]|(?:\\[\da-f]+ ?))(?:[_a-z\d\-]|\\(?:\\[\da-f]+ ?))*/i]]),["css-kw"]);PR.registerLangHandler(PR.createSimpleLexer([],[[PR.PR_STRING,/^[^\)\"\']+/]]),["css-str"]);

================
File: server/coverage/lcov-report/roomManager.ts.html
================
<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for roomManager.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="index.html">All files</a> roomManager.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">96% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>48/50</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">88.88% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>16/18</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>9/9</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">95.91% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>47/49</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a>
<a name='L36'></a><a href='#L36'>36</a>
<a name='L37'></a><a href='#L37'>37</a>
<a name='L38'></a><a href='#L38'>38</a>
<a name='L39'></a><a href='#L39'>39</a>
<a name='L40'></a><a href='#L40'>40</a>
<a name='L41'></a><a href='#L41'>41</a>
<a name='L42'></a><a href='#L42'>42</a>
<a name='L43'></a><a href='#L43'>43</a>
<a name='L44'></a><a href='#L44'>44</a>
<a name='L45'></a><a href='#L45'>45</a>
<a name='L46'></a><a href='#L46'>46</a>
<a name='L47'></a><a href='#L47'>47</a>
<a name='L48'></a><a href='#L48'>48</a>
<a name='L49'></a><a href='#L49'>49</a>
<a name='L50'></a><a href='#L50'>50</a>
<a name='L51'></a><a href='#L51'>51</a>
<a name='L52'></a><a href='#L52'>52</a>
<a name='L53'></a><a href='#L53'>53</a>
<a name='L54'></a><a href='#L54'>54</a>
<a name='L55'></a><a href='#L55'>55</a>
<a name='L56'></a><a href='#L56'>56</a>
<a name='L57'></a><a href='#L57'>57</a>
<a name='L58'></a><a href='#L58'>58</a>
<a name='L59'></a><a href='#L59'>59</a>
<a name='L60'></a><a href='#L60'>60</a>
<a name='L61'></a><a href='#L61'>61</a>
<a name='L62'></a><a href='#L62'>62</a>
<a name='L63'></a><a href='#L63'>63</a>
<a name='L64'></a><a href='#L64'>64</a>
<a name='L65'></a><a href='#L65'>65</a>
<a name='L66'></a><a href='#L66'>66</a>
<a name='L67'></a><a href='#L67'>67</a>
<a name='L68'></a><a href='#L68'>68</a>
<a name='L69'></a><a href='#L69'>69</a>
<a name='L70'></a><a href='#L70'>70</a>
<a name='L71'></a><a href='#L71'>71</a>
<a name='L72'></a><a href='#L72'>72</a>
<a name='L73'></a><a href='#L73'>73</a>
<a name='L74'></a><a href='#L74'>74</a>
<a name='L75'></a><a href='#L75'>75</a>
<a name='L76'></a><a href='#L76'>76</a>
<a name='L77'></a><a href='#L77'>77</a>
<a name='L78'></a><a href='#L78'>78</a>
<a name='L79'></a><a href='#L79'>79</a>
<a name='L80'></a><a href='#L80'>80</a>
<a name='L81'></a><a href='#L81'>81</a>
<a name='L82'></a><a href='#L82'>82</a>
<a name='L83'></a><a href='#L83'>83</a>
<a name='L84'></a><a href='#L84'>84</a>
<a name='L85'></a><a href='#L85'>85</a>
<a name='L86'></a><a href='#L86'>86</a>
<a name='L87'></a><a href='#L87'>87</a>
<a name='L88'></a><a href='#L88'>88</a>
<a name='L89'></a><a href='#L89'>89</a>
<a name='L90'></a><a href='#L90'>90</a>
<a name='L91'></a><a href='#L91'>91</a>
<a name='L92'></a><a href='#L92'>92</a>
<a name='L93'></a><a href='#L93'>93</a>
<a name='L94'></a><a href='#L94'>94</a>
<a name='L95'></a><a href='#L95'>95</a>
<a name='L96'></a><a href='#L96'>96</a>
<a name='L97'></a><a href='#L97'>97</a>
<a name='L98'></a><a href='#L98'>98</a>
<a name='L99'></a><a href='#L99'>99</a>
<a name='L100'></a><a href='#L100'>100</a>
<a name='L101'></a><a href='#L101'>101</a>
<a name='L102'></a><a href='#L102'>102</a>
<a name='L103'></a><a href='#L103'>103</a>
<a name='L104'></a><a href='#L104'>104</a>
<a name='L105'></a><a href='#L105'>105</a>
<a name='L106'></a><a href='#L106'>106</a>
<a name='L107'></a><a href='#L107'>107</a>
<a name='L108'></a><a href='#L108'>108</a>
<a name='L109'></a><a href='#L109'>109</a>
<a name='L110'></a><a href='#L110'>110</a>
<a name='L111'></a><a href='#L111'>111</a>
<a name='L112'></a><a href='#L112'>112</a>
<a name='L113'></a><a href='#L113'>113</a>
<a name='L114'></a><a href='#L114'>114</a>
<a name='L115'></a><a href='#L115'>115</a>
<a name='L116'></a><a href='#L116'>116</a>
<a name='L117'></a><a href='#L117'>117</a>
<a name='L118'></a><a href='#L118'>118</a>
<a name='L119'></a><a href='#L119'>119</a>
<a name='L120'></a><a href='#L120'>120</a>
<a name='L121'></a><a href='#L121'>121</a>
<a name='L122'></a><a href='#L122'>122</a>
<a name='L123'></a><a href='#L123'>123</a>
<a name='L124'></a><a href='#L124'>124</a>
<a name='L125'></a><a href='#L125'>125</a>
<a name='L126'></a><a href='#L126'>126</a>
<a name='L127'></a><a href='#L127'>127</a>
<a name='L128'></a><a href='#L128'>128</a>
<a name='L129'></a><a href='#L129'>129</a>
<a name='L130'></a><a href='#L130'>130</a>
<a name='L131'></a><a href='#L131'>131</a>
<a name='L132'></a><a href='#L132'>132</a>
<a name='L133'></a><a href='#L133'>133</a>
<a name='L134'></a><a href='#L134'>134</a>
<a name='L135'></a><a href='#L135'>135</a>
<a name='L136'></a><a href='#L136'>136</a>
<a name='L137'></a><a href='#L137'>137</a>
<a name='L138'></a><a href='#L138'>138</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">15x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">15x</span>
<span class="cline-any cline-yes">15x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">15x</span>
<span class="cline-any cline-yes">15x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">5x</span>
<span class="cline-any cline-yes">5x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">import { Room, RoomOptions, RoomSummary, GameStatus } from '../types/room';
import { Player } from '../types/player';
import { v4 as uuidv4 } from 'uuid';
&nbsp;
export class RoomManager {
  private rooms: Map&lt;string, Room&gt;;
&nbsp;
  constructor() {
    this.rooms = new Map();
  }
&nbsp;
  createRoom(hostPlayer: Player, options: RoomOptions): Room {
    const roomId = uuidv4();
    // ホストプレイヤーのisHostを設定
    hostPlayer.isHost = true;
    const room: Room = {
      id: roomId,
      name: options.name,
      password: options.password || null,
      hostId: hostPlayer.id,
      players: new Map([[hostPlayer.id, hostPlayer]]),
      maxPlayers: options.maxPlayers || 8,
      gameState: {
        status: 'waiting',
        currentBoard: null,
        targetCard: null,
        declarations: new Map(),
        currentTurn: null,
        timeLimit: 60,
        turnStartTime: null
      },
      created: new Date(),
      lastActivity: new Date()
    };
&nbsp;
    this.rooms.set(roomId, room);
    return room;
  }
&nbsp;
  joinRoom(playerId: string, roomId: string, password?: string): boolean {
    const room = this.rooms.get(roomId);
    if (!room) {
      throw new Error('Room not found');
    }
&nbsp;
    if (room.password &amp;&amp; room.password !== password) {
      throw new Error('Invalid password');
    }
&nbsp;
    if (room.players.size &gt;= room.maxPlayers) {
      throw new Error('Room is full');
    }
&nbsp;
    <span class="missing-if-branch" title="if path not taken" >I</span>if (room.players.has(playerId)) {
<span class="cstat-no" title="statement not covered" >      throw new Error('Player already in room');</span>
    }
&nbsp;
    const player: Player = {
      id: playerId,
      name: `Player ${room.players.size + 1}`,
      roomId: roomId,
      score: 0,
      connected: true,
      isHost: false
    };
&nbsp;
    room.players.set(playerId, player);
    room.lastActivity = new Date();
    return true;
  }
&nbsp;
  leaveRoom(playerId: string, roomId: string): boolean {
    const room = this.rooms.get(roomId);
    <span class="missing-if-branch" title="if path not taken" >I</span>if (!room) {
<span class="cstat-no" title="statement not covered" >      throw new Error('Room not found');</span>
    }
&nbsp;
    if (!room.players.has(playerId)) {
      throw new Error('Player not in room');
    }
&nbsp;
    room.players.delete(playerId);
    room.lastActivity = new Date();
&nbsp;
    // もし部屋が空になったら削除
    if (room.players.size === 0) {
      this.rooms.delete(roomId);
    }
    // もしホストが退出したら、最も古いプレイヤーを新しいホストにする
    else if (playerId === room.hostId) {
      const newHost = Array.from(room.players.values())[0];
      room.hostId = newHost.id;
      newHost.isHost = true;
    }
&nbsp;
    return true;
  }
&nbsp;
  getRoomSummaries(): RoomSummary[] {
    return Array.from(this.rooms.values()).map(room =&gt; ({
      id: room.id,
      name: room.name,
      hasPassword: !!room.password,
      playerCount: room.players.size,
      maxPlayers: room.maxPlayers,
      status: room.gameState.status
    }));
  }
&nbsp;
  getRoom(roomId: string): Room | undefined {
    return this.rooms.get(roomId);
  }
&nbsp;
  updatePlayerConnection(playerId: string, roomId: string, connected: boolean): void {
    const room = this.rooms.get(roomId);
    if (!room) {
      throw new Error('Room not found');
    }
&nbsp;
    const player = room.players.get(playerId);
    if (!player) {
      throw new Error('Player not found');
    }
&nbsp;
    player.connected = connected;
    room.lastActivity = new Date();
  }
&nbsp;
  // 非アクティブなルームのクリーンアップ（30分以上アクティビティがないルーム）
  cleanupInactiveRooms(): void {
    const thirtyMinutesAgo = new Date(Date.now() - 30 * 60 * 1000);
    for (const [roomId, room] of this.rooms.entries()) {
      if (room.lastActivity &lt; thirtyMinutesAgo) {
        this.rooms.delete(roomId);
      }
    }
  }
}</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2025-03-28T05:24:39.208Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>

================
File: server/coverage/lcov-report/sorter.js
================
/* eslint-disable */
var addSorting = (function() {
    'use strict';
    var cols,
        currentSort = {
            index: 0,
            desc: false
        };

    // returns the summary table element
    function getTable() {
        return document.querySelector('.coverage-summary');
    }
    // returns the thead element of the summary table
    function getTableHeader() {
        return getTable().querySelector('thead tr');
    }
    // returns the tbody element of the summary table
    function getTableBody() {
        return getTable().querySelector('tbody');
    }
    // returns the th element for nth column
    function getNthColumn(n) {
        return getTableHeader().querySelectorAll('th')[n];
    }

    function onFilterInput() {
        const searchValue = document.getElementById('fileSearch').value;
        const rows = document.getElementsByTagName('tbody')[0].children;
        for (let i = 0; i < rows.length; i++) {
            const row = rows[i];
            if (
                row.textContent
                    .toLowerCase()
                    .includes(searchValue.toLowerCase())
            ) {
                row.style.display = '';
            } else {
                row.style.display = 'none';
            }
        }
    }

    // loads the search box
    function addSearchBox() {
        var template = document.getElementById('filterTemplate');
        var templateClone = template.content.cloneNode(true);
        templateClone.getElementById('fileSearch').oninput = onFilterInput;
        template.parentElement.appendChild(templateClone);
    }

    // loads all columns
    function loadColumns() {
        var colNodes = getTableHeader().querySelectorAll('th'),
            colNode,
            cols = [],
            col,
            i;

        for (i = 0; i < colNodes.length; i += 1) {
            colNode = colNodes[i];
            col = {
                key: colNode.getAttribute('data-col'),
                sortable: !colNode.getAttribute('data-nosort'),
                type: colNode.getAttribute('data-type') || 'string'
            };
            cols.push(col);
            if (col.sortable) {
                col.defaultDescSort = col.type === 'number';
                colNode.innerHTML =
                    colNode.innerHTML + '<span class="sorter"></span>';
            }
        }
        return cols;
    }
    // attaches a data attribute to every tr element with an object
    // of data values keyed by column name
    function loadRowData(tableRow) {
        var tableCols = tableRow.querySelectorAll('td'),
            colNode,
            col,
            data = {},
            i,
            val;
        for (i = 0; i < tableCols.length; i += 1) {
            colNode = tableCols[i];
            col = cols[i];
            val = colNode.getAttribute('data-value');
            if (col.type === 'number') {
                val = Number(val);
            }
            data[col.key] = val;
        }
        return data;
    }
    // loads all row data
    function loadData() {
        var rows = getTableBody().querySelectorAll('tr'),
            i;

        for (i = 0; i < rows.length; i += 1) {
            rows[i].data = loadRowData(rows[i]);
        }
    }
    // sorts the table using the data for the ith column
    function sortByIndex(index, desc) {
        var key = cols[index].key,
            sorter = function(a, b) {
                a = a.data[key];
                b = b.data[key];
                return a < b ? -1 : a > b ? 1 : 0;
            },
            finalSorter = sorter,
            tableBody = document.querySelector('.coverage-summary tbody'),
            rowNodes = tableBody.querySelectorAll('tr'),
            rows = [],
            i;

        if (desc) {
            finalSorter = function(a, b) {
                return -1 * sorter(a, b);
            };
        }

        for (i = 0; i < rowNodes.length; i += 1) {
            rows.push(rowNodes[i]);
            tableBody.removeChild(rowNodes[i]);
        }

        rows.sort(finalSorter);

        for (i = 0; i < rows.length; i += 1) {
            tableBody.appendChild(rows[i]);
        }
    }
    // removes sort indicators for current column being sorted
    function removeSortIndicators() {
        var col = getNthColumn(currentSort.index),
            cls = col.className;

        cls = cls.replace(/ sorted$/, '').replace(/ sorted-desc$/, '');
        col.className = cls;
    }
    // adds sort indicators for current column being sorted
    function addSortIndicators() {
        getNthColumn(currentSort.index).className += currentSort.desc
            ? ' sorted-desc'
            : ' sorted';
    }
    // adds event listeners for all sorter widgets
    function enableUI() {
        var i,
            el,
            ithSorter = function ithSorter(i) {
                var col = cols[i];

                return function() {
                    var desc = col.defaultDescSort;

                    if (currentSort.index === i) {
                        desc = !currentSort.desc;
                    }
                    sortByIndex(i, desc);
                    removeSortIndicators();
                    currentSort.index = i;
                    currentSort.desc = desc;
                    addSortIndicators();
                };
            };
        for (i = 0; i < cols.length; i += 1) {
            if (cols[i].sortable) {
                // add the click event handler on the th so users
                // dont have to click on those tiny arrows
                el = getNthColumn(i).querySelector('.sorter').parentElement;
                if (el.addEventListener) {
                    el.addEventListener('click', ithSorter(i));
                } else {
                    el.attachEvent('onclick', ithSorter(i));
                }
            }
        }
    }
    // adds sorting functionality to the UI
    return function() {
        if (!getTable()) {
            return;
        }
        cols = loadColumns();
        loadData();
        addSearchBox();
        addSortIndicators();
        enableUI();
    };
})();

window.addEventListener('load', addSorting);

================
File: server/.env.development
================
PORT=3001
HOST=localhost
NODE_ENV=development
CORS_ORIGIN=http://localhost:5173

================
File: server/jest.config.js
================
/** @type {import('ts-jest').JestConfigWithTsJest} */
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'node',
  roots: ['<rootDir>/src'],
  testMatch: ['**/__tests__/**/*.test.ts'],
  collectCoverage: true,
  collectCoverageFrom: [
    'src/**/*.ts',
    '!src/**/*.d.ts',
    '!src/server.ts'
  ],
  coverageDirectory: 'coverage',
  coverageThreshold: {
    global: {
      branches: 80,
      functions: 80,
      lines: 80,
      statements: 80
    }
  }
};

================
File: server/package.json
================
{
  "name": "ricochet-robots-server",
  "version": "1.0.0",
  "description": "Ricochet Robots multiplayer game server",
  "main": "dist/server.js",
  "scripts": {
    "start": "node dist/server.js",
    "dev": "ts-node-dev --respawn src/server.ts",
    "build": "tsc",
    "test": "jest",
    "lint": "eslint src/**/*.ts",
    "format": "prettier --write src/**/*.ts"
  },
  "dependencies": {
    "dotenv": "^16.4.5",
    "express": "^4.19.1",
    "socket.io": "^4.7.5",
    "uuid": "^9.0.1",
    "winston": "^3.12.0"
  },
  "devDependencies": {
    "@types/express": "^4.17.21",
    "@types/jest": "^29.5.14",
    "@types/node": "^20.11.30",
    "@types/uuid": "^9.0.8",
    "@typescript-eslint/eslint-plugin": "^7.3.1",
    "@typescript-eslint/parser": "^7.3.1",
    "eslint": "^8.57.0",
    "jest": "^29.7.0",
    "prettier": "^3.2.5",
    "ts-jest": "^29.1.2",
    "ts-node-dev": "^2.0.0",
    "typescript": "^5.4.2"
  }
}

================
File: server/tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2020",
    "module": "commonjs",
    "outDir": "./dist",
    "rootDir": "./src",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "declaration": true,
    "sourceMap": true
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "**/*.test.ts"]
}

================
File: src/assets/boards.json
================
{
  "boards_A": [
    {
      "boardId": 0,
      "size": 8,
      "walls": [
        {"x": 0, "y": 0, "walls": ["top", "left"]},
        {"x": 1, "y": 0, "walls": ["top"]},
        {"x": 2, "y": 0, "walls": ["top"]},
        {"x": 3, "y": 0, "walls": ["top"]},
        {"x": 4, "y": 0, "walls": ["top"]},
        {"x": 5, "y": 0, "walls": ["top", "left"]},
        {"x": 6, "y": 0, "walls": ["top"]},
        {"x": 7, "y": 0, "walls": ["top"]},
        {"x": 0, "y": 1, "walls": ["left"]},
        {"x": 2, "y": 1, "walls": ["top", "left"]},
        {"x": 0, "y": 2, "walls": ["left"]},
        {"x": 0, "y": 3, "walls": ["left"]},
        {"x": 6, "y": 3, "walls": ["left"]},
        {"x": 0, "y": 4, "walls": ["left"]},
        {"x": 6, "y": 4, "walls": ["top"]},
        {"x": 0, "y": 5, "walls": ["top", "left"]},
        {"x": 4, "y": 5, "walls": ["top"]},
        {"x": 5, "y": 5, "walls": ["left"]},
        {"x": 0, "y": 6, "walls": ["left"]},
        {"x": 2, "y": 6, "walls": ["left"]},
        {"x": 0, "y": 7, "walls": ["left"]},
        {"x": 1, "y": 7, "walls": ["top"]},
        {"x": 7, "y": 7, "walls": ["top", "left"]}
      ],
      "reflectors": [],
      "targets": [
        {"x": 2, "y": 1, "color": "yellow", "symbol": "moon"},
        {"x": 6, "y": 3, "color": "blue", "symbol": "gear"},
        {"x": 4, "y": 5, "color": "red", "symbol": "saturn"},
        {"x": 1, "y": 6, "color": "green", "symbol": "cross"}
      ]
    },
    {
      "boardId": 1,
      "size": 8,
      "walls": [
        {"x": 0, "y": 0, "walls": ["top", "left"]},
        {"x": 1, "y": 0, "walls": ["top"]},
        {"x": 2, "y": 0, "walls": ["top"]},
        {"x": 3, "y": 0, "walls": ["top"]},
        {"x": 4, "y": 0, "walls": ["top"]},
        {"x": 5, "y": 0, "walls": ["top"]},
        {"x": 6, "y": 0, "walls": ["top", "left"]},
        {"x": 7, "y": 0, "walls": ["top"]},
        {"x": 0, "y": 1, "walls": ["left"]},
        {"x": 0, "y": 2, "walls": ["left"]},
        {"x": 3, "y": 2, "walls": ["top", "left"]},
        {"x": 0, "y": 3, "walls": ["left"]},
        {"x": 5, "y": 3, "walls": ["left"]},
        {"x": 0, "y": 4, "walls": ["top", "left"]},
        {"x": 2, "y": 4, "walls": ["top"]},
        {"x": 3, "y": 4, "walls": ["left"]},
        {"x": 5, "y": 4, "walls": ["top"]},
        {"x": 0, "y": 5, "walls": ["left"]},
        {"x": 5, "y": 5, "walls": ["left"]},
        {"x": 0, "y": 6, "walls": ["left"]},
        {"x": 4, "y": 6, "walls": ["top"]},
        {"x": 0, "y": 7, "walls": ["left"]},
        {"x": 7, "y": 7, "walls": ["top", "left"]}
      ],
      "reflectors": [],
      "targets": [
        {"x": 3, "y": 2, "color": "yellow", "symbol": "moon"},
        {"x": 5, "y": 3, "color": "blue", "symbol": "gear"},
        {"x": 2, "y": 4, "color": "red", "symbol": "saturn"},
        {"x": 4, "y": 5, "color": "green", "symbol": "cross"}
      ]
    },
    {
      "boardId": 2,
      "size": 8,
      "walls": [
        {"x": 0, "y": 0, "walls": ["top", "left"]},
        {"x": 1, "y": 0, "walls": ["top"]},
        {"x": 2, "y": 0, "walls": ["top"]},
        {"x": 3, "y": 0, "walls": ["top"]},
        {"x": 4, "y": 0, "walls": ["top", "left"]},
        {"x": 5, "y": 0, "walls": ["top"]},
        {"x": 6, "y": 0, "walls": ["top"]},
        {"x": 7, "y": 0, "walls": ["top"]},
        {"x": 0, "y": 1, "walls": ["left"]},
        {"x": 6, "y": 1, "walls": ["left"]},
        {"x": 0, "y": 2, "walls": ["left"]},
        {"x": 1, "y": 2, "walls": ["left"]},
        {"x": 5, "y": 2, "walls": ["top"]},
        {"x": 0, "y": 3, "walls": ["left"]},
        {"x": 1, "y": 3, "walls": ["top"]},
        {"x": 0, "y": 4, "walls": ["top", "left"]},
        {"x": 6, "y": 4, "walls": ["top", "left"]},
        {"x": 0, "y": 5, "walls": ["left"]},
        {"x": 0, "y": 6, "walls": ["left"]},
        {"x": 2, "y": 6, "walls": ["top"]},
        {"x": 3, "y": 6, "walls": ["left"]},
        {"x": 0, "y": 7, "walls": ["left"]},
        {"x": 7, "y": 7, "walls": ["top", "left"]}
      ],
      "reflectors": [],
      "targets": [
        {"x": 6, "y": 4, "color": "yellow", "symbol": "moon"},
        {"x": 2, "y": 6, "color": "blue", "symbol": "gear"},
        {"x": 1, "y": 2, "color": "red", "symbol": "saturn"},
        {"x": 5, "y": 1, "color": "green", "symbol": "cross"}
      ]
    },
    {
      "boardId": 3,
      "size": 8,
      "walls": [
        {"x": 0, "y": 0, "walls": ["top", "left"]},
        {"x": 1, "y": 0, "walls": ["top"]},
        {"x": 2, "y": 0, "walls": ["top"]},
        {"x": 3, "y": 0, "walls": ["top", "left"]},
        {"x": 4, "y": 0, "walls": ["top"]},
        {"x": 5, "y": 0, "walls": ["top"]},
        {"x": 6, "y": 0, "walls": ["top"]},
        {"x": 7, "y": 0, "walls": ["top"]},
        {"x": 0, "y": 1, "walls": ["left"]},
        {"x": 0, "y": 2, "walls": ["left"]},
        {"x": 6, "y": 2, "walls": ["top", "left"]},
        {"x": 0, "y": 3, "walls": ["left"]},
        {"x": 5, "y": 3, "walls": ["top"]},
        {"x": 0, "y": 4, "walls": ["left"]},
        {"x": 0, "y": 5, "walls": ["left"]},
        {"x": 1, "y": 5, "walls": ["left"]},
        {"x": 0, "y": 6, "walls": ["left"]},
        {"x": 1, "y": 6, "walls": ["top"]},
        {"x": 0, "y": 7, "walls": ["top", "left"]},
        {"x": 4, "y": 7, "walls": ["top"]},
        {"x": 5, "y": 7, "walls": ["left"]},
        {"x": 7, "y": 7, "walls": ["top", "left"]}
      ],
      "reflectors": [
        {"x": 2, "y": 1, "color": "blue", "direction": "／"},
        {"x": 7, "y": 4, "color": "red", "direction": "＼"}
      ],
      "targets": [
        {"x": 6, "y": 2, "color": "yellow", "symbol": "moon"},
        {"x": 4, "y": 7, "color": "blue", "symbol": "gear"},
        {"x": 1, "y": 5, "color": "red", "symbol": "saturn"},
        {"x": 5, "y": 2, "color": "green", "symbol": "cross"}
      ]
    }
  ],
  "boards_B": [
    {
      "boardId": 0,
      "size": 8,
      "walls": [
        {"x": 0, "y": 0, "walls": ["top", "left"]},
        {"x": 1, "y": 0, "walls": ["top"]},
        {"x": 2, "y": 0, "walls": ["top", "left"]},
        {"x": 3, "y": 0, "walls": ["top"]},
        {"x": 4, "y": 0, "walls": ["top"]},
        {"x": 5, "y": 0, "walls": ["top"]},
        {"x": 6, "y": 0, "walls": ["top"]},
        {"x": 7, "y": 0, "walls": ["top"]},
        {"x": 0, "y": 1, "walls": ["left"]},
        {"x": 3, "y": 1, "walls": ["top", "left"]},
        {"x": 0, "y": 2, "walls": ["left"]},
        {"x": 0, "y": 3, "walls": ["left"]},
        {"x": 7, "y": 3, "walls": ["left"]},
        {"x": 0, "y": 4, "walls": ["left"]},
        {"x": 1, "y": 4, "walls": ["left"]},
        {"x": 6, "y": 4, "walls": ["top"]},
        {"x": 0, "y": 5, "walls": ["left"]},
        {"x": 1, "y": 5, "walls": ["top"]},
        {"x": 0, "y": 6, "walls": ["left"]},
        {"x": 4, "y": 6, "walls": ["top"]},
        {"x": 5, "y": 6, "walls": ["left"]},
        {"x": 0, "y": 7, "walls": ["top", "left"]},
        {"x": 7, "y": 7, "walls": ["top", "left"]}
      ],
      "reflectors": [],
      "targets": [
        {"x": 3, "y": 1, "color": "green", "symbol": "gear"},
        {"x": 6, "y": 3, "color": "yellow", "symbol": "cross"},
        {"x": 1, "y": 4, "color": "red", "symbol": "moon"},
        {"x": 4, "y": 6, "color": "blue", "symbol": "saturn"}
      ]
    },
    {
      "boardId": 1,
      "size": 8,
      "walls": [
        {"x": 0, "y": 0, "walls": ["top", "left"]},
        {"x": 1, "y": 0, "walls": ["top"]},
        {"x": 2, "y": 0, "walls": ["top"]},
        {"x": 3, "y": 0, "walls": ["top"]},
        {"x": 4, "y": 0, "walls": ["top"]},
        {"x": 5, "y": 0, "walls": ["top", "left"]},
        {"x": 6, "y": 0, "walls": ["top"]},
        {"x": 7, "y": 0, "walls": ["top"]},
        {"x": 0, "y": 1, "walls": ["left"]},
        {"x": 7, "y": 1, "walls": ["left"]},
        {"x": 0, "y": 2, "walls": ["left"]},
        {"x": 1, "y": 2, "walls": ["top", "left"]},
        {"x": 6, "y": 2, "walls": ["top"]},
        {"x": 0, "y": 3, "walls": ["left"]},
        {"x": 0, "y": 4, "walls": ["left"]},
        {"x": 0, "y": 5, "walls": ["left"]},
        {"x": 6, "y": 5, "walls": ["top"]},
        {"x": 7, "y": 5, "walls": ["left"]},
        {"x": 0, "y": 6, "walls": ["top", "left"]},
        {"x": 3, "y": 6, "walls": ["left"]},
        {"x": 0, "y": 7, "walls": ["left"]},
        {"x": 3, "y": 7, "walls": ["top"]},
        {"x": 7, "y": 7, "walls": ["top", "left"]}
      ],
      "reflectors": [],
      "targets": [
        {"x": 1, "y": 2, "color": "green", "symbol": "gear"},
        {"x": 6, "y": 1, "color": "yellow", "symbol": "cross"},
        {"x": 3, "y": 6, "color": "red", "symbol": "moon"},
        {"x": 6, "y": 5, "color": "blue", "symbol": "saturn"}
      ]
    },
    {
      "boardId": 2,
      "size": 8,
      "walls": [
        {"x": 0, "y": 0, "walls": ["top", "left"]},
        {"x": 1, "y": 0, "walls": ["top"]},
        {"x": 2, "y": 0, "walls": ["top", "left"]},
        {"x": 3, "y": 0, "walls": ["top"]},
        {"x": 4, "y": 0, "walls": ["top"]},
        {"x": 5, "y": 0, "walls": ["top"]},
        {"x": 6, "y": 0, "walls": ["top"]},
        {"x": 7, "y": 0, "walls": ["top"]},
        {"x": 0, "y": 1, "walls": ["left"]},
        {"x": 4, "y": 1, "walls": ["top", "left"]},
        {"x": 0, "y": 2, "walls": ["left"]},
        {"x": 1, "y": 2, "walls": ["top"]},
        {"x": 2, "y": 2, "walls": ["left"]},
        {"x": 0, "y": 3, "walls": ["left"]},
        {"x": 7, "y": 3, "walls": ["left"]},
        {"x": 0, "y": 4, "walls": ["left"]},
        {"x": 6, "y": 4, "walls": ["top"]},
        {"x": 0, "y": 5, "walls": ["left"]},
        {"x": 0, "y": 6, "walls": ["top", "left"]},
        {"x": 3, "y": 6, "walls": ["left"]},
        {"x": 0, "y": 7, "walls": ["left"]},
        {"x": 3, "y": 7, "walls": ["top"]},
        {"x": 7, "y": 7, "walls": ["top", "left"]}
      ],
      "reflectors": [],
      "targets": [
        {"x": 1, "y": 2, "color": "green", "symbol": "gear"},
        {"x": 6, "y": 3, "color": "yellow", "symbol": "cross"},
        {"x": 4, "y": 1, "color": "red", "symbol": "moon"},
        {"x": 3, "y": 6, "color": "blue", "symbol": "saturn"}
      ]
    },
    {
      "boardId": 3,
      "size": 8,
      "walls": [
        {"x": 0, "y": 0, "walls": ["top", "left"]},
        {"x": 1, "y": 0, "walls": ["top"]},
        {"x": 2, "y": 0, "walls": ["top"]},
        {"x": 3, "y": 0, "walls": ["top"]},
        {"x": 4, "y": 0, "walls": ["top"]},
        {"x": 5, "y": 0, "walls": ["top"]},
        {"x": 6, "y": 0, "walls": ["top", "left"]},
        {"x": 7, "y": 0, "walls": ["top"]},
        {"x": 0, "y": 1, "walls": ["left"]},
        {"x": 0, "y": 2, "walls": ["left"]},
        {"x": 0, "y": 3, "walls": ["left"]},
        {"x": 1, "y": 3, "walls": ["top", "left"]},
        {"x": 0, "y": 4, "walls": ["left"]},
        {"x": 7, "y": 4, "walls": ["left"]},
        {"x": 0, "y": 5, "walls": ["left"]},
        {"x": 6, "y": 5, "walls": ["top"]},
        {"x": 0, "y": 6, "walls": ["top", "left"]},
        {"x": 2, "y": 6, "walls": ["top"]},
        {"x": 3, "y": 6, "walls": ["left"]},
        {"x": 0, "y": 7, "walls": ["left"]},
        {"x": 3, "y": 7, "walls": ["top"]},
        {"x": 7, "y": 7, "walls": ["top", "left"]}
      ],
      "reflectors": [
        {"x": 5, "y": 7, "color": "yellow", "direction": "＼"},
        {"x": 4, "y": 1, "color": "green", "direction": "／"}
      ],
      "targets": [
        {"x": 2, "y": 6, "color": "green", "symbol": "gear"},
        {"x": 6, "y": 4, "color": "yellow", "symbol": "cross"},
        {"x": 1, "y": 3, "color": "red", "symbol": "moon"},
        {"x": 3, "y": 6, "color": "blue", "symbol": "saturn"}
      ]
    }
  ],
  "boards_C": [
    {
      "boardId": 0,
      "size": 8,
      "walls": [
        {"x": 0, "y": 0, "walls": ["top", "left"]},
        {"x": 1, "y": 0, "walls": ["top"]},
        {"x": 2, "y": 0, "walls": ["top"]},
        {"x": 3, "y": 0, "walls": ["top"]},
        {"x": 4, "y": 0, "walls": ["top", "left"]},
        {"x": 5, "y": 0, "walls": ["top"]},
        {"x": 6, "y": 0, "walls": ["top"]},
        {"x": 7, "y": 0, "walls": ["top"]},
        {"x": 0, "y": 1, "walls": ["left"]},
        {"x": 1, "y": 1, "walls": ["left"]},
        {"x": 0, "y": 2, "walls": ["left"]},
        {"x": 1, "y": 2, "walls": ["top"]},
        {"x": 6, "y": 2, "walls": ["top"]},
        {"x": 7, "y": 2, "walls": ["left"]},
        {"x": 0, "y": 3, "walls": ["left"]},
        {"x": 0, "y": 4, "walls": ["left"]},
        {"x": 3, "y": 4, "walls": ["left"]},
        {"x": 0, "y": 5, "walls": ["left"]},
        {"x": 2, "y": 5, "walls": ["top"]},
        {"x": 7, "y": 5, "walls": ["top", "left"]},
        {"x": 0, "y": 6, "walls": ["top", "left"]},
        {"x": 0, "y": 7, "walls": ["left"]},
        {"x": 7, "y": 7, "walls": ["top", "left"]}
      ],
      "reflectors": [],
      "targets": [
        {"x": 1, "y": 1, "color": "red", "symbol": "gear"},
        {"x": 6, "y": 2, "color": "green", "symbol": "moon"},
        {"x": 2, "y": 4, "color": "blue", "symbol": "cross"},
        {"x": 7, "y": 5, "color": "yellow", "symbol": "saturn"}
      ]
    },
    {
      "boardId": 1,
      "size": 8,
      "walls": [
        {"x": 0, "y": 0, "walls": ["top", "left"]},
        {"x": 1, "y": 0, "walls": ["top"]},
        {"x": 2, "y": 0, "walls": ["top", "left"]},
        {"x": 3, "y": 0, "walls": ["top"]},
        {"x": 4, "y": 0, "walls": ["top"]},
        {"x": 5, "y": 0, "walls": ["top"]},
        {"x": 6, "y": 0, "walls": ["top"]},
        {"x": 7, "y": 0, "walls": ["top"]},
        {"x": 0, "y": 1, "walls": ["left"]},
        {"x": 4, "y": 1, "walls": ["top"]},
        {"x": 5, "y": 1, "walls": ["left"]},
        {"x": 0, "y": 2, "walls": ["left"]},
        {"x": 0, "y": 3, "walls": ["left"]},
        {"x": 1, "y": 3, "walls": ["left"]},
        {"x": 0, "y": 4, "walls": ["left"]},
        {"x": 1, "y": 4, "walls": ["top"]},
        {"x": 0, "y": 5, "walls": ["left"]},
        {"x": 5, "y": 5, "walls": ["top", "left"]},
        {"x": 0, "y": 6, "walls": ["top", "left"]},
        {"x": 4, "y": 6, "walls": ["left"]},
        {"x": 0, "y": 7, "walls": ["left"]},
        {"x": 3, "y": 7, "walls": ["top"]},
        {"x": 7, "y": 7, "walls": ["top", "left"]}
      ],
      "reflectors": [],
      "targets": [
        {"x": 1, "y": 3, "color": "red", "symbol": "gear"},
        {"x": 4, "y": 1, "color": "green", "symbol": "moon"},
        {"x": 3, "y": 6, "color": "blue", "symbol": "cross"},
        {"x": 5, "y": 5, "color": "yellow", "symbol": "saturn"}
      ]
    },
    {
      "boardId": 2,
      "size": 8,
      "walls": [
        {"x": 0, "y": 0, "walls": ["top", "left"]},
        {"x": 1, "y": 0, "walls": ["top"]},
        {"x": 2, "y": 0, "walls": ["top"]},
        {"x": 3, "y": 0, "walls": ["top"]},
        {"x": 4, "y": 0, "walls": ["top", "left"]},
        {"x": 5, "y": 0, "walls": ["top"]},
        {"x": 6, "y": 0, "walls": ["top"]},
        {"x": 7, "y": 0, "walls": ["top"]},
        {"x": 0, "y": 1, "walls": ["left"]},
        {"x": 0, "y": 2, "walls": ["left"]},
        {"x": 6, "y": 2, "walls": ["left"]},
        {"x": 0, "y": 3, "walls": ["left"]},
        {"x": 5, "y": 3, "walls": ["top"]},
        {"x": 0, "y": 4, "walls": ["left"]},
        {"x": 2, "y": 4, "walls": ["top"]},
        {"x": 3, "y": 4, "walls": ["left"]},
        {"x": 0, "y": 5, "walls": ["top", "left"]},
        {"x": 7, "y": 5, "walls": ["left"]},
        {"x": 0, "y": 6, "walls": ["left"]},
        {"x": 1, "y": 6, "walls": ["top", "left"]},
        {"x": 7, "y": 6, "walls": ["top"]},
        {"x": 0, "y": 7, "walls": ["left"]},
        {"x": 7, "y": 7, "walls": ["top", "left"]}
      ],
      "reflectors": [],
      "targets": [
        {"x": 7, "y": 5, "color": "red", "symbol": "gear"},
        {"x": 2, "y": 4, "color": "green", "symbol": "moon"},
        {"x": 5, "y": 2, "color": "blue", "symbol": "cross"},
        {"x": 1, "y": 6, "color": "yellow", "symbol": "saturn"}
      ]
    },
    {
      "boardId": 3,
      "size": 8,
      "walls": [
        {"x": 0, "y": 0, "walls": ["top", "left"]},
        {"x": 1, "y": 0, "walls": ["top"]},
        {"x": 2, "y": 0, "walls": ["top"]},
        {"x": 3, "y": 0, "walls": ["top"]},
        {"x": 4, "y": 0, "walls": ["top"]},
        {"x": 5, "y": 0, "walls": ["top", "left"]},
        {"x": 6, "y": 0, "walls": ["top"]},
        {"x": 7, "y": 0, "walls": ["top"]},
        {"x": 0, "y": 1, "walls": ["left"]},
        {"x": 0, "y": 2, "walls": ["left"]},
        {"x": 7, "y": 2, "walls": ["left"]},
        {"x": 0, "y": 3, "walls": ["top", "left"]},
        {"x": 6, "y": 3, "walls": ["top"]},
        {"x": 0, "y": 4, "walls": ["left"]},
        {"x": 2, "y": 4, "walls": ["top"]},
        {"x": 3, "y": 4, "walls": ["left"]},
        {"x": 0, "y": 5, "walls": ["left"]},
        {"x": 3, "y": 5, "walls": ["top"]},
        {"x": 0, "y": 6, "walls": ["left"]},
        {"x": 5, "y": 6, "walls": ["top", "left"]},
        {"x": 0, "y": 7, "walls": ["left"]},
        {"x": 7, "y": 7, "walls": ["top", "left"]}
      ],
      "reflectors": [
        {"x": 4, "y": 1, "color": "blue", "direction": "＼"},
        {"x": 6, "y": 3, "color": "yellow", "direction": "＼"}
      ],
      "targets": [
        {"x": 3, "y": 4, "color": "red", "symbol": "gear"},
        {"x": 2, "y": 4, "color": "green", "symbol": "moon"},
        {"x": 6, "y": 2, "color": "blue", "symbol": "cross"},
        {"x": 5, "y": 6, "color": "yellow", "symbol": "saturn"}
      ]
    }
  ],
  "boards_D": [
    {
      "boardId": 0,
      "size": 8,
      "walls": [
        {"x": 0, "y": 0, "walls": ["top", "left"]},
        {"x": 1, "y": 0, "walls": ["top"]},
        {"x": 2, "y": 0, "walls": ["top"]},
        {"x": 3, "y": 0, "walls": ["top"]},
        {"x": 4, "y": 0, "walls": ["top"]},
        {"x": 5, "y": 0, "walls": ["top", "left"]},
        {"x": 6, "y": 0, "walls": ["top"]},
        {"x": 7, "y": 0, "walls": ["top"]},
        {"x": 0, "y": 1, "walls": ["left"]},
        {"x": 3, "y": 1, "walls": ["left"]},
        {"x": 0, "y": 2, "walls": ["left"]},
        {"x": 2, "y": 2, "walls": ["top"]},
        {"x": 0, "y": 3, "walls": ["left"]},
        {"x": 1, "y": 3, "walls": ["left"]},
        {"x": 0, "y": 4, "walls": ["left"]},
        {"x": 1, "y": 4, "walls": ["top"]},
        {"x": 6, "y": 4, "walls": ["top", "left"]},
        {"x": 0, "y": 5, "walls": ["top", "left"]},
        {"x": 0, "y": 6, "walls": ["left"]},
        {"x": 5, "y": 6, "walls": ["top"]},
        {"x": 6, "y": 6, "walls": ["left"]},
        {"x": 0, "y": 7, "walls": ["left"]},
        {"x": 3, "y": 7, "walls": ["bottom"]},
        {"x": 4, "y": 7, "walls": ["left"]},
        {"x": 7, "y": 7, "walls": ["top", "left"]}
      ],
      "reflectors": [],
      "targets": [
        {"x": 2, "y": 1, "color": "red", "symbol": "cross"},
        {"x": 1, "y": 3, "color": "green", "symbol": "saturn"},
        {"x": 6, "y": 4, "color": "yellow", "symbol": "gear"},
        {"x": 5, "y": 6, "color": "blue", "symbol": "moon"},
        {"x": 3, "y": 7, "color": "colors", "symbol": "vortex"}
      ]
    },
    {
      "boardId": 1,
      "size": 8,
      "walls": [
        {"x": 0, "y": 0, "walls": ["top", "left"]},
        {"x": 1, "y": 0, "walls": ["top"]},
        {"x": 2, "y": 0, "walls": ["top"]},
        {"x": 3, "y": 0, "walls": ["top", "left"]},
        {"x": 4, "y": 0, "walls": ["top"]},
        {"x": 5, "y": 0, "walls": ["top"]},
        {"x": 6, "y": 0, "walls": ["top"]},
        {"x": 7, "y": 0, "walls": ["top"]},
        {"x": 0, "y": 1, "walls": ["left"]},
        {"x": 5, "y": 1, "walls": ["left"]},
        {"x": 0, "y": 2, "walls": ["left"]},
        {"x": 5, "y": 2, "walls": ["top"]},
        {"x": 7, "y": 2, "walls": ["right"]},
        {"x": 0, "y": 3, "walls": ["left"]},
        {"x": 7, "y": 3, "walls": ["top"]},
        {"x": 0, "y": 4, "walls": ["top", "left"]},
        {"x": 4, "y": 4, "walls": ["left"]},
        {"x": 0, "y": 5, "walls": ["left"]},
        {"x": 3, "y": 5, "walls": ["top"]},
        {"x": 6, "y": 5, "walls": ["top", "left"]},
        {"x": 0, "y": 6, "walls": ["left"]},
        {"x": 1, "y": 6, "walls": ["top"]},
        {"x": 2, "y": 6, "walls": ["left"]},
        {"x": 0, "y": 7, "walls": ["left"]},
        {"x": 7, "y": 7, "walls": ["top", "left"]}
      ],
      "reflectors": [],
      "targets": [
        {"x": 3, "y": 4, "color": "red", "symbol": "cross"},
        {"x": 6, "y": 5, "color": "green", "symbol": "saturn"},
        {"x": 1, "y": 6, "color": "yellow", "symbol": "gear"},
        {"x": 5, "y": 1, "color": "blue", "symbol": "moon"},
        {"x": 7, "y": 2, "color": "colors", "symbol": "vortex"}
      ]
    },
    {
      "boardId": 2,
      "size": 8,
      "walls": [
        {"x": 0, "y": 0, "walls": ["top", "left"]},
        {"x": 1, "y": 0, "walls": ["top"]},
        {"x": 2, "y": 0, "walls": ["top"]},
        {"x": 3, "y": 0, "walls": ["top"]},
        {"x": 4, "y": 0, "walls": ["top", "left"]},
        {"x": 5, "y": 0, "walls": ["top"]},
        {"x": 6, "y": 0, "walls": ["top"]},
        {"x": 7, "y": 0, "walls": ["top"]},
        {"x": 0, "y": 1, "walls": ["left"]},
        {"x": 6, "y": 1, "walls": ["left"]},
        {"x": 0, "y": 2, "walls": ["left"]},
        {"x": 6, "y": 2, "walls": ["top"]},
        {"x": 0, "y": 3, "walls": ["left"]},
        {"x": 1, "y": 3, "walls": ["top"]},
        {"x": 2, "y": 3, "walls": ["left"]},
        {"x": 0, "y": 4, "walls": ["left"]},
        {"x": 5, "y": 4, "walls": ["top", "left"]},
        {"x": 0, "y": 5, "walls": ["left"]},
        {"x": 3, "y": 5, "walls": ["left"]},
        {"x": 7, "y": 5, "walls": ["right"]},
        {"x": 0, "y": 6, "walls": ["left"]},
        {"x": 2, "y": 6, "walls": ["top"]},
        {"x": 7, "y": 6, "walls": ["top"]},
        {"x": 0, "y": 7, "walls": ["top", "left"]},
        {"x": 7, "y": 7, "walls": ["top", "left"]}
      ],
      "reflectors": [],
      "targets": [
        {"x": 2, "y": 5, "color": "red", "symbol": "cross"},
        {"x": 5, "y": 4, "color": "green", "symbol": "saturn"},
        {"x": 1, "y": 3, "color": "yellow", "symbol": "gear"},
        {"x": 6, "y": 1, "color": "blue", "symbol": "moon"},
        {"x": 7, "y": 5, "color": "colors", "symbol": "vortex"}
      ]
    },
    {
      "boardId": 3,
      "size": 8,
      "walls": [
        {"x": 0, "y": 0, "walls": ["top", "left"]},
        {"x": 1, "y": 0, "walls": ["top"]},
        {"x": 2, "y": 0, "walls": ["top"]},
        {"x": 3, "y": 0, "walls": ["top"]},
        {"x": 4, "y": 0, "walls": ["top"]},
        {"x": 5, "y": 0, "walls": ["top", "left"]},
        {"x": 6, "y": 0, "walls": ["top"]},
        {"x": 7, "y": 0, "walls": ["top"]},
        {"x": 0, "y": 1, "walls": ["left"]},
        {"x": 0, "y": 2, "walls": ["left"]},
        {"x": 6, "y": 2, "walls": ["top", "left"]},
        {"x": 0, "y": 3, "walls": ["left"]},
        {"x": 2, "y": 3, "walls": ["top"]},
        {"x": 3, "y": 3, "walls": ["left"]},
        {"x": 0, "y": 4, "walls": ["left"]},
        {"x": 3, "y": 4, "walls": ["top"]},
        {"x": 0, "y": 5, "walls": ["left"]},
        {"x": 2, "y": 5, "walls": ["left"]},
        {"x": 0, "y": 6, "walls": ["left"]},
        {"x": 1, "y": 6, "walls": ["top"]},
        {"x": 0, "y": 7, "walls": ["top", "left"]},
        {"x": 5, "y": 7, "walls": ["bottom"]},
        {"x": 6, "y": 7, "walls": ["left"]},
        {"x": 7, "y": 7, "walls": ["top", "left"]}
      ],
      "reflectors": [
        {"x": 2, "y": 1, "color": "red", "direction": "＼"},
        {"x": 3, "y": 6, "color": "green", "direction": "＼"}
      ],
      "targets": [
        {"x": 1, "y": 5, "color": "red", "symbol": "cross"},
        {"x": 3, "y": 3, "color": "green", "symbol": "saturn"},
        {"x": 6, "y": 2, "color": "yellow", "symbol": "gear"},
        {"x": 2, "y": 3, "color": "blue", "symbol": "moon"},
        {"x": 5, "y": 7, "color": "colors", "symbol": "vortex"}
      ]
    }
  ]
}

================
File: src/assets/react.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: src/components/GameBoard/BoardCell.tsx
================
import { FC, memo } from 'react';
import { Cell } from '../../types/game';

interface BoardCellProps {
  cell: Cell;
  x: number;
  y: number;
  size: number;
}

export const BoardCell: FC<BoardCellProps> = memo(({ cell, x, y, size }) => {
  const cellSize = `${size}px`;

  const getWallClasses = () => {
    const classes: string[] = ['absolute inset-0'];
    
    if (cell.walls.top) {
      classes.push('border-t-4 border-gray-800');
    }
    if (cell.walls.right) {
      classes.push('border-r-4 border-gray-800');
    }
    if (cell.walls.bottom) {
      classes.push('border-b-4 border-gray-800');
    }
    if (cell.walls.left) {
      classes.push('border-l-4 border-gray-800');
    }

    return classes.join(' ');
  };

  const getTargetClasses = () => {
    if (!cell.isTarget) return '';
    
    const baseClasses = 'absolute inset-1 rounded-md flex items-center justify-center';
    
    // Vortex用の特別なスタイル
    if (cell.targetSymbol === '✧') {
      return `${baseClasses} bg-gradient-to-r from-purple-500 via-pink-500 to-red-500 animate-pulse`;
    }

    const colorClasses: Record<string, string> = {
      red: 'bg-red-500',
      blue: 'bg-blue-700',
      yellow: 'bg-yellow-500',
      green: 'bg-green-500',
      colors: 'bg-gradient-to-r from-purple-500 via-pink-500 to-red-500',
    };

    return `${baseClasses} ${cell.targetColor ? colorClasses[cell.targetColor] : 'bg-purple-500'}`;
  };

  const getReflectorClasses = () => {
    if (!cell.reflector) return '';

    const baseClasses = 'absolute inset-0 flex items-center justify-center font-bold';
    const colorClasses: Record<string, string> = {
      red: 'text-red-600',
      blue: 'text-blue-600',
      yellow: 'text-yellow-600',
      green: 'text-green-600',
    };

    return `${baseClasses} ${colorClasses[cell.reflector.color]}`;
  };

  const renderReflector = () => {
    if (!cell.reflector) return null;

    return (
      <div className={getReflectorClasses()}>
        {/* 反射板を二重に表示して太さを出す */}
        <div className="absolute inset-0 flex items-center justify-center" 
             style={{ fontSize: `${size * 0.9}px` }}>
          <span className="transform rotate-0 select-none">
            {cell.reflector.direction}
          </span>
        </div>
        <div className="absolute inset-0 flex items-center justify-center" 
             style={{ fontSize: `${size * 0.9}px`, opacity: 0.5 }}>
          <span className="transform rotate-0 select-none blur-[1px]">
            {cell.reflector.direction}
          </span>
        </div>
      </div>
    );
  };

  const renderTargetSymbol = () => {
    if (!cell.isTarget || !cell.targetSymbol) return null;

    const symbolClasses = cell.targetSymbol === '✧'
      ? 'text-white font-bold text-3xl animate-spin'
      : 'text-white font-bold text-3xl';

    return (
      <span className={symbolClasses}>
        {cell.targetSymbol}
      </span>
    );
  };

  return (
    <div 
      className="relative border border-gray-200"
      style={{ 
        width: cellSize, 
        height: cellSize,
      }}
      data-x={x}
      data-y={y}
    >
      {/* 背景 */}
      <div className="absolute inset-0 bg-white" />
      
      {/* 壁 */}
      <div className={getWallClasses()} />
      
      {/* 反射板 */}
      {renderReflector()}
      
      {/* ターゲット */}
      {cell.isTarget && (
        <div className={getTargetClasses()}>
          {renderTargetSymbol()}
        </div>
      )}
    </div>
  );
});

BoardCell.displayName = 'BoardCell';

export default BoardCell;

================
File: src/components/GameBoard/GameBoard.tsx
================
import { FC, memo, useState, useEffect } from 'react';
import { Board, RobotColor, Direction } from '../../types/game';
import { BoardCell } from './BoardCell';
import Robot from './Robot';
import { calculatePath } from '../../utils/robotMovement';

interface GameBoardProps {
  board: Board;
  isPlayerTurn: boolean;
  onRobotMove?: (color: RobotColor, direction: Direction) => void;
}

const GameBoard: FC<GameBoardProps> = memo(({ board, isPlayerTurn, onRobotMove }) => {
  // 現在選択されているロボットの色を管理
  const [selectedRobot, setSelectedRobot] = useState<RobotColor | null>(null);
  // 移動中かどうかを管理
  const [isMoving, setIsMoving] = useState(false);

  // セルサイズを固定値で設定
  const cellSize = 40; // px単位
  const boardSize = board.size * cellSize;

  // ボードの状態が変化したら移動中フラグをリセット
  useEffect(() => {
    setIsMoving(false);
  }, [board.robots]);

  // キーボード操作
  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (!isPlayerTurn || !selectedRobot || isMoving) return;

    const direction: Direction | undefined = {
      'ArrowUp': 'up',
      'ArrowRight': 'right',
      'ArrowDown': 'down',
      'ArrowLeft': 'left',
    }[e.key] as Direction;

    if (!direction) return;

    e.preventDefault();
    handleRobotMove(selectedRobot, direction);
  };

  // ロボットの移動ハンドラー
  const handleRobotMove = (color: RobotColor, direction: Direction) => {
    if (!isPlayerTurn || isMoving || !onRobotMove) return;

    const robot = board.robots.find(r => r.color === color);
    if (!robot) return;

    // 移動経路を計算
    const path = calculatePath(board, robot, direction);
    if (path.length <= 1) return; // 移動できない場合

    // 移動中フラグを設定
    setIsMoving(true);
    onRobotMove(color, direction);
  };

  // ロボットのクリックハンドラー
  const handleRobotClick = (color: RobotColor) => {
    if (!isPlayerTurn || isMoving) return;
    setSelectedRobot(prev => prev === color ? null : color);
  };

  return (
    <div 
      className="w-full h-full flex items-center justify-center focus:outline-none"
      tabIndex={0}
      onKeyDown={handleKeyDown}
    >
      <div 
        className="relative bg-white rounded-lg shadow-lg"
        style={{
          width: `${boardSize}px`,
          height: `${boardSize}px`,
        }}
      >
        {/* ボードのセル */}
        <div 
          className="absolute inset-0 grid"
          style={{
            gridTemplateColumns: `repeat(${board.size}, ${cellSize}px)`,
          }}
        >
          {board.cells.map((row, y) =>
            row.map((cell, x) => (
              <BoardCell
                key={`${x}-${y}`}
                cell={cell}
                x={x}
                y={y}
                size={cellSize}
              />
            ))
          )}
        </div>

        {/* ロボット */}
        {board.robots.map((robot) => (
          <Robot
            key={robot.color}
            color={robot.color}
            position={robot.position}
            boardSize={board.size}
            isActive={isPlayerTurn && !isMoving}
            isSelected={selectedRobot === robot.color}
            onMove={handleRobotMove}
            onClick={() => handleRobotClick(robot.color)}
            style={{
              zIndex: selectedRobot === robot.color ? 20 : 10,
              width: `${cellSize}px`,
              height: `${cellSize}px`,
              position: 'absolute',
              left: `${robot.position.x * cellSize}px`,
              top: `${robot.position.y * cellSize}px`,
            }}
          />
        ))}
      </div>
    </div>
  );
});

GameBoard.displayName = 'GameBoard';

export default GameBoard;

================
File: src/hooks/useGameState.ts
================
import { useState, useCallback, useEffect } from 'react';
import { GameState, Direction, Robot, Position, Card, RobotColor } from '../types/game';
import { generateBoardFromPattern, getTargetSymbol } from '../utils/boardGenerator';
import { createCompositeBoardPattern } from '../utils/boardRotation';
import BoardLoader from '../utils/boardLoader';
import { CardDeck } from '../utils/cardGenerator';
import { calculatePath } from '../utils/robotMovement';

interface MovingRobot {
  color: RobotColor;
  path: Position[];
  currentIndex: number;
}

export const useGameState = (mode: 'single' | 'multi') => {
  const [gameState, setGameState] = useState<GameState>(() => {
    const loader = BoardLoader.getInstance();
    const selectedBoards = loader.getRandomGameBoards();
    
    const compositeBoard = createCompositeBoardPattern(
      selectedBoards[0],
      selectedBoards[1],
      selectedBoards[2],
      selectedBoards[3]
    );

    const board = generateBoardFromPattern(compositeBoard);
    board.robots = board.robots.map(robot => ({
      ...robot,
      initialPosition: { ...robot.position }
    }));

    return {
      board,
      phase: 'waiting',
      moveHistory: [],
      singlePlayer: {
        moveCount: 0,
        score: 0,
        completedCards: 0,
        declaredMoves: 0,
        maxDeclaredMoves: 0,
        timer: 60,
        isDeclarationPhase: false,
      }
    };
  });

  const [cardDeck, setCardDeck] = useState(() => new CardDeck(gameState.board));
  const [movingRobot, setMovingRobot] = useState<MovingRobot | null>(null);
  const [goalAchieved, setGoalAchieved] = useState(false);

  // タイマーの制御
  useEffect(() => {
    let interval: number | undefined;
    
    if (gameState.singlePlayer.isDeclarationPhase && 
        gameState.singlePlayer.timer > 0 &&
        gameState.singlePlayer.declaredMoves > 0) {
      interval = window.setInterval(() => {
        setGameState(prev => {
          if (prev.singlePlayer.timer <= 1) {
            return {
              ...prev,
              phase: 'playing',
              singlePlayer: {
                ...prev.singlePlayer,
                timer: 0,
                isDeclarationPhase: false,
                maxDeclaredMoves: prev.singlePlayer.declaredMoves
              }
            };
          }
          return {
            ...prev,
            singlePlayer: {
              ...prev.singlePlayer,
              timer: prev.singlePlayer.timer - 1
            }
          };
        });
      }, 1000);
    }

    return () => {
      if (interval !== undefined) {
        clearInterval(interval);
      }
    };
  }, [
    gameState.singlePlayer.isDeclarationPhase, 
    gameState.singlePlayer.timer,
    gameState.singlePlayer.declaredMoves
  ]);

  // ロボットの移動アニメーション制御
  useEffect(() => {
    if (!movingRobot || movingRobot.currentIndex >= movingRobot.path.length) {
      if (goalAchieved) {
        setGameState(prev => ({
          ...prev,
          board: {
            ...prev.board,
            robots: prev.board.robots.map(robot => ({
              ...robot,
              position: robot.initialPosition ? { ...robot.initialPosition } : robot.position
            }))
          },
          phase: 'waiting',
          moveHistory: [],
          singlePlayer: {
            ...prev.singlePlayer,
            moveCount: 0,
            declaredMoves: 0,
            maxDeclaredMoves: 0,
            isDeclarationPhase: false
          }
        }));
        setGoalAchieved(false);
      }
      return;
    }

    const moveInterval = setInterval(() => {
      setGameState(prev => {
        const newBoard = { ...prev.board };
        const robotIndex = newBoard.robots.findIndex(r => r.color === movingRobot.color);
        if (robotIndex === -1) return prev;

        // 次の位置に更新
        newBoard.robots = [...newBoard.robots];
        newBoard.robots[robotIndex] = {
          ...newBoard.robots[robotIndex],
          position: movingRobot.path[movingRobot.currentIndex]
        };

        return { ...prev, board: newBoard };
      });

      setMovingRobot(prev => {
        if (!prev) return null;
        const nextIndex = prev.currentIndex + 1;
        return nextIndex < prev.path.length
          ? { ...prev, currentIndex: nextIndex }
          : null;
      });
    }, 100);

    return () => clearInterval(moveInterval);
  }, [movingRobot, goalAchieved]);

  // 手数を宣言
  const declareMoves = useCallback((moves: number) => {
    setGameState(prev => {
      if (!prev.singlePlayer.isDeclarationPhase) return prev;

      const currentDeclared = prev.singlePlayer.declaredMoves;
      const newMaxMoves = currentDeclared === 0 
        ? moves
        : Math.min(
            moves, 
            currentDeclared,
            prev.singlePlayer.maxDeclaredMoves || Infinity
          );

      if (moves > prev.singlePlayer.maxDeclaredMoves && prev.singlePlayer.maxDeclaredMoves > 0) {
        return prev;
      }

      return {
        ...prev,
        singlePlayer: {
          ...prev.singlePlayer,
          declaredMoves: moves,
          maxDeclaredMoves: newMaxMoves
        }
      };
    });
  }, []);

  // ゴール判定（デバッグログ追加）
  const checkGoal = useCallback((robot: Robot): boolean => {
    if (!gameState.currentCard) {
      console.log('No current card');
      return false;
    }
    
    const cell = gameState.board.cells[robot.position.y][robot.position.x];
    console.log('Debug: Goal Check', {
      robotColor: robot.color,
      robotPosition: robot.position,
      cardColor: gameState.currentCard.color,
      cardPosition: gameState.currentCard.position,
      isTargetCell: cell.isTarget,
      cellPosition: { x: robot.position.x, y: robot.position.y },
      targetCellInfo: cell,
    });

    if (!cell.isTarget) {
      console.log('Not a target cell');
      return false;
    }

    // カードの位置と一致するかチェック
    if (robot.position.x !== gameState.currentCard.position.x || 
      robot.position.y !== gameState.currentCard.position.y) {
    console.log('Not at card position');
    return false;
    }

    const isValidColor = gameState.currentCard.color === 'colors' || robot.color === gameState.currentCard.color;
    console.log('Color check:', {
      isValidColor,
      robotColor: robot.color,
      targetColor: gameState.currentCard.color
    });

    return isValidColor;
  }, [gameState.board.cells, gameState.currentCard]);

  // 次のカードを引く
  const drawNextCard = useCallback(() => {
    const card = cardDeck.drawNext();
    if (card) {
      setGameState(prev => {
        const board = { ...prev.board };
        
        return {
          ...prev,
          board,
          currentCard: card,
          phase: 'declaration',
          moveHistory: [],
          singlePlayer: {
            ...prev.singlePlayer,
            moveCount: 0,
            declaredMoves: 0,
            maxDeclaredMoves: 0,
            timer: 60,
            isDeclarationPhase: true
          }
        };
      });
    } else {
      setGameState(prev => ({
        ...prev,
        phase: 'finished'
      }));
    }
    return card;
  }, [cardDeck]);

  // ロボットを移動
  const moveRobot = useCallback((robotColor: RobotColor, direction: Direction) => {
    if (movingRobot) return;

    setGameState(prev => {
      if (prev.phase !== 'playing') return prev;

      const robot = prev.board.robots.find(r => r.color === robotColor);
      if (!robot) return prev;

      const path = calculatePath(prev.board, robot, direction);
      if (path.length <= 1) return prev;

      const finalPosition = path[path.length - 1];
      console.log('Robot movement:', {
        color: robotColor,
        from: robot.position,
        to: finalPosition,
        pathLength: path.length
      });

      // 移動アニメーションを開始
      setMovingRobot({
        color: robotColor,
        path,
        currentIndex: 0
      });

      const newMoveCount = prev.singlePlayer.moveCount + 1;
      const movedRobot = { ...robot, position: finalPosition };
      const isGoal = checkGoal(movedRobot);

      console.log('Move result:', {
        isGoal,
        moveCount: newMoveCount,
        declaredMoves: prev.singlePlayer.declaredMoves
      });

      // ゴール達成時またはオーバーシュート時の処理
      if (isGoal || newMoveCount > prev.singlePlayer.declaredMoves) {
        const isExactMoves = newMoveCount === prev.singlePlayer.declaredMoves;
        const isSuccessfulGoal = isGoal && isExactMoves;
        setGoalAchieved(true);

        return {
          ...prev,
          moveHistory: [...prev.moveHistory, finalPosition],
          singlePlayer: {
            ...prev.singlePlayer,
            moveCount: newMoveCount,
            score: prev.singlePlayer.score + (isSuccessfulGoal ? 1 : 0),
            completedCards: prev.singlePlayer.completedCards + (isGoal ? 1 : 0)
          }
        };
      }

      return {
        ...prev,
        moveHistory: [...prev.moveHistory, finalPosition],
        singlePlayer: {
          ...prev.singlePlayer,
          moveCount: newMoveCount
        }
      };
    });
  }, [checkGoal, movingRobot]);

  return {
    gameState,
    moveRobot,
    declareMoves,
    drawNextCard,
    remainingCards: cardDeck.getRemaining(),
    totalCards: cardDeck.getTotalCards(),
  };
};

export default useGameState;

================
File: src/pages/BoardTestPage.tsx
================
import { FC, useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { BoardPattern } from '../types/board';
import BoardLoader from '../utils/boardLoader';
import GameBoard from '../components/GameBoard/GameBoard';
import { generateBoardFromPattern } from '../utils/boardGenerator';
import { rotateBoard, createCompositeBoardPattern } from '../utils/boardRotation';

const BoardTestPage: FC = () => {
  const navigate = useNavigate();
  const [boardPatterns, setBoardPatterns] = useState<{[key: string]: BoardPattern[]}>({});
  const [selectedBoards, setSelectedBoards] = useState<{[key: string]: BoardPattern | null}>({
    topLeft: null,
    topRight: null,
    bottomLeft: null,
    bottomRight: null,
  });
  const [compositeBoard, setCompositeBoard] = useState<BoardPattern | null>(null);
  const [validationResult, setValidationResult] = useState<{
    valid: boolean;
    errors: string[];
  }>({ valid: true, errors: [] });

  useEffect(() => {
    try {
      console.log('BoardTestPage: Initializing...');
      const loader = BoardLoader.getInstance();
      const patterns = ['A', 'C', 'D'];
      const groupedPatterns: {[key: string]: BoardPattern[]} = {};

      patterns.forEach(pattern => {
        console.log(`Loading boards for pattern ${pattern}...`);
        const boards = loader.getBoardSetByPattern(pattern);
        console.log(`Found ${boards.length} boards for pattern ${pattern}`);
        groupedPatterns[pattern] = boards;
      });

      console.log('All patterns loaded:', groupedPatterns);
      setBoardPatterns(groupedPatterns);
      setValidationResult(loader.validateAllBoards());
    } catch (err) {
      console.error('Error in BoardTestPage:', err);
      setValidationResult({
        valid: false,
        errors: [(err as Error).message]
      });
    }
  }, []);

  // ボードの選択を処理
  const handleBoardSelect = (position: keyof typeof selectedBoards, board: BoardPattern) => {
    setSelectedBoards(prev => ({
      ...prev,
      [position]: board
    }));
  };

  // 複合ボードを作成
  const handleCreateComposite = () => {
    const { topLeft, topRight, bottomLeft, bottomRight } = selectedBoards;
    if (topLeft && topRight && bottomLeft && bottomRight) {
      const composite = createCompositeBoardPattern(
        topLeft,
        topRight,
        bottomLeft,
        bottomRight
      );
      setCompositeBoard(composite);
    }
  };

  return (
    <div className="min-h-screen bg-gray-100 p-8">
      <div className="max-w-7xl mx-auto">
        <div className="flex justify-between items-center mb-8">
          <h1 className="text-2xl font-bold text-gray-800">ボードパターンテスト</h1>
          <button
            className="btn btn-secondary"
            onClick={() => navigate('/')}
          >
            戻る
          </button>
        </div>

        {/* バリデーション結果 */}
        {!validationResult.valid && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
            <h2 className="font-bold">エラーが検出されました：</h2>
            <ul className="list-disc list-inside">
              {validationResult.errors.map((error, index) => (
                <li key={index}>{error}</li>
              ))}
            </ul>
          </div>
        )}

        {/* 複合ボードプレビュー */}
        {compositeBoard && (
          <div className="mb-8 bg-white rounded-lg shadow-lg p-4">
            <h2 className="text-xl font-bold mb-4">複合ボード プレビュー</h2>
            <div className="aspect-square w-full max-w-2xl mx-auto">
              <GameBoard
                board={generateBoardFromPattern(compositeBoard)}
                isPlayerTurn={false}
              />
            </div>
          </div>
        )}

        {/* ボード選択UI */}
        <div className="mb-8 bg-white rounded-lg shadow-lg p-4">
          <h2 className="text-xl font-bold mb-4">ボード選択</h2>
          <div className="grid grid-cols-2 gap-4 mb-4">
            {['topLeft', 'topRight', 'bottomLeft', 'bottomRight'].map((position) => (
              <div key={position} className="border p-4 rounded-lg">
                <h3 className="font-semibold mb-2">{position}</h3>
                <select
                  className="w-full p-2 border rounded"
                  onChange={(e) => {
                    const [pattern, index] = e.target.value.split('-');
                    const board = boardPatterns[pattern]?.[parseInt(index)];
                    if (board) {
                      handleBoardSelect(position as keyof typeof selectedBoards, board);
                    }
                  }}
                >
                  <option value="">選択してください</option>
                  {Object.entries(boardPatterns).map(([pattern, boards]) => (
                    <optgroup key={pattern} label={`Pattern ${pattern}`}>
                      {boards.map((board, index) => (
                        <option key={`${pattern}-${index}`} value={`${pattern}-${index}`}>
                          {`${pattern}-${index}`}
                        </option>
                      ))}
                    </optgroup>
                  ))}
                </select>
              </div>
            ))}
          </div>
          <button
            className="btn btn-primary w-full"
            onClick={handleCreateComposite}
            disabled={!Object.values(selectedBoards).every(Boolean)}
          >
            複合ボードを作成
          </button>
        </div>

        {/* パターンごとのボード表示 */}
        {Object.entries(boardPatterns).map(([pattern, boards]) => (
          <div key={pattern} className="mb-8">
            <h2 className="text-xl font-bold mb-4">パターン {pattern}</h2>
            <div className="grid grid-cols-2 gap-8">
              {boards.map((board) => (
                <div key={board.boardId} className="bg-white rounded-lg shadow-lg p-4">
                  <h3 className="text-lg font-semibold mb-4">{board.boardId}</h3>
                  <div className="grid grid-cols-2 gap-4">
                    {[0, 90, 180, 270].map((rotation) => (
                      <div key={rotation} className="space-y-2">
                        <p className="text-sm font-medium">{rotation}° 回転</p>
                        <div className="aspect-square">
                          <GameBoard
                            board={generateBoardFromPattern(rotateBoard(board, rotation))}
                            isPlayerTurn={false}
                          />
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              ))}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default BoardTestPage;

================
File: src/pages/OnlinePage.tsx
================
import { FC } from 'react';
import { useNavigate } from 'react-router-dom';

const OnlinePage: FC = () => {
  const navigate = useNavigate();

  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-gray-100">
      <h1 className="text-3xl font-bold mb-8 text-gray-800">オンライン対戦</h1>
      <div className="space-y-4">
        <button 
          className="btn btn-primary w-48"
          onClick={() => navigate('/create-room')}
        >
          部屋を作る
        </button>
        <button 
          className="btn btn-secondary w-48"
          onClick={() => navigate('/join-room')}
        >
          部屋に入る
        </button>
        <button 
          className="btn bg-gray-300 text-gray-700 hover:bg-gray-400 w-48"
          onClick={() => navigate('/')}
        >
          戻る
        </button>
      </div>
    </div>
  );
};

export default OnlinePage;

================
File: src/pages/SinglePlayerPage.tsx
================
import { FC } from 'react';
import { useNavigate } from 'react-router-dom';
import useGameState from '../hooks/useGameState';
import GameBoard from '../components/GameBoard/GameBoard';
import GameInfo from '../components/GameInfo';
import { DeclarationCardList } from '../components/DeclarationCard';

const SIDE_PANEL_WIDTH = 320; // px
const DECLARATION_HEIGHT = 140; // px
const BOARD_SCALE = 0.85; // スケーリング係数

const SinglePlayerPage: FC = () => {
  const navigate = useNavigate();
  const {
    gameState,
    moveRobot,
    declareMoves,
    drawNextCard,
    remainingCards,
  } = useGameState('single');

  // 盤面のスケーリングを計算
  const getBoardScale = () => {
    const maxWidth = window.innerWidth - SIDE_PANEL_WIDTH - 48; // padding考慮
    const maxHeight = window.innerHeight - (gameState.phase === 'declaration' ? DECLARATION_HEIGHT : 0) - 48;
    const baseSize = gameState.board.size * 40; // GameBoardの基本サイズ (40px * board.size)
    
    const scaleX = maxWidth / baseSize;
    const scaleY = maxHeight / baseSize;
    return Math.min(scaleX, scaleY, 1) * BOARD_SCALE;
  };

  const scale = getBoardScale();

  return (
    <div className="h-screen w-screen bg-gray-100 flex relative overflow-hidden">
      {/* メインエリア（ボード表示部分） */}
      <div 
        className="flex-1 flex items-center justify-center"
        style={{ 
          marginRight: `${SIDE_PANEL_WIDTH}px`,
          paddingBottom: gameState.phase === 'declaration' ? `${DECLARATION_HEIGHT}px` : '0'
        }}
      >
        <div 
          className="relative bg-white rounded-lg shadow-lg p-4"
          style={{
            transform: `scale(${scale})`,
            transformOrigin: 'center center'
          }}
        >
          <GameBoard 
            board={gameState.board}
            isPlayerTurn={gameState.phase === 'playing'}
            onRobotMove={moveRobot}
          />
        </div>
      </div>

      {/* 右サイドパネル */}
      <div 
        className="fixed right-0 top-0 h-full bg-white shadow-lg p-6 flex flex-col"
        style={{ width: `${SIDE_PANEL_WIDTH}px` }}
      >
        <GameInfo
          score={gameState.singlePlayer.score}
          moveCount={gameState.singlePlayer.moveCount}
          declaredMoves={gameState.singlePlayer.declaredMoves}
          timer={gameState.singlePlayer.timer}
          isDeclarationPhase={gameState.singlePlayer.isDeclarationPhase}
          currentCard={gameState.currentCard}
          remainingCards={remainingCards}
          onDrawCard={drawNextCard}
          phase={gameState.phase}
        />

        {/* ホームに戻るボタン */}
        <button
          className="mt-6 py-2 px-4 rounded bg-gray-200 hover:bg-gray-300 transition-colors"
          onClick={() => navigate('/')}
        >
          ホームに戻る
        </button>
      </div>

      {/* 下部の宣言カード選択エリア */}
      {gameState.phase === 'declaration' && (
        <div 
          className="fixed bottom-0 left-0 bg-white shadow-lg rounded-t-lg overflow-hidden z-10"
          style={{ 
            width: `calc(100% - ${SIDE_PANEL_WIDTH}px)`,
            height: `${DECLARATION_HEIGHT}px`
          }}
        >
          <div className="w-full h-full flex justify-center items-center">
            <DeclarationCardList
              selectedNumber={gameState.singlePlayer.declaredMoves}
              maxNumber={gameState.singlePlayer.maxDeclaredMoves}
              onSelect={declareMoves}
              className="h-full"
            />
          </div>
        </div>
      )}
    </div>
  );
};

export default SinglePlayerPage;

================
File: src/pages/TitlePage.tsx
================
import { FC } from 'react';
import { useNavigate } from 'react-router-dom';

const TitlePage: FC = () => {
  const navigate = useNavigate();

  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-gray-100">
      <h1 className="text-4xl font-bold mb-8 text-gray-800">リコシェロボット</h1>
      <div className="space-y-4">
        <button
          className="btn btn-secondary w-48"
          onClick={() => navigate('/online')}
          // disabled 属性を削除
        >
          みんなで遊ぶ
        </button>
        <button
          className="btn btn-primary w-48"
          onClick={() => navigate('/single')}
        >
          一人で遊ぶ
        </button>
        {/* 開発中のテストボタン */}
        <button 
          className="btn bg-yellow-500 hover:bg-yellow-600 text-white w-48"
          onClick={() => navigate('/test-boards')}
        >
          ボードテスト
        </button>
      </div>
    </div>
  );
};

export default TitlePage;

================
File: src/services/__tests__/socketService.test.ts
================
import { vi, describe, it, expect, beforeEach, afterEach } from 'vitest';
import SocketService from '../socketService';
import { io, Socket } from 'socket.io-client';
import type { GameSocket } from '../../types/socket';

type SocketCallback = (...args: any[]) => void;

vi.mock('socket.io-client', () => ({
  io: vi.fn(() => ({
    on: vi.fn(),
    emit: vi.fn(),
    disconnect: vi.fn(),
    removeAllListeners: vi.fn(),
  })),
}));

interface MockSocket extends Partial<Socket> {
  on: ReturnType<typeof vi.fn>;
  emit: ReturnType<typeof vi.fn>;
  disconnect: ReturnType<typeof vi.fn>;
  removeAllListeners: ReturnType<typeof vi.fn>;
}

describe('SocketService', () => {
  let socketService: SocketService;
  let mockSocket: MockSocket;

  beforeEach(() => {
    vi.clearAllMocks();
    socketService = SocketService.getInstance();
  });

  afterEach(() => {
    socketService.disconnect();
  });

  describe('シングルトンパターン', () => {
    it('同じインスタンスを返すこと', () => {
      const instance1 = SocketService.getInstance();
      const instance2 = SocketService.getInstance();
      expect(instance1).toBe(instance2);
    });
  });

  describe('接続処理', () => {
    it('正常に接続できること', async () => {
      mockSocket = {
        on: vi.fn((event: string, callback: SocketCallback) => {
          if (event === 'connect') {
            setTimeout(() => callback(), 0);
          }
          return mockSocket;
        }),
        emit: vi.fn(),
        disconnect: vi.fn(),
        removeAllListeners: vi.fn(),
      };
      (io as unknown as ReturnType<typeof vi.fn>).mockReturnValue(mockSocket);

      const connectPromise = socketService.connect();
      await expect(connectPromise).resolves.not.toThrow();
      expect(io).toHaveBeenCalledWith(expect.any(String), expect.any(Object));
    });

    it('接続エラー時に適切に処理されること', async () => {
      mockSocket = {
        on: vi.fn((event: string, callback: SocketCallback) => {
          if (event === 'connect_error') {
            setTimeout(() => {
              for (let i = 0; i < 5; i++) {
                callback(new Error('Connection failed'));
              }
            }, 0);
          }
          return mockSocket;
        }),
        emit: vi.fn(),
        disconnect: vi.fn(),
        removeAllListeners: vi.fn(),
      };
      (io as unknown as ReturnType<typeof vi.fn>).mockReturnValue(mockSocket);

      await expect(socketService.connect()).rejects.toThrow('Maximum reconnection attempts reached');
    }, { timeout: 1000 });
  });

  describe('ルーム操作', () => {
    beforeEach(async () => {
      mockSocket = {
        on: vi.fn((event: string, callback: SocketCallback) => {
          if (event === 'connect') {
            setTimeout(() => callback(), 0);
          }
          return mockSocket;
        }),
        emit: vi.fn(),
        disconnect: vi.fn(),
        removeAllListeners: vi.fn(),
      };
      (io as unknown as ReturnType<typeof vi.fn>).mockReturnValue(mockSocket);
      await socketService.connect();
    });

    it('ルームを作成できること', () => {
      const roomOptions = { name: 'テストルーム', password: '1234' };
      socketService.createRoom(roomOptions);
      expect(mockSocket.emit).toHaveBeenCalledWith('createRoom', roomOptions);
    });

    it('ルームに参加できること', () => {
      const roomId = 'room1';
      const password = '1234';
      socketService.joinRoom(roomId, password);
      expect(mockSocket.emit).toHaveBeenCalledWith('joinRoom', roomId, password);
    });

    it('ルームから退出できること', () => {
      const roomId = 'room1';
      socketService.leaveRoom(roomId);
      expect(mockSocket.emit).toHaveBeenCalledWith('leaveRoom', roomId);
    });
  });

  describe('イベントハンドラー', () => {
    beforeEach(async () => {
      mockSocket = {
        on: vi.fn((event: string, callback: SocketCallback) => {
          if (event === 'connect') {
            setTimeout(() => callback(), 0);
          }
          return mockSocket;
        }),
        emit: vi.fn(),
        disconnect: vi.fn(),
        removeAllListeners: vi.fn(),
      };
      (io as unknown as ReturnType<typeof vi.fn>).mockReturnValue(mockSocket);
      await socketService.connect();
    });

    it('プレイヤー登録イベントを処理できること', () => {
      const callback = vi.fn();
      socketService.onPlayerRegistered(callback);
      expect(mockSocket.on).toHaveBeenCalledWith('playerRegistered', callback);
    });

    it('ルーム作成イベントを処理できること', () => {
      const callback = vi.fn();
      socketService.onRoomCreated(callback);
      expect(mockSocket.on).toHaveBeenCalledWith('roomCreated', callback);
    });

    it('エラーイベントを処理できること', () => {
      const callback = vi.fn();
      socketService.onError(callback);
      expect(mockSocket.on).toHaveBeenCalledWith('error', callback);
    });
  });

  describe('切断処理', () => {
    it('正常に切断できること', async () => {
      mockSocket = {
        on: vi.fn((event: string, callback: SocketCallback) => {
          if (event === 'connect') {
            setTimeout(() => callback(), 0);
          }
          return mockSocket;
        }),
        emit: vi.fn(),
        disconnect: vi.fn(),
        removeAllListeners: vi.fn(),
      };
      (io as unknown as ReturnType<typeof vi.fn>).mockReturnValue(mockSocket);
      
      await socketService.connect();
      socketService.disconnect();
      
      expect(mockSocket.disconnect).toHaveBeenCalled();
    });
  });
});

================
File: src/types/board.ts
================
import { RobotColor } from './game';

// 壁の方向を表す型
export type WallDirection = 'top' | 'right' | 'bottom' | 'left';

// 反射板の方向を表す型
export type ReflectorDirection = '／' | '＼';

// シンボルの型
export type TargetSymbol = 'moon' | 'gear' | 'saturn' | 'cross' | 'vortex';

// ターゲットの色を表す型（vortex用のcolorsを追加）
export type TargetColor = RobotColor | 'colors';

// 基本的なボードパターン型
export interface BaseBoardPattern {
  size: number;
  walls: WallPosition[];
  reflectors: ReflectorPosition[];
  targets: TargetPosition[];
}

// 変換前のボードパターン型（数値ID）
export interface RawBoardPattern extends BaseBoardPattern {
  boardId: number;
}

// 変換後のボードパターン型（文字列ID）
export interface BoardPattern extends BaseBoardPattern {
  boardId: string;
}

// 生のボードデータの型
export interface RawBoardSet {
  boards_A: RawBoardPattern[];
  boards_C: RawBoardPattern[];
  boards_D: RawBoardPattern[];
}

// 壁の位置情報
export interface WallPosition {
  x: number;
  y: number;
  walls: WallDirection[];
}

// 反射板の位置情報
export interface ReflectorPosition {
  x: number;
  y: number;
  color: RobotColor;
  direction: ReflectorDirection;
}

// ターゲットの位置情報
export interface TargetPosition {
  x: number;
  y: number;
  color: TargetColor;
  symbol: TargetSymbol;
}

// ボードのコレクション
export interface BoardCollection {
  boards: BoardPattern[];
}

// パターンの検証用
export const isValidBoardPattern = (pattern: any): pattern is BoardPattern => {
  if (!pattern || typeof pattern !== 'object') {
    console.error('Invalid pattern object');
    return false;
  }
  
  // 必須フィールドの存在チェック
  if (!('boardId' in pattern) || !('size' in pattern) || 
      !('walls' in pattern) || !('targets' in pattern)) {
    console.error('Missing required fields');
    return false;
  }

  // サイズチェック
  if (pattern.size !== 8) { // 16から8に変更
    console.error('Invalid board size:', pattern.size);
    return false;
  }

  // 配列チェック
  if (!Array.isArray(pattern.walls) || !Array.isArray(pattern.targets)) {
    console.error('Arrays are not properly defined');
    return false;
  }

  // reflectorsは任意
  if ('reflectors' in pattern && !Array.isArray(pattern.reflectors)) {
    console.error('Reflectors must be an array if present');
    return false;
  }

  // 位置情報の範囲チェック
  const isValidPosition = (x: number, y: number): boolean => 
    x >= 0 && x < pattern.size && y >= 0 && y < pattern.size;

  // wallsの各要素をチェック
  const validWalls = pattern.walls.every((wall: any) => {
    if (!isValidPosition(wall.x, wall.y)) {
      console.error('Invalid wall position:', wall);
      return false;
    }
    if (!Array.isArray(wall.walls)) {
      console.error('Invalid wall directions:', wall);
      return false;
    }
    return wall.walls.every((w: any) => 
      ['top', 'right', 'bottom', 'left'].includes(w)
    );
  });
  if (!validWalls) return false;

  // reflectorsの各要素をチェック
  if (pattern.reflectors) {
    const validReflectors = pattern.reflectors.every((reflector: any) => {
      if (!isValidPosition(reflector.x, reflector.y)) {
        console.error('Invalid reflector position:', reflector);
        return false;
      }
      if (!['red', 'blue', 'yellow', 'green'].includes(reflector.color)) {
        console.error('Invalid reflector color:', reflector);
        return false;
      }
      if (!['／', '＼'].includes(reflector.direction)) {
        console.error('Invalid reflector direction:', reflector);
        return false;
      }
      return true;
    });
    if (!validReflectors) return false;
  }

  // targetsの各要素をチェック
  const validTargets = pattern.targets.every((target: any) => {
    if (!isValidPosition(target.x, target.y)) {
      console.error('Invalid target position:', target);
      return false;
    }
    if (target.symbol === 'vortex') {
      // vortexの場合はcolorsのみ許容
      return target.color === 'colors';
    }
    if (!['red', 'blue', 'yellow', 'green', 'colors'].includes(target.color)) {
      console.error('Invalid target color:', target);
      return false;
    }
    if (!['moon', 'gear', 'saturn', 'cross', 'vortex'].includes(target.symbol)) {
      console.error('Invalid target symbol:', target);
      return false;
    }
    return true;
  });
  if (!validTargets) return false;

  return true;
};

// パターンコレクションの検証用
export const isValidBoardCollection = (collection: any): collection is BoardCollection => {
  if (!collection || typeof collection !== 'object') {
    console.error('Invalid collection object');
    return false;
  }
  if (!Array.isArray(collection.boards)) {
    console.error('boards is not an array');
    return false;
  }
  return collection.boards.every((board: any, index: number) => {
    const valid = isValidBoardPattern(board);
    if (!valid) {
      console.error(`Invalid board at index ${index}:`, board);
    }
    return valid;
  });
};

================
File: src/types/player.ts
================
export interface Player {
  id: string;
  name: string;
  roomId: string | null;
  score: number;
  connected: boolean;
  isHost: boolean;
}

export interface PlayerSession {
  playerId: string;
  socketId: string;
  lastConnected: Date;
}

export type PlayerStatus = 'connected' | 'disconnected' | 'reconnecting';

================
File: src/types/room.ts
================
import { Player } from './player';

export interface Room {
  id: string;
  name: string;
  password: string | null;
  hostId: string;
  players: { [key: string]: Player };
  maxPlayers: number;
  gameState: GameState;
  created: Date;
  lastActivity: Date;
}

export interface GameState {
  status: GameStatus;
  currentBoard: string | null;
  targetCard: string | null;
  declarations: { [key: string]: number };
  currentTurn: string | null;
  timeLimit: number;
  turnStartTime: number | null;
}

export type GameStatus = 'waiting' | 'declaration' | 'solution' | 'completed';

export interface RoomSummary {
  id: string;
  name: string;
  hasPassword: boolean;
  playerCount: number;
  maxPlayers: number;
  status: GameStatus;
}

export interface RoomOptions {
  name: string;
  password?: string;
  maxPlayers?: number;
}

================
File: src/utils/boardGenerator.ts
================
import { Board, Cell, Robot, Position, RobotColor } from '../types/game';
import { BoardPattern, TargetSymbol, WallDirection } from '../types/board';

const createEmptyCell = (): Cell => ({
  type: 'empty',
  walls: {
    top: false,
    right: false,
    bottom: false,
    left: false,
  },
});

import { SYMBOL_MAP, ROBOT_COLORS } from './constants';

// ターゲットのシンボルを文字列に変換
export const getTargetSymbol = (symbol: TargetSymbol): string => {
  return SYMBOL_MAP[symbol];
};

// 空のボードを生成
const createEmptyBoard = (size: number): Board => ({
  cells: Array(size).fill(null).map(() =>
    Array(size).fill(null).map(() => createEmptyCell())
  ),
  robots: [],
  size: size,
});

// 壁を設置
const placeWalls = (board: Board, pattern: BoardPattern): void => {
  pattern.walls.forEach(wallPos => {
    const cell = board.cells[wallPos.y][wallPos.x];
    wallPos.walls.forEach(direction => {
      cell.walls[direction] = true;
      
      // 隣接するセルの対応する壁も設置
      const adjacentWalls: Record<WallDirection, { x: number; y: number; wall: WallDirection }> = {
        right: { x: 1, y: 0, wall: 'left' },
        bottom: { x: 0, y: 1, wall: 'top' },
        left: { x: -1, y: 0, wall: 'right' },
        top: { x: 0, y: -1, wall: 'bottom' },
      };

      const adjacent = adjacentWalls[direction];
      const newX = wallPos.x + adjacent.x;
      const newY = wallPos.y + adjacent.y;

      if (newX >= 0 && newX < pattern.size && newY >= 0 && newY < pattern.size) {
        board.cells[newY][newX].walls[adjacent.wall] = true;
      }
    });
  });
};

// 反射板を設置
const placeReflectors = (board: Board, pattern: BoardPattern): void => {
  pattern.reflectors.forEach(reflector => {
    const cell = board.cells[reflector.y][reflector.x];
    cell.reflector = {
      color: reflector.color,
      direction: reflector.direction,
    };
  });
};

// ターゲットを設置
const placeTargets = (board: Board, pattern: BoardPattern): void => {
  pattern.targets.forEach(target => {
    const cell = board.cells[target.y][target.x];
    cell.isTarget = true;
    cell.targetColor = target.color;
    cell.targetSymbol = getTargetSymbol(target.symbol);
  });
};

// 中央4マスかどうかのチェック
const isCenterArea = (x: number, y: number): boolean => {
  return (x === 7 || x === 8) && (y === 7 || y === 8);
};

// ランダムな空いている位置を取得
const getRandomEmptyPosition = (
  board: Board,
  occupiedPositions: Position[],
  maxAttempts: number = 100
): Position => {
  let attempts = 0;
  while (attempts < maxAttempts) {
    const x = Math.floor(Math.random() * board.size);
    const y = Math.floor(Math.random() * board.size);

    if (!board.cells[y][x].isTarget &&
        !occupiedPositions.some(p => p.x === x && p.y === y) &&
        !isCenterArea(x, y)) {
      return { x, y };
    }
    attempts++;
  }
  console.error('Failed to find valid position');
  return { x: 0, y: 0 }; // フォールバック
};

// ロボットを配置
const placeRobots = (board: Board): void => {
  const positions: Position[] = [];
  
  ROBOT_COLORS.forEach(color => {
    const position = getRandomEmptyPosition(board, positions);
    positions.push(position);
    board.robots.push({ color, position });
  });
};

// ボードパターンからボードを生成
export const generateBoardFromPattern = (pattern: BoardPattern): Board => {
  const board = createEmptyBoard(pattern.size);
  
  placeWalls(board, pattern);
  placeReflectors(board, pattern);
  placeTargets(board, pattern);
  placeRobots(board);

  return board;
};

================
File: src/utils/boardLoader.ts
================
import { BoardPattern, RawBoardSet, RawBoardPattern } from '../types/board';
import { BoardValidator } from './boardValidator';
import boardData from '../assets/boards.json';

export class BoardLoader {
  private static instance: BoardLoader;
  private boardData: RawBoardSet;

  private constructor() {
    console.log('BoardLoader constructor - Raw data:', boardData);
    this.boardData = boardData as RawBoardSet;
  }

  public static getInstance(): BoardLoader {
    if (!BoardLoader.instance) {
      BoardLoader.instance = new BoardLoader();
    }
    return BoardLoader.instance;
  }

  private getPatternKey(pattern: string): keyof RawBoardSet {
    return `boards_${pattern}` as keyof RawBoardSet;
  }

  // パターン（A,B,C,D）のボードセットを取得
  public getBoardSetByPattern(pattern: string): BoardPattern[] {
    const key = this.getPatternKey(pattern);
    console.log(`Getting boards for pattern ${pattern} with key ${key}`);
    const boards = this.boardData[key] || [];
    
    // ボードを変換して検証
    const validatedBoards = boards
      .map(board => ({
        ...board,
        boardId: `board_${pattern}${board.boardId.toString()}` // 例: "board_A0"
      }))
      .filter(board => {
        const isValid = BoardValidator.validateBoard(board);
        if (!isValid) {
          console.warn(`Invalid board skipped: ${board.boardId}`);
        }
        return isValid;
      });

    return validatedBoards;
  }

  // 指定したIDのボードパターンを取得
  public getBoardById(boardId: string): BoardPattern | undefined {
    // boardId format: "board_A0", "board_C1" など
    const pattern = boardId.split('_')[1]?.charAt(0);
    const index = parseInt(boardId.split('_')[1]?.charAt(1) || '');
    
    if (!pattern || isNaN(index)) return undefined;
    
    const board = this.getBoardSetByPattern(pattern)
      .find(b => parseInt(b.boardId.toString().slice(-1)) === index);

    if (board && !BoardValidator.validateBoard(board)) {
      console.warn(`Invalid board requested: ${boardId}`);
      return undefined;
    }

    return board;
  }

  // 各パターンから1つずつランダムに選んで組み合わせる
  public getRandomGameBoards(): BoardPattern[] {
    const patterns = ['A', 'B', 'C', 'D'];
    const selectedBoards: BoardPattern[] = [];

    patterns.forEach(pattern => {
      const boardSet = this.getBoardSetByPattern(pattern);
      if (boardSet.length > 0) {
        const randomIndex = Math.floor(Math.random() * boardSet.length);
        selectedBoards.push(boardSet[randomIndex]);
      }
    });

    return selectedBoards;
  }

  // デバッグ用：現在のボードコレクションの状態を出力
  public debugPrintState(): void {
    console.log('Current BoardLoader state:');
    const patterns = ['A', 'B', 'C', 'D'];
    patterns.forEach(pattern => {
      const key = this.getPatternKey(pattern);
      const boards = this.boardData[key];
      if (boards) {
        console.log(`${key}: ${boards.length} boards`);
        boards.forEach((board, index) => {
          console.log(`  ${index}: walls=${board.walls.length}, targets=${board.targets.length}, reflectors=${board.reflectors?.length || 0}`);
        });
      }
    });
  }

  // 全てのボードパターンを検証
  public validateAllBoards(): { valid: boolean; errors: string[] } {
    console.log('Validating all boards...');
    const errors: string[] = [];
    
    const patterns = ['A', 'B', 'C', 'D'];
    patterns.forEach(pattern => {
      const key = this.getPatternKey(pattern);
      const boards = this.boardData[key];
      if (boards) {
        const result = BoardValidator.validateBoardSet(pattern, boards);
        errors.push(...result.errors);
      }
    });

    console.log('Validation complete. Errors:', errors);
    return {
      valid: errors.length === 0,
      errors
    };
  }
}

export default BoardLoader;

================
File: src/utils/boardRotation.ts
================
import { BoardPattern, WallDirection, ReflectorDirection } from '../types/board';

// 壁の方向を回転
const rotateWallDirection = (direction: WallDirection, rotation: number): WallDirection => {
  const directions: WallDirection[] = ['top', 'right', 'bottom', 'left'];
  const currentIndex = directions.indexOf(direction);
  const newIndex = (currentIndex + rotation / 90) % 4;
  return directions[newIndex];
};

// 反射板の方向を回転
const rotateReflectorDirection = (direction: ReflectorDirection, rotation: number): ReflectorDirection => {
  // 90度または270度回転の場合は方向を反転
  if (rotation === 90 || rotation === 270) {
    return direction === '／' ? '＼' : '／';
  }
  // 180度回転の場合は変化なし
  return direction;
};

// 座標を回転（8x8ボード用）
const rotatePosition = (x: number, y: number, size: number, rotation: number): [number, number] => {
  switch (rotation) {
    case 90:
      return [size - 1 - y, x];
    case 180:
      return [size - 1 - x, size - 1 - y];
    case 270:
      return [y, size - 1 - x];
    default:
      return [x, y];
  }
};

// ボードパターンを回転
export const rotateBoard = (board: BoardPattern, rotation: number): BoardPattern => {
  // 回転が不要な場合は元のボードをそのまま返す
  if (rotation === 0) {
    return board;
  }

  const size = board.size; // 8x8
  const rotatedBoard: BoardPattern = {
    ...board,
    walls: [],
    reflectors: [],
    targets: [],
  };

  // 壁の回転
  rotatedBoard.walls = board.walls.map(wall => {
    const [newX, newY] = rotatePosition(wall.x, wall.y, size, rotation);
    return {
      x: newX,
      y: newY,
      walls: wall.walls.map(dir => rotateWallDirection(dir, rotation)),
    };
  });

  // 反射板の回転
  rotatedBoard.reflectors = board.reflectors.map(reflector => {
    const [newX, newY] = rotatePosition(reflector.x, reflector.y, size, rotation);
    return {
      x: newX,
      y: newY,
      color: reflector.color,
      direction: rotateReflectorDirection(reflector.direction, rotation),
    };
  });

  // ターゲットの回転
  rotatedBoard.targets = board.targets.map(target => {
    const [newX, newY] = rotatePosition(target.x, target.y, size, rotation);
    return {
      x: newX,
      y: newY,
      color: target.color,
      symbol: target.symbol,
    };
  });

  return rotatedBoard;
};

// 4つのボードを2x2で配置して1つの大きなボードを作成（16x16）
export const createCompositeBoardPattern = (
  topLeft: BoardPattern,
  topRight: BoardPattern,
  bottomLeft: BoardPattern,
  bottomRight: BoardPattern
): BoardPattern => {
  // 各ボードを適切に回転
  const rotatedTopRight = rotateBoard(topRight, 90);
  const rotatedBottomRight = rotateBoard(bottomRight, 180);
  const rotatedBottomLeft = rotateBoard(bottomLeft, 270);

  // 新しいボードサイズ（8x8 → 16x16）
  const newSize = topLeft.size * 2;

  // 座標変換のヘルパー関数
  const transformCoordinates = (
    x: number, 
    y: number, 
    quadrant: 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight'
  ): [number, number] => {
    const halfSize = topLeft.size; // 8
    switch (quadrant) {
      case 'topLeft':     return [x, y];
      case 'topRight':    return [x + halfSize, y];
      case 'bottomLeft':  return [x, y + halfSize];
      case 'bottomRight': return [x + halfSize, y + halfSize];
    }
  };

  // 要素の座標を変換するヘルパー関数
  const transformElements = <T extends { x: number; y: number }>(
    elements: T[],
    quadrant: 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight'
  ): T[] => {
    return elements.map(element => {
      const [newX, newY] = transformCoordinates(element.x, element.y, quadrant);
      return { ...element, x: newX, y: newY };
    });
  };

  // 各象限のボードを結合
  const quadrants = [
    { board: topLeft, quadrant: 'topLeft' as const },
    { board: rotatedTopRight, quadrant: 'topRight' as const },
    { board: rotatedBottomLeft, quadrant: 'bottomLeft' as const },
    { board: rotatedBottomRight, quadrant: 'bottomRight' as const },
  ];

  // 新しいボードパターンを作成
  const composite: BoardPattern = {
    boardId: 'composite',
    size: newSize,
    walls: quadrants.flatMap(({ board, quadrant }) =>
      transformElements(board.walls, quadrant)
    ),
    reflectors: quadrants.flatMap(({ board, quadrant }) =>
      transformElements(board.reflectors, quadrant)
    ),
    targets: quadrants.flatMap(({ board, quadrant }) =>
      transformElements(board.targets, quadrant)
    ),
  };

  return composite;
};

================
File: src/utils/boardValidator.ts
================
import { BoardPattern, RawBoardPattern, TargetColor } from '../types/board';

export class BoardValidator {
  // 位置が有効かチェック
  private static isValidPosition(x: number, y: number, size: number): boolean {
    return x >= 0 && x < size && y >= 0 && y < size;
  }

  // ターゲットの色が有効かチェック
  private static isValidTargetColor(color: TargetColor, isVortex: boolean): boolean {
    if (isVortex) {
      return color === 'colors';
    }
    return ['red', 'blue', 'yellow', 'green', 'multi'].includes(color);
  }

  // ボードパターンを検証
  public static validateBoard(board: BoardPattern | RawBoardPattern): boolean {
    try {
      // 基本的なバリデーション
      if (board.size !== 8) {
        console.warn(`Invalid board ${board.boardId}: invalid size`);
        return false;
      }

      // 壁の位置が有効か検証
      for (const wall of board.walls) {
        if (!this.isValidPosition(wall.x, wall.y, board.size)) {
          console.warn(`Invalid wall position in board ${board.boardId}:`, wall);
          return false;
        }
      }

      // 反射板の位置が有効か検証
      for (const reflector of (board.reflectors || [])) {
        if (!this.isValidPosition(reflector.x, reflector.y, board.size)) {
          console.warn(`Invalid reflector position in board ${board.boardId}:`, reflector);
          return false;
        }
      }

      // ターゲットの位置と色を検証
      for (const target of board.targets) {
        if (!this.isValidPosition(target.x, target.y, board.size)) {
          console.warn(`Invalid target position in board ${board.boardId}:`, target);
          return false;
        }

        if (!this.isValidTargetColor(target.color, target.symbol === 'vortex')) {
          console.warn(`Invalid target color in board ${board.boardId}:`, target);
          return false;
        }
      }

      return true;
    } catch (error) {
      console.error('Board validation error:', error);
      return false;
    }
  }

  // 全てのボードパターンを検証
  public static validateBoardSet(
    pattern: string,
    boards: BoardPattern[] | RawBoardPattern[]
  ): { valid: boolean; errors: string[] } {
    const errors: string[] = [];

    boards.forEach((board, index) => {
      if (!this.validateBoard(board)) {
        const error = `Invalid board pattern: boards_${pattern}[${index}]`;
        console.error(error);
        errors.push(error);
      }
    });

    return {
      valid: errors.length === 0,
      errors
    };
  }
}

================
File: src/utils/cardGenerator.ts
================
import { Card, Position, Board, RobotColor } from '../types/game';
import { TargetSymbol } from '../types/board';
import { SYMBOLS, SYMBOL_MAP, ROBOT_COLORS } from './constants';

// カードで使用できる色の型
type CardColor = RobotColor | 'colors';

export class CardDeck {
  private cards: Omit<Card, 'position'>[];
  private currentIndex: number;
  private board: Board;

  constructor(board: Board) {
    this.board = board;
    this.cards = this.generateCards();
    this.currentIndex = 0;
    this.shuffle();
  }

  private generateCards(): Omit<Card, 'position'>[] {
    const cards: Omit<Card, 'position'>[] = [];

    // 通常のカード：各ロボットの色と通常シンボル（vortex以外）の組み合わせ
    ROBOT_COLORS.forEach(color => {
      SYMBOLS.filter(symbol => symbol !== 'vortex').forEach(symbol => {
        cards.push({
          color,
          symbol
        });
      });
    });

    // 特殊カード：colors色とvortexシンボルの組み合わせ
    cards.push({
      color: 'colors',
      symbol: 'vortex'
    });

    console.log('Generated cards:', cards);
    return cards;
  }

  private findTargetPosition(color: CardColor, symbol: TargetSymbol): Position | null {
    // シンボル文字列を取得
    const targetSymbol = SYMBOL_MAP[symbol];

    // ボード上の対応するターゲットを探す
    for (let y = 0; y < this.board.cells.length; y++) {
      for (let x = 0; x < this.board.cells[y].length; x++) {
        const cell = this.board.cells[y][x];
        if (cell.isTarget && 
            cell.targetSymbol === targetSymbol && 
            (cell.targetColor === color || color === 'colors')) {
          console.log('Found target position:', { x, y, color, symbol });
          return { x, y };
        }
      }
    }
    console.error('No matching target found for:', { color, symbol });
    return null;
  }

  private shuffle(): void {
    for (let i = this.cards.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [this.cards[i], this.cards[j]] = [this.cards[j], this.cards[i]];
    }
  }

  drawNext(): Card | null {
    if (this.currentIndex >= this.cards.length) {
      return null;
    }

    const card = this.cards[this.currentIndex++];
    const position = this.findTargetPosition(card.color, card.symbol);

    if (!position) {
      console.error('Failed to find target position for card:', card);
      return this.drawNext(); // 次のカードを試す
    }

    console.log('Drawing card:', {
      index: this.currentIndex - 1,
      ...card,
      position
    });

    return {
      ...card,
      position
    };
  }

  getRemaining(): number {
    return this.cards.length - this.currentIndex;
  }

  getTotalCards(): number {
    return this.cards.length;
  }
}

================
File: src/utils/constants.ts
================
import { TargetSymbol } from '../types/board';
import { RobotColor } from '../types/game';

// ターゲットシンボルのマッピング
export const SYMBOL_MAP: Record<TargetSymbol, string> = {
  moon: '☽',     // 三日月
  gear: '⚙',     // 歯車
  saturn: '🪐',    // 土星
  cross: '✚',     // 十字
  vortex: '✧',    // 星型の渦
};

export const SYMBOLS: TargetSymbol[] = ['moon', 'gear', 'saturn', 'cross', 'vortex'];
export const ROBOT_COLORS: RobotColor[] = ['red', 'blue', 'yellow', 'green'];

================
File: src/utils/robotMovement.ts
================
import { Board, Direction, Robot, Position } from '../types/game';

// 移動方向と壁の方向のマッピング
const directionToWall = {
  'up': 'top',
  'right': 'right',
  'down': 'bottom',
  'left': 'left'
} as const;

type WallDirection = typeof directionToWall[keyof typeof directionToWall];

// 反射による新しい移動方向を計算
const calculateReflection = (
  direction: Direction,
  reflectorDirection: '／' | '＼'
): Direction => {
  const reflectionMap: Record<'／' | '＼', Record<Direction, Direction>> = {
    '／': {
      'up': 'right',
      'right': 'up',
      'down': 'left',
      'left': 'down'
    },
    '＼': {
      'up': 'left',
      'left': 'up',
      'down': 'right',
      'right': 'down'
    }
  };

  return reflectionMap[reflectorDirection][direction];
};

// 移動方向に応じた次の位置を計算
const getNextPosition = (position: Position, direction: Direction): Position => {
  const moves = {
    up: { x: 0, y: -1 },
    right: { x: 1, y: 0 },
    down: { x: 0, y: 1 },
    left: { x: -1, y: 0 },
  };

  return {
    x: position.x + moves[direction].x,
    y: position.y + moves[direction].y,
  };
};

// 壁や他のロボットとの衝突をチェック
const hasCollision = (
  board: Board,
  position: Position,
  nextPosition: Position,
  direction: Direction
): boolean => {
  // ボード外チェック
  if (nextPosition.x < 0 || nextPosition.x >= board.size || 
      nextPosition.y < 0 || nextPosition.y >= board.size) {
    return true;
  }

  // 他のロボットとの衝突チェック
  if (board.robots.some(r => 
    r.position.x === nextPosition.x && r.position.y === nextPosition.y
  )) {
    return true;
  }

  // 現在のセルの壁をチェック
  const currentCell = board.cells[position.y][position.x];
  const currentWallDirection = directionToWall[direction];
  if (currentCell.walls[currentWallDirection]) {
    return true;
  }

  // 隣接セルの反対側の壁をチェック
  const nextCell = board.cells[nextPosition.y][nextPosition.x];
  const oppositeWalls: Record<Direction, WallDirection> = {
    up: 'bottom',
    right: 'left',
    down: 'top',
    left: 'right'
  };
  
  return nextCell.walls[oppositeWalls[direction]];
};

// 移動の途中経路を計算（反射を含む）
export const calculatePath = (
  board: Board,
  robot: Robot,
  initialDirection: Direction
): Position[] => {
  const path: Position[] = [robot.position];
  let currentPos = { ...robot.position };
  let currentDirection = initialDirection;

  while (true) {
    const nextPos = getNextPosition(currentPos, currentDirection);
    
    // 衝突判定
    if (hasCollision(board, currentPos, nextPos, currentDirection)) {
      break;
    }

    // 移動を適用
    currentPos = nextPos;
    path.push(currentPos);

    // 反射板のチェック
    const cell = board.cells[currentPos.y][currentPos.x];
    if (cell.reflector && cell.reflector.color !== robot.color) {
      // 反射による方向転換
      const newDirection = calculateReflection(currentDirection, cell.reflector.direction);
      
      // 反射後の移動が可能か確認
      const nextPosAfterReflection = getNextPosition(currentPos, newDirection);
      if (!hasCollision(board, currentPos, nextPosAfterReflection, newDirection)) {
        currentDirection = newDirection;
        continue;
      }
      break;
    }
  }

  return path;
};

// 最終的な移動位置を計算
export const calculateFinalPosition = (
  board: Board,
  robot: Robot,
  direction: Direction
): Position => {
  const path = calculatePath(board, robot, direction);
  return path[path.length - 1];
};

================
File: src/App.tsx
================
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import TitlePage from './pages/TitlePage';
import SinglePlayerPage from './pages/SinglePlayerPage';
import BoardTestPage from './pages/BoardTestPage';
import OnlinePage from './pages/OnlinePage'; // コメント解除
import CreateRoomPage from './pages/CreateRoomPage'; // コメント解除
import JoinRoomPage from './pages/JoinRoomPage'; // コメント解除
import GamePage from './pages/GamePage'; // コメント解除

function App() {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<TitlePage />} />
        <Route path="/single" element={<SinglePlayerPage />} />
        <Route path="/test-boards" element={<BoardTestPage />} />
        {/* オンラインプレイ機能のルートを有効化 */}
        <Route path="/online" element={<OnlinePage />} />
        <Route path="/create-room" element={<CreateRoomPage />} />
        <Route path="/join-room" element={<JoinRoomPage />} />
        <Route path="/game/:roomId" element={<GamePage />} />
      </Routes>
    </Router>
  );
}

export default App;

================
File: src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  html {
    font-family: system-ui, sans-serif;
  }
  body {
    @apply bg-gray-100;
  }
}

@layer components {
  .btn {
    @apply px-4 py-2 rounded-md text-sm font-medium transition-colors;
  }
  .btn-primary {
    @apply bg-blue-500 text-white hover:bg-blue-600;
  }
  .btn-secondary {
    @apply bg-gray-200 text-gray-800 hover:bg-gray-300;
  }
}

================
File: src/main.tsx
================
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
)

================
File: src/vite-env.d.ts
================
/// <reference types="vite/client" />

================
File: .env.development
================
VITE_SOCKET_URL=http://localhost:3001

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)

================
File: index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

================
File: postcss.config.js
================
/** @type {import('postcss-load-config').Config} */
export default {
  plugins: {
    'tailwindcss/nesting': {},
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: README.md
================
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config({
  extends: [
    // Remove ...tseslint.configs.recommended and replace with this
    ...tseslint.configs.recommendedTypeChecked,
    // Alternatively, use this for stricter rules
    ...tseslint.configs.strictTypeChecked,
    // Optionally, add this for stylistic rules
    ...tseslint.configs.stylisticTypeChecked,
  ],
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config({
  plugins: {
    // Add the react-x and react-dom plugins
    'react-x': reactX,
    'react-dom': reactDom,
  },
  rules: {
    // other rules...
    // Enable its recommended typescript rules
    ...reactX.configs['recommended-typescript'].rules,
    ...reactDom.configs.recommended.rules,
  },
})
```

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          DEFAULT: '#3b82f6',
          dark: '#2563eb',
        },
        secondary: {
          DEFAULT: '#6b7280',
          dark: '#4b5563',
        },
      },
    },
  },
  plugins: [],
}

================
File: tsconfig.app.json
================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}

================
File: tsconfig.json
================
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}

================
File: tsconfig.node.json
================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}

================
File: vite.config.ts
================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})

================
File: server/coverage/lcov-report/services/cardDeck.ts.html
================
<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for services/cardDeck.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="../prettify.css" />
    <link rel="stylesheet" href="../base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="../favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(../sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="../index.html">All files</a> / <a href="index.html">services</a> cardDeck.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">68.88% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>31/45</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">55.55% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>5/9</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">90% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>9/10</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">67.44% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>29/43</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line medium'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a>
<a name='L36'></a><a href='#L36'>36</a>
<a name='L37'></a><a href='#L37'>37</a>
<a name='L38'></a><a href='#L38'>38</a>
<a name='L39'></a><a href='#L39'>39</a>
<a name='L40'></a><a href='#L40'>40</a>
<a name='L41'></a><a href='#L41'>41</a>
<a name='L42'></a><a href='#L42'>42</a>
<a name='L43'></a><a href='#L43'>43</a>
<a name='L44'></a><a href='#L44'>44</a>
<a name='L45'></a><a href='#L45'>45</a>
<a name='L46'></a><a href='#L46'>46</a>
<a name='L47'></a><a href='#L47'>47</a>
<a name='L48'></a><a href='#L48'>48</a>
<a name='L49'></a><a href='#L49'>49</a>
<a name='L50'></a><a href='#L50'>50</a>
<a name='L51'></a><a href='#L51'>51</a>
<a name='L52'></a><a href='#L52'>52</a>
<a name='L53'></a><a href='#L53'>53</a>
<a name='L54'></a><a href='#L54'>54</a>
<a name='L55'></a><a href='#L55'>55</a>
<a name='L56'></a><a href='#L56'>56</a>
<a name='L57'></a><a href='#L57'>57</a>
<a name='L58'></a><a href='#L58'>58</a>
<a name='L59'></a><a href='#L59'>59</a>
<a name='L60'></a><a href='#L60'>60</a>
<a name='L61'></a><a href='#L61'>61</a>
<a name='L62'></a><a href='#L62'>62</a>
<a name='L63'></a><a href='#L63'>63</a>
<a name='L64'></a><a href='#L64'>64</a>
<a name='L65'></a><a href='#L65'>65</a>
<a name='L66'></a><a href='#L66'>66</a>
<a name='L67'></a><a href='#L67'>67</a>
<a name='L68'></a><a href='#L68'>68</a>
<a name='L69'></a><a href='#L69'>69</a>
<a name='L70'></a><a href='#L70'>70</a>
<a name='L71'></a><a href='#L71'>71</a>
<a name='L72'></a><a href='#L72'>72</a>
<a name='L73'></a><a href='#L73'>73</a>
<a name='L74'></a><a href='#L74'>74</a>
<a name='L75'></a><a href='#L75'>75</a>
<a name='L76'></a><a href='#L76'>76</a>
<a name='L77'></a><a href='#L77'>77</a>
<a name='L78'></a><a href='#L78'>78</a>
<a name='L79'></a><a href='#L79'>79</a>
<a name='L80'></a><a href='#L80'>80</a>
<a name='L81'></a><a href='#L81'>81</a>
<a name='L82'></a><a href='#L82'>82</a>
<a name='L83'></a><a href='#L83'>83</a>
<a name='L84'></a><a href='#L84'>84</a>
<a name='L85'></a><a href='#L85'>85</a>
<a name='L86'></a><a href='#L86'>86</a>
<a name='L87'></a><a href='#L87'>87</a>
<a name='L88'></a><a href='#L88'>88</a>
<a name='L89'></a><a href='#L89'>89</a>
<a name='L90'></a><a href='#L90'>90</a>
<a name='L91'></a><a href='#L91'>91</a>
<a name='L92'></a><a href='#L92'>92</a>
<a name='L93'></a><a href='#L93'>93</a>
<a name='L94'></a><a href='#L94'>94</a>
<a name='L95'></a><a href='#L95'>95</a>
<a name='L96'></a><a href='#L96'>96</a>
<a name='L97'></a><a href='#L97'>97</a>
<a name='L98'></a><a href='#L98'>98</a>
<a name='L99'></a><a href='#L99'>99</a>
<a name='L100'></a><a href='#L100'>100</a>
<a name='L101'></a><a href='#L101'>101</a>
<a name='L102'></a><a href='#L102'>102</a>
<a name='L103'></a><a href='#L103'>103</a>
<a name='L104'></a><a href='#L104'>104</a>
<a name='L105'></a><a href='#L105'>105</a>
<a name='L106'></a><a href='#L106'>106</a>
<a name='L107'></a><a href='#L107'>107</a>
<a name='L108'></a><a href='#L108'>108</a>
<a name='L109'></a><a href='#L109'>109</a>
<a name='L110'></a><a href='#L110'>110</a></td><td class="line-coverage quiet"><span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">36x</span>
<span class="cline-any cline-yes">36x</span>
<span class="cline-any cline-yes">36x</span>
<span class="cline-any cline-yes">36x</span>
<span class="cline-any cline-yes">36x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">36x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">36x</span>
<span class="cline-any cline-yes">720x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">576x</span>
<span class="cline-any cline-yes">576x</span>
<span class="cline-any cline-yes">240x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">336x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">36x</span>
<span class="cline-any cline-yes">36x</span>
<span class="cline-any cline-yes">15x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">21x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">36x</span>
<span class="cline-any cline-yes">36x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">36x</span>
<span class="cline-any cline-yes">240x</span>
<span class="cline-any cline-yes">240x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">54x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">36x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">import { Card, Position, RobotColor, TargetSymbol } from '../types/game';
import { SYMBOLS, ROBOT_COLORS, SYMBOL_MAP } from '../utils/constants';
&nbsp;
// サーバーサイド用のカード定義。色は null (Vortex) の可能性がある
type ServerCard = Omit&lt;Card, 'position' | 'color'&gt; &amp; { color: RobotColor | null };
// ターゲットの位置情報マップ: 'symbol-color' or 'symbol-null' -&gt; Position
type TargetPositions = Map&lt;string, Position&gt;;
&nbsp;
export class CardDeck {
  private cards: ServerCard[];
  private currentIndex: number;
  private targetPositions: TargetPositions;
&nbsp;
  constructor(targetPositions: TargetPositions) {
    this.targetPositions = targetPositions;
    this.cards = this.generateCards();
    this.currentIndex = 0;
    this.shuffle();
    console.log(`CardDeck initialized with ${this.cards.length} cards.`);
  }
&nbsp;
  private generateCards(): ServerCard[] {
    const cards: ServerCard[] = [];
&nbsp;
    // 通常のカード：各ロボットの色と通常シンボル（Vortex以外）の組み合わせ
    ROBOT_COLORS.forEach(color =&gt; {
      SYMBOLS.filter(symbol =&gt; symbol !== TargetSymbol.VORTEX).forEach(symbol =&gt; {
        // ターゲット位置が存在するか確認
        const targetKey = `${symbol}-${color}`;
        if (this.targetPositions.has(targetKey)) {
            cards.push({ color, symbol });
        } else {
            console.warn(`Target position not found for ${targetKey}, skipping card generation.`);
        }
      });
    });
&nbsp;
    // 特殊カード：Vortexシンボル (色は null)
    const vortexKey = `${TargetSymbol.VORTEX}-null`;
    if (this.targetPositions.has(vortexKey)) {
        cards.push({
          color: null, // Vortexカードは色を持たない
          symbol: TargetSymbol.VORTEX
        });
    } else {
        console.warn(`Target position not found for ${vortexKey}, skipping vortex card generation.`);
    }
&nbsp;
&nbsp;
    console.log('Generated server cards:', cards.length);
    return cards;
  }
&nbsp;
  private <span class="fstat-no" title="function not covered" >getTargetPosition(</span>color: RobotColor | null, symbol: TargetSymbol): Position | null {
    const targetKey = <span class="cstat-no" title="statement not covered" >`${symbol}-${color}`;</span>
    const position = <span class="cstat-no" title="statement not covered" >this.targetPositions.get(targetKey);</span>
<span class="cstat-no" title="statement not covered" >    <span class="missing-if-branch" title="if path not taken" >I</span>if (!position) {</span>
<span class="cstat-no" title="statement not covered" >        console.error(`Target position not found for key: ${targetKey}`);</span>
<span class="cstat-no" title="statement not covered" >        return null;</span>
    }
    // console.log(`Found target position for ${targetKey}:`, position);
<span class="cstat-no" title="statement not covered" >    return position;</span>
  }
&nbsp;
&nbsp;
  private shuffle(): void {
    for (let i = this.cards.length - 1; i &gt; 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [this.cards[i], this.cards[j]] = [this.cards[j], this.cards[i]];
    }
  }
&nbsp;
  drawNext(): Card | null {
    if (this.currentIndex &gt;= this.cards.length) {
      console.log('No more cards left in the deck.');
      return null;
    }
&nbsp;
    const cardBase = <span class="cstat-no" title="statement not covered" >this.cards[this.currentIndex++];</span>
    const position = <span class="cstat-no" title="statement not covered" >this.getTargetPosition(cardBase.color, cardBase.symbol);</span>
&nbsp;
<span class="cstat-no" title="statement not covered" >    <span class="missing-if-branch" title="if path not taken" >I</span>if (!position) {</span>
<span class="cstat-no" title="statement not covered" >      console.error('Failed to find target position for card:', cardBase, 'Trying next card.');</span>
      // ターゲットが見つからないカードはスキップして次のカードを引く
<span class="cstat-no" title="statement not covered" >      return this.drawNext();</span>
    }
&nbsp;
    // Card 型に合わせる (color が null の場合はどうするか？ -&gt; Card 型の color を RobotColor | null にすべきか？)
    // 一旦、Vortex の場合は color を特定の RobotColor (e.g., RED) にしてしまうか、Card 型を変更するか。
    // ここでは Card 型を変更せず、便宜的に RED を使うことにする。（要検討）
    const finalCard: Card = <span class="cstat-no" title="statement not covered" >{</span>
      ...cardBase,
      color: cardBase.color ?? RobotColor.RED, // Vortex の場合は RED とする (要検討)
      position
    };
&nbsp;
&nbsp;
<span class="cstat-no" title="statement not covered" >    console.log(`Drawing card ${this.currentIndex}/${this.cards.length}:`, finalCard);</span>
&nbsp;
<span class="cstat-no" title="statement not covered" >    return finalCard;</span>
  }
&nbsp;
  getRemaining(): number {
    return this.cards.length - this.currentIndex;
  }
&nbsp;
  getTotalCards(): number {
    return this.cards.length;
  }
}</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2025-04-05T05:09:52.757Z
            </div>
        <script src="../prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="../sorter.js"></script>
        <script src="../block-navigation.js"></script>
    </body>
</html>

================
File: server/coverage/lcov-report/utils/constants.ts.html
================
<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for utils/constants.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="../prettify.css" />
    <link rel="stylesheet" href="../base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="../favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(../sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="../index.html">All files</a> / <a href="index.html">utils</a> constants.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>4/4</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>0/0</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>0/0</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>4/4</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a></td><td class="line-coverage quiet"><span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">import { TargetSymbol, RobotColor } from '../types/game'; // Import both enums
&nbsp;
// TargetSymbol に対応する表示文字のマッピング
// Use enum members as keys
export const SYMBOL_MAP: { [key in TargetSymbol]: string } = {
  [TargetSymbol.GEAR]: '⚙️',
  [TargetSymbol.MOON]: '🌙',
  [TargetSymbol.PLANET]: '🪐',
  [TargetSymbol.STAR]: '⭐',
  [TargetSymbol.VORTEX]: '🌀',
};
&nbsp;
// TargetSymbol の配列 (vortexを含む)
// Use enum members directly
export const SYMBOLS: TargetSymbol[] = [
  TargetSymbol.GEAR,
  TargetSymbol.MOON,
  TargetSymbol.PLANET,
  TargetSymbol.STAR,
  TargetSymbol.VORTEX,
];
&nbsp;
// ロボットの色の配列
// Use enum members directly
export const ROBOT_COLORS: RobotColor[] = [
  RobotColor.RED,
  RobotColor.BLUE,
  RobotColor.GREEN,
  RobotColor.YELLOW,
];</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2025-04-05T05:09:52.757Z
            </div>
        <script src="../prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="../sorter.js"></script>
        <script src="../block-navigation.js"></script>
    </body>
</html>

================
File: server/coverage/lcov-report/utils/index.html
================
<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for utils</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="../prettify.css" />
    <link rel="stylesheet" href="../base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="../favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(../sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="../index.html">All files</a> utils</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>4/4</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>0/0</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>0/0</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>4/4</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <div class="pad1">
<table class="coverage-summary">
<thead>
<tr>
   <th data-col="file" data-fmt="html" data-html="true" class="file">File</th>
   <th data-col="pic" data-type="number" data-fmt="html" data-html="true" class="pic"></th>
   <th data-col="statements" data-type="number" data-fmt="pct" class="pct">Statements</th>
   <th data-col="statements_raw" data-type="number" data-fmt="html" class="abs"></th>
   <th data-col="branches" data-type="number" data-fmt="pct" class="pct">Branches</th>
   <th data-col="branches_raw" data-type="number" data-fmt="html" class="abs"></th>
   <th data-col="functions" data-type="number" data-fmt="pct" class="pct">Functions</th>
   <th data-col="functions_raw" data-type="number" data-fmt="html" class="abs"></th>
   <th data-col="lines" data-type="number" data-fmt="pct" class="pct">Lines</th>
   <th data-col="lines_raw" data-type="number" data-fmt="html" class="abs"></th>
</tr>
</thead>
<tbody><tr>
	<td class="file high" data-value="constants.ts"><a href="constants.ts.html">constants.ts</a></td>
	<td data-value="100" class="pic high">
	<div class="chart"><div class="cover-fill cover-full" style="width: 100%"></div><div class="cover-empty" style="width: 0%"></div></div>
	</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="4" class="abs high">4/4</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="0" class="abs high">0/0</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="0" class="abs high">0/0</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="4" class="abs high">4/4</td>
	</tr>

</tbody>
</table>
</div>
                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2025-04-05T05:09:52.757Z
            </div>
        <script src="../prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="../sorter.js"></script>
        <script src="../block-navigation.js"></script>
    </body>
</html>

================
File: server/src/services/__tests__/roomManager.test.ts
================
import { describe, expect, it, beforeEach, afterEach, jest } from '@jest/globals';
import { RoomManager } from '../roomManager';
import { Player } from '../../types/player';
import { GamePhase } from '../../types/game'; // GamePhase をインポート

describe('RoomManager', () => {
  let roomManager: RoomManager;
  let mockPlayer: Player;
  let mockPlayer2: Player; // mockPlayer2 を追加

  beforeEach(() => {
    roomManager = new RoomManager();
    mockPlayer = {
      id: 'testPlayer1',
      name: 'Test Player 1',
      roomId: null,
      score: 0,
      connected: true,
      isHost: false,
      lastConnected: new Date() // lastConnected を追加
    };
    // mockPlayer2 を初期化
    mockPlayer2 = {
      id: 'testPlayer2',
      name: 'Test Player 2',
      roomId: null,
      score: 0,
      connected: true,
      isHost: false,
      lastConnected: new Date()
    };
  });

  describe('createRoom', () => {
    it('should create a new room with the given options', () => {
      const room = roomManager.createRoom(mockPlayer, {
        name: 'Test Room',
        password: 'password123',
        maxPlayers: 4
      });

      expect(room.name).toBe('Test Room');
      expect(room.password).toBe('password123');
      expect(room.maxPlayers).toBe(4);
      expect(room.hostId).toBe(mockPlayer.id);
      expect(room.players.size).toBe(1);
      expect(room.players.get(mockPlayer.id)).toEqual(mockPlayer);
      expect(room.gameState?.phase).toBe(GamePhase.WAITING); // gameState.phase と null チェックに変更
    });

    it('should create a room with default maxPlayers when not specified', () => {
      const room = roomManager.createRoom(mockPlayer, {
        name: 'Test Room'
      });

      expect(room.maxPlayers).toBe(8);
    });

    it('should create a room with null password when not specified', () => {
      const room = roomManager.createRoom(mockPlayer, {
        name: 'Test Room'
      });

      expect(room.password).toBeNull();
    });

    it('should set the host player status correctly', () => {
      const room = roomManager.createRoom(mockPlayer, {
        name: 'Test Room'
      });

      const hostPlayer = room.players.get(mockPlayer.id);
      expect(hostPlayer?.isHost).toBe(true);
      expect(room.hostId).toBe(mockPlayer.id);
    });
  });

  describe('joinRoom', () => {
    it('should allow a player to join an existing room', () => {
      const room = roomManager.createRoom(mockPlayer, { name: 'Test Room' });
      const result = roomManager.joinRoom(mockPlayer2, room.id); // Player オブジェクトを渡す

      const updatedRoom = roomManager.getRoom(room.id);
      expect(result).toBe(true);
      expect(updatedRoom?.players.size).toBe(2);
      expect(updatedRoom?.players.has(mockPlayer2.id)).toBe(true); // ID で確認
    });

    it('should throw error when room is full', () => {
      const room = roomManager.createRoom(mockPlayer, {
        name: 'Test Room',
        maxPlayers: 1
      });

      expect(() => {
        roomManager.joinRoom(mockPlayer2, room.id); // Player オブジェクトを渡す
      }).toThrow('Room is full');
    });

    it('should throw error with incorrect password', () => {
      const room = roomManager.createRoom(mockPlayer, {
        name: 'Test Room',
        password: 'correct'
      });

      expect(() => {
        roomManager.joinRoom(mockPlayer2, room.id, 'incorrect'); // Player オブジェクトを渡す
      }).toThrow('Invalid password');
    });

    it('should throw error when room does not exist', () => {
      expect(() => {
        roomManager.joinRoom(mockPlayer, 'nonexistent-room'); // Player オブジェクトを渡す
      }).toThrow('Room not found');
    });
  });

  describe('leaveRoom', () => {
    it('should remove player from room', () => {
      const room = roomManager.createRoom(mockPlayer, { name: 'Test Room' });
      const result = roomManager.leaveRoom(mockPlayer.id, room.id);
      
      expect(result).toBe(true);
      expect(roomManager.getRoom(room.id)).toBeUndefined();
    });

    it('should assign new host when host leaves', () => {
      const room = roomManager.createRoom(mockPlayer, { name: 'Test Room' });
      roomManager.joinRoom(mockPlayer2, room.id); // Player オブジェクトを渡す
      roomManager.leaveRoom(mockPlayer.id, room.id);

      const updatedRoom = roomManager.getRoom(room.id);
      expect(updatedRoom?.hostId).toBe(mockPlayer2.id); // ID で確認
      const newHost = updatedRoom?.players.get(mockPlayer2.id); // ID で取得
      expect(newHost?.isHost).toBe(true);
    });

    it('should throw error when player is not in room', () => {
      const room = roomManager.createRoom(mockPlayer, { name: 'Test Room' });
      expect(() => {
        roomManager.leaveRoom('nonexistent-player', room.id);
      }).toThrow('Player not in room');
    });
  });

  describe('cleanupInactiveRooms', () => {
    beforeEach(() => {
      jest.useFakeTimers();
    });

    afterEach(() => {
      jest.useRealTimers();
    });

    it('should remove inactive rooms', () => {
      const room = roomManager.createRoom(mockPlayer, { name: 'Test Room' });
      const oldDate = new Date(Date.now() - 31 * 60 * 1000);
      room.lastActivity = oldDate;
      // プレイヤーも切断状態にする
      const player = room.players.get(mockPlayer.id);
      if (player) {
        player.connected = false;
      }

      roomManager.cleanupInactiveRooms();
      expect(roomManager.getRoom(room.id)).toBeUndefined();
    });

    it('should keep active rooms', () => {
      const room = roomManager.createRoom(mockPlayer, { name: 'Test Room' });
      const recentDate = new Date(Date.now() - 5 * 60 * 1000);
      room.lastActivity = recentDate;

      roomManager.cleanupInactiveRooms();
      expect(roomManager.getRoom(room.id)).toBeDefined();
    });
  });

  describe('getRoomSummaries', () => {
    it('should return empty array when no rooms exist', () => {
      const summaries = roomManager.getRoomSummaries();
      expect(summaries).toEqual([]);
    });

    it('should return correct room summaries', () => {
      roomManager.createRoom(mockPlayer, {
        name: 'Room 1',
        password: 'pass123',
        maxPlayers: 4
      });

      const summaries = roomManager.getRoomSummaries();
      expect(summaries).toHaveLength(1);
      expect(summaries[0]).toMatchObject({
        name: 'Room 1',
        hasPassword: true,
        playerCount: 1,
        maxPlayers: 4,
        status: GamePhase.WAITING // GamePhase を使用
      });
    });
  });

  describe('updatePlayerConnection', () => {
    it('should update player connection status', () => {
      const room = roomManager.createRoom(mockPlayer, { name: 'Test Room' });
      roomManager.updatePlayerConnection(mockPlayer.id, room.id, false);

      const updatedRoom = roomManager.getRoom(room.id);
      expect(updatedRoom?.players.get(mockPlayer.id)?.connected).toBe(false);
    });

    it('should warn and return when player is not found', () => {
      const room = roomManager.createRoom(mockPlayer, { name: 'Test Room' });
      const consoleWarnSpy = jest.spyOn(console, 'warn').mockImplementation(() => {}); // console.warn をスパイ

      expect(() => {
        roomManager.updatePlayerConnection('nonexistent-player', room.id, false);
      }).not.toThrow(); // エラーがスローされないことを確認
      expect(consoleWarnSpy).toHaveBeenCalledWith(expect.stringContaining('Player nonexistent-player not found')); // 警告が出力されることを確認

      consoleWarnSpy.mockRestore(); // スパイを解除
    });

    it('should warn and return when room is not found', () => {
      const consoleWarnSpy = jest.spyOn(console, 'warn').mockImplementation(() => {}); // console.warn をスパイ

      expect(() => {
        roomManager.updatePlayerConnection(mockPlayer.id, 'nonexistent-room', false);
      }).not.toThrow(); // エラーがスローされないことを確認
      expect(consoleWarnSpy).toHaveBeenCalledWith(expect.stringContaining('Room nonexistent-room not found')); // 警告が出力されることを確認

      consoleWarnSpy.mockRestore(); // スパイを解除
    });
  });
});

================
File: server/src/services/cardDeck.ts
================
import { Card, Position, RobotColor, TargetSymbol } from '../types/game';
import { SYMBOLS, ROBOT_COLORS, SYMBOL_MAP } from '../utils/constants';

// サーバーサイド用のカード定義。色は null (Vortex) の可能性がある
type ServerCard = Omit<Card, 'position' | 'color'> & { color: RobotColor | null };
// ターゲットの位置情報マップ: 'symbol-color' or 'symbol-null' -> Position
type TargetPositions = Map<string, Position>;

export class CardDeck {
  private cards: ServerCard[];
  private currentIndex: number;
  private targetPositions: TargetPositions;

  constructor(targetPositions: TargetPositions) {
    this.targetPositions = targetPositions;
    this.cards = this.generateCards();
    this.currentIndex = 0;
    this.shuffle();
    console.log(`CardDeck initialized with ${this.cards.length} cards.`);
  }

  private generateCards(): ServerCard[] {
    const cards: ServerCard[] = [];

    // 通常のカード：各ロボットの色と通常シンボル（Vortex以外）の組み合わせ
    ROBOT_COLORS.forEach(color => {
      SYMBOLS.filter(symbol => symbol !== TargetSymbol.VORTEX).forEach(symbol => {
        // ターゲット位置が存在するか確認
        const targetKey = `${symbol}-${color}`;
        if (this.targetPositions.has(targetKey)) {
            cards.push({ color, symbol });
        } else {
            console.warn(`Target position not found for ${targetKey}, skipping card generation.`);
        }
      });
    });

    // 特殊カード：Vortexシンボル (色は null)
    const vortexKey = `${TargetSymbol.VORTEX}-null`;
    if (this.targetPositions.has(vortexKey)) {
        cards.push({
          color: null, // Vortexカードは色を持たない
          symbol: TargetSymbol.VORTEX
        });
    } else {
        console.warn(`Target position not found for ${vortexKey}, skipping vortex card generation.`);
    }


    console.log('Generated server cards:', cards.length);
    return cards;
  }

  private getTargetPosition(color: RobotColor | null, symbol: TargetSymbol): Position | null {
    const targetKey = `${symbol}-${color}`;
    const position = this.targetPositions.get(targetKey);
    if (!position) {
        console.error(`Target position not found for key: ${targetKey}`);
        return null;
    }
    // console.log(`Found target position for ${targetKey}:`, position);
    return position;
  }


  private shuffle(): void {
    for (let i = this.cards.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [this.cards[i], this.cards[j]] = [this.cards[j], this.cards[i]];
    }
  }

  drawNext(): Card | null {
    if (this.currentIndex >= this.cards.length) {
      console.log('No more cards left in the deck.');
      return null;
    }

    const cardBase = this.cards[this.currentIndex++];
    const position = this.getTargetPosition(cardBase.color, cardBase.symbol);

    if (!position) {
      console.error('Failed to find target position for card:', cardBase, 'Trying next card.');
      // ターゲットが見つからないカードはスキップして次のカードを引く
      return this.drawNext();
    }

    // Card 型に合わせる (color が null の場合はどうするか？ -> Card 型の color を RobotColor | null にすべきか？)
    // 一旦、Vortex の場合は color を特定の RobotColor (e.g., RED) にしてしまうか、Card 型を変更するか。
    // ここでは Card 型を変更せず、便宜的に RED を使うことにする。（要検討）
    const finalCard: Card = {
      ...cardBase,
      color: cardBase.color ?? RobotColor.RED, // Vortex の場合は RED とする (要検討)
      position
    };


    console.log(`Drawing card ${this.currentIndex}/${this.cards.length}:`, finalCard);

    return finalCard;
  }

  getRemaining(): number {
    return this.cards.length - this.currentIndex;
  }

  getTotalCards(): number {
    return this.cards.length;
  }
}

================
File: server/src/types/player.ts
================
export interface Player {
  id: string; // socket.id と同じ
  name: string;
  roomId: string | null;
  score: number;
  connected: boolean;
  isHost: boolean;
  lastConnected: Date; // 最終接続時刻を追加
}

// PlayerSession は不要になったため削除

export type PlayerStatus = 'connected' | 'disconnected' | 'reconnecting';

================
File: server/src/types/room.ts
================
import { Player } from './player';
import { MultiplayerGameState, GamePhase } from './game'; // MultiplayerGameState と GamePhase をインポート
import { GameManager } from '../services/gameManager'; // GameManager をインポート
export interface Room {
  id: string;
  name: string;
  password: string | null;
  hostId: string;
  players: Map<string, Player>;
  maxPlayers: number;
  gameState: MultiplayerGameState | null; // 型を MultiplayerGameState | null に変更
  gameManager: GameManager; // GameManager インスタンスを追加
  created: Date;
  lastActivity: Date;
}

// GameState インターフェースと GameStatus 型を削除

export interface RoomSummary {
  id: string;
  name: string;
  hasPassword: boolean;
  playerCount: number;
  maxPlayers: number;
  status: GamePhase; // 型を GamePhase に変更
}

export interface RoomOptions {
  name: string;
  password?: string;
  maxPlayers?: number;
}

================
File: server/src/utils/constants.ts
================
import { TargetSymbol, RobotColor } from '../types/game'; // Import both enums

// TargetSymbol に対応する表示文字のマッピング
// Use enum members as keys
export const SYMBOL_MAP: { [key in TargetSymbol]: string } = {
  [TargetSymbol.GEAR]: '⚙️',
  [TargetSymbol.MOON]: '🌙',
  [TargetSymbol.PLANET]: '🪐',
  [TargetSymbol.STAR]: '⭐',
  [TargetSymbol.VORTEX]: '🌀',
};

// TargetSymbol の配列 (vortexを含む)
// Use enum members directly
export const SYMBOLS: TargetSymbol[] = [
  TargetSymbol.GEAR,
  TargetSymbol.MOON,
  TargetSymbol.PLANET,
  TargetSymbol.STAR,
  TargetSymbol.VORTEX,
];

// ロボットの色の配列
// Use enum members directly
export const ROBOT_COLORS: RobotColor[] = [
  RobotColor.RED,
  RobotColor.BLUE,
  RobotColor.GREEN,
  RobotColor.YELLOW,
];

================
File: src/components/GameBoard/Robot.tsx
================
import { FC, CSSProperties } from 'react';
import { RobotColor, Direction, Position } from '../../types/game';

export interface RobotProps {
  color: RobotColor;
  position: Position;
  boardSize: number;
  isActive: boolean;
  isSelected?: boolean; // 選択状態を追加
  onMove?: (color: RobotColor, direction: Direction) => void;
  onClick?: () => void; // クリックハンドラを追加
  style?: CSSProperties;
}

const DirectionArrow: FC<{
  direction: Direction;
  onClick: () => void;
  position: 'top' | 'right' | 'bottom' | 'left';
}> = ({ direction, onClick, position }) => {
  const arrowClasses = {
    top: 'top-0 left-1/2 -translate-x-1/2 -translate-y-full rotate-0',
    right: 'right-0 top-1/2 translate-x-full -translate-y-1/2 rotate-90',
    bottom: 'bottom-0 left-1/2 -translate-x-1/2 translate-y-full rotate-180',
    left: 'left-0 top-1/2 -translate-x-full -translate-y-1/2 -rotate-90',
  };

  return (
    <button
      className={`absolute w-8 h-8 p-1 bg-white rounded-full shadow-lg 
        transform transition-transform hover:scale-110 z-50
        ${arrowClasses[position]}`}
      onClick={(e) => {
        e.stopPropagation();
        onClick();
      }}
    >
      <svg
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        className="w-full h-full text-gray-600"
      >
        <path
          strokeLinecap="round"
          strokeLinejoin="round"
          strokeWidth={2}
          d="M5 10l7-7m0 0l7 7m-7-7v18"
        />
      </svg>
    </button>
  );
};

const Robot: FC<RobotProps> = ({
  color,
  position,
  boardSize,
  isActive,
  isSelected = false,
  onMove,
  onClick,
  style
}) => {
  // セルサイズに基づいて位置を計算
  const getPositionStyle = (): CSSProperties => {
    const cellSize = 100 / boardSize;
    return {
      position: 'absolute',
      left: `${position.x * cellSize}%`,
      top: `${position.y * cellSize}%`,
      width: `${cellSize}%`,
      height: `${cellSize}%`,
      transform: 'translate(0, 0)',
      // transition: 'all 100ms linear', // アニメーションは GamePage で制御するため削除
      cursor: isActive ? 'pointer' : 'default',
      ...style
    };
  };

  // 色に基づいてスタイルを生成
  const getColorStyle = (): string => {
    const colorMap: Record<RobotColor, string> = {
      red: 'bg-red-500 hover:bg-red-600',
      blue: 'bg-blue-500 hover:bg-blue-600',
      green: 'bg-green-500 hover:bg-green-600',
      yellow: 'bg-yellow-500 hover:bg-yellow-600'
    };
    return colorMap[color];
  };

  // 移動ハンドラー
  const handleMove = (direction: Direction) => {
    if (onMove) {
      onMove(color, direction);
    }
  };

  return (
    <div
      role="button"
      tabIndex={isActive ? 0 : -1}
      className={`
        rounded-full shadow-lg
        transform transition-colors
        ${getColorStyle()}
        ${isActive ? 'hover:scale-105' : ''}
        ${isSelected ? 'ring-4 ring-white ring-opacity-50' : ''}
      `}
      style={getPositionStyle()}
      onClick={onClick}
    >
      <div className="absolute inset-0 flex items-center justify-center">
        <div className="w-2/3 h-2/3 rounded-full bg-white bg-opacity-30" />
      </div>

      {/* 移動矢印（選択されているときのみ表示） */}
      {isActive && isSelected && (
        <div className="absolute inset-0">
          {[
            { dir: 'up' as Direction, pos: 'top' as const },
            { dir: 'right' as Direction, pos: 'right' as const },
            { dir: 'down' as Direction, pos: 'bottom' as const },
            { dir: 'left' as Direction, pos: 'left' as const },
          ].map(({ dir, pos }) => (
            <DirectionArrow
              key={dir}
              direction={dir}
              position={pos}
              onClick={() => handleMove(dir)}
            />
          ))}
        </div>
      )}
    </div>
  );
};

export default Robot;

================
File: src/components/GameInfo.tsx
================
import { FC } from 'react';
import { Card } from '../types/game';
import { SYMBOL_MAP } from '../utils/constants';

import { Player } from '../types/player'; // Player 型をインポート

interface GameInfoProps {
  scores: Record<string, number>; // score を scores に変更し、型を Record<string, number> に
  players: Record<string, Player>; // players プロパティを追加
  moveCount: number;
  declaredMoves: number;
  timer: number;
  isDeclarationPhase: boolean;
  currentCard?: Card;
  remainingCards: number;
  onDrawCard: () => void;
  phase: 'waiting' | 'declaration' | 'playing' | 'completed' | 'finished' | 'solution'; // 'solution' を追加
}

const GameInfo: FC<GameInfoProps> = ({
  scores, // score を scores に変更
  players, // players を追加
  moveCount,
  declaredMoves,
  timer,
  isDeclarationPhase,
  currentCard,
  remainingCards,
  onDrawCard,
  phase,
}) => {
  return (
    <div className="flex flex-col h-full">
      {/* スコアと手数の表示 */}
      <div className="mb-8">
        {/* スコア (マルチプレイヤー対応) */}
        <div className="relative mb-6">
          <div className="text-sm text-gray-500 mb-2">スコア</div>
          <ul className="space-y-1">
            {Object.entries(players).map(([playerId, player]) => (
              <li key={playerId} className="flex justify-between items-center text-lg">
                <span className="font-medium">{player.name}</span>
                <span className="font-bold text-blue-600">{scores[playerId] ?? 0}</span>
              </li>
            ))}
          </ul>
        </div>

        {/* 手数 */}
        <div className="relative mb-4">
          <div className="text-sm text-gray-500 mb-1">手数</div>
          <div className="text-xl">
            <span className="font-bold">{moveCount}</span>
            {declaredMoves > 0 && (
              <span className="text-gray-600"> / {declaredMoves}</span>
            )}
          </div>
        </div>

        {/* タイマー */}
        {timer > 0 && isDeclarationPhase && (
          <div className="relative">
            <div className="text-sm text-gray-500 mb-1">残り時間</div>
            <div className="text-xl font-bold text-orange-500">{timer}s</div>
            <div className="w-full bg-gray-200 h-2 mt-2 rounded-full overflow-hidden">
              <div
                className="bg-orange-500 h-full transition-all duration-1000"
                style={{ width: `${(timer / 60) * 100}%` }}
              />
            </div>
          </div>
        )}
      </div>

      {/* 現在のターゲット表示 */}
      {currentCard && (
        <div className="mb-8">
          <div className="text-sm text-gray-500 mb-2">現在の目標</div>
          <div className="bg-white shadow-lg rounded-lg p-4 flex items-center justify-center">
            <div className={`
              w-14 h-14 rounded-md 
              ${currentCard.color === 'colors' 
                ? 'bg-gradient-to-r from-purple-500 via-pink-500 to-red-500' 
                : `bg-${currentCard.color}-500`
              }
              flex items-center justify-center
            `}>
              <span className="text-6xl text-white font-bold">
                {SYMBOL_MAP[currentCard.symbol]}
              </span>
            </div>
          </div>
        </div>
      )}

      {/* カードをめくるボタン */}
      <div className="mt-auto">
        <button
          className={`
            w-full py-3 px-6 rounded-lg font-bold text-white
            transition-all duration-200
            ${(phase === 'waiting' || phase === 'completed')
              ? 'bg-blue-500 hover:bg-blue-600'
              : 'bg-gray-400 cursor-not-allowed'
            }
          `}
          onClick={onDrawCard}
          disabled={phase !== 'waiting' && phase !== 'completed'}
        >
          カードをめくる
          <span className="text-sm ml-2">
            ({remainingCards} 枚)
          </span>
        </button>
      </div>
    </div>
  );
};

export default GameInfo;

================
File: src/components/GameResultDisplay.tsx
================
import React, { FC } from 'react';
import useGameStore from '../stores/gameStore';
import { Player } from '../types/player'; // Player型をインポート

interface GameResultDisplayProps {
  players: Player[]; // ルーム内の全プレイヤー情報
  onLeaveRoom: () => void; // 退室処理用コールバック
}

const GameResultDisplay: FC<GameResultDisplayProps> = ({ players, onLeaveRoom }) => {
  const { game } = useGameStore();

  if (!game || game.phase !== 'finished' || !game.rankings) {
    return null; // ゲーム終了フェーズでない、またはランキング情報がない場合は何も表示しない
  }

  // ランキング情報にプレイヤー名を付与
  const rankedPlayers = game.rankings
    .map(rankInfo => {
      const player = players.find(p => p.id === rankInfo.playerId);
      return {
        ...rankInfo,
        name: player?.name || '不明なプレイヤー',
      };
    })
    .sort((a, b) => a.rank - b.rank); // ランク順にソート

  return (
    <div className="bg-white rounded-lg shadow p-4 text-center">
      <h2 className="text-2xl font-bold mb-4 text-indigo-600">ゲーム終了！</h2>

      <div className="space-y-3 my-6">
        {rankedPlayers.map((player, index) => (
          <div
            key={player.playerId}
            className={`flex justify-between items-center p-3 rounded-lg ${
              index === 0 ? 'bg-yellow-100 border border-yellow-300' : 'bg-gray-50'
            }`}
          >
            <div className="flex items-center">
              <span className="font-bold text-lg w-8 text-left">
                {player.rank}位
              </span>
              <span className="ml-3 text-gray-800">{player.name}</span>
            </div>
            <span className="font-semibold text-indigo-700">{player.score}pt</span>
          </div>
        ))}
      </div>

      <button
        className="btn btn-secondary mt-6 w-full sm:w-auto"
        onClick={onLeaveRoom}
      >
        ルームを出る
      </button>
    </div>
  );
};

export default GameResultDisplay;

================
File: package.json
================
{
  "name": "ricochet_robots",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite --host",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview --host"
  },
  "dependencies": {
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-router-dom": "^6.22.3",
    "zustand": "^5.0.3"
  },
  "devDependencies": {
    "@eslint/js": "^9.21.0",
    "@types/node": "^22.13.8",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@types/react-router-dom": "^5.3.3",
    "@vitejs/plugin-react": "^4.3.4",
    "autoprefixer": "^10.4.17",
    "eslint": "^9.21.0",
    "eslint-plugin-react-hooks": "^5.1.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^15.15.0",
    "postcss": "^8.4.35",
    "socket.io-client": "^4.8.1",
    "tailwindcss": "^3.4.1",
    "typescript": "~5.7.2",
    "typescript-eslint": "^8.24.1",
    "vite": "^6.2.0"
  }
}

================
File: src/components/room/RoomList.tsx
================
import React, { useState } from 'react';
import useGameStore from '../../stores/gameStore';
import { RoomSummary } from '../../types/room';

interface RoomListProps {
  rooms: RoomSummary[];
  // onJoinSuccess は不要になったため削除
}

const RoomList: React.FC<RoomListProps> = ({ rooms }) => {
  const [selectedRoom, setSelectedRoom] = useState<RoomSummary | null>(null);
  const [password, setPassword] = useState('');
  // この行は重複しているので削除
  const { joinRoom, connectionError: storeConnectionError } = useGameStore();
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null); // error state を追加

  const handleJoinRoom = (e: React.FormEvent) => { // async を削除
    e.preventDefault();
    if (!selectedRoom || isLoading) return;

    setError(null);
    if (selectedRoom.hasPassword && !password.trim()) {
      setError('パスワードを入力してください');
      return;
    }

    setIsLoading(true); // ローディング開始
    joinRoom(selectedRoom.id, password); // joinRoom を呼び出す (void)

    // joinRoom は非同期だが、ここでは完了を待たない
    // 実際の成功/失敗は gameStore のイベントハンドラで処理される
    // UIフィードバックのためにすぐにローディングを解除する（またはタイムアウトを設定する）
    // ここでは一旦すぐに解除する例
    // TODO: サーバーからの応答がない場合に備え、タイムアウトで isLoading を解除する方が親切かもしれない
    setTimeout(() => setIsLoading(false), 2000); // 例: 2秒後にローディング解除
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'waiting':
        return '待機中';
      case 'declaration':
        return '宣言フェーズ';
      case 'playing':
        return '解答フェーズ';
      case 'completed':
        return '終了';
      default:
        return status;
    }
  };

  if (rooms.length === 0) {
    return (
      <div className="text-center text-gray-500 py-8">
        利用可能なルームがありません
      </div>
    );
  }

  return (
    <div className="space-y-4">
      <div className="grid gap-4 grid-cols-1">
        {rooms.map((room) => (
          <div
            key={room.id}
            className={`p-4 rounded-lg border ${
              selectedRoom?.id === room.id
                ? 'border-indigo-500 bg-indigo-50'
                : 'border-gray-200 hover:border-indigo-300'
            } cursor-pointer transition-colors`}
            onClick={() => {
              setSelectedRoom(room);
              if (!room.hasPassword) {
                setPassword('');
              }
            }}
          >
            <div className="flex justify-between items-center">
              <div>
                <h3 className="text-lg font-medium">{room.name}</h3>
                <div className="text-sm text-gray-500">
                  プレイヤー: {room.playerCount}/{room.maxPlayers}
                </div>
                <div className="text-sm text-gray-500">
                  状態: {getStatusText(room.status)}
                </div>
              </div>
              {room.hasPassword && (
                <div className="text-gray-400">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-5 w-5"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                  >
                    <path
                      fillRule="evenodd"
                      d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z"
                      clipRule="evenodd"
                    />
                  </svg>
                </div>
              )}
            </div>
          </div>
        ))}
      </div>

      {selectedRoom && (
        <form onSubmit={handleJoinRoom} className="space-y-4 mt-6">
          {selectedRoom.hasPassword && (
            <div>
              <label htmlFor="roomPassword" className="block text-sm font-medium text-gray-700">
                パスワード
              </label>
              <input
                type="password"
                id="roomPassword"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                placeholder="パスワードを入力"
              />
            </div>
          )}

          {/* ローカルエラーまたはストアのエラーを表示 */}
          {(error || storeConnectionError) && (
            <div className="text-red-600 text-sm">
              {error || storeConnectionError}
            </div>
          )}

          <button
            type="submit"
            className={`w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white ${
              isLoading
                ? 'bg-indigo-400 cursor-not-allowed'
                : 'bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500'
            }`}
            disabled={isLoading} // ローディング中は無効化
          >
            {isLoading ? (
              <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
            ) : (
              'ルームに参加'
            )}
          </button>
        </form>
      )}
    </div>
  );
};

export default RoomList;

================
File: src/components/DeclarationCard.tsx
================
import { FC, useState } from 'react';

interface DeclarationCardProps {
  number: number;
  isSelected: boolean;
  isDisabled: boolean;
  onClick: (num: number) => void;
}

const DeclarationCard: FC<DeclarationCardProps> = ({
  number,
  isSelected,
  isDisabled,
  onClick,
}) => {
  return (
    <button
      className={`
        w-16 h-24 rounded-lg border-2 flex flex-col items-center justify-center
        transition-all duration-200 transform hover:scale-105
        ${isSelected ? 'border-blue-500 bg-blue-100' : 'border-gray-300 bg-white'}
        ${isDisabled ? 'opacity-50 cursor-not-allowed hover:scale-100' : 'hover:border-blue-300'}
      `}
      onClick={() => !isDisabled && onClick(number)}
      disabled={isDisabled}
    >
      <span className="text-2xl font-bold">{number}</span>
      {isSelected && (
        <span className="text-xs text-blue-600 mt-1">Selected</span>
      )}
    </button>
  );
};

// 矢印SVGコンポーネント
const ChevronLeft: FC = () => (
  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
  </svg>
);

const ChevronRight: FC = () => (
  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
  </svg>
);

// 宣言カード一覧コンポーネント
interface DeclarationCardListProps {
  selectedNumber: number | null; // null を許容するように変更
  maxNumber: number;
  onSelect: (num: number) => void;
  isDisabled?: boolean; // リスト全体を無効化するプロパティを追加
  className?: string;
}

export const DeclarationCardList: FC<DeclarationCardListProps> = ({
  selectedNumber,
  maxNumber,
  onSelect,
  isDisabled = false, // デフォルトは false
  className = '',
}) => {
  const [startIndex, setStartIndex] = useState(0);
  const visibleCount = 5;
  const totalNumbers = 99;

  const handlePrevClick = () => {
    setStartIndex(Math.max(0, startIndex - 1));
  };

  const handleNextClick = () => {
    setStartIndex(Math.min(totalNumbers - visibleCount, startIndex + 1));
  };

  return (
    <div className={`flex items-center justify-center space-x-4 p-4 ${className}`}>
      {/* 左矢印 */}
      <button
        className={`p-2 rounded-full ${
          startIndex === 0 || isDisabled // isDisabled が true の場合も無効化
            ? 'text-gray-300 cursor-not-allowed'
            : 'text-gray-600 hover:bg-gray-100'
        }`}
        onClick={handlePrevClick}
        disabled={startIndex === 0 || isDisabled} // isDisabled が true の場合も無効化
      >
        <ChevronLeft />
      </button>

      {/* カード表示エリア */}
      <div className="flex space-x-4">
        {Array.from({ length: visibleCount }, (_, i) => {
          const number = startIndex + i + 1;
          if (number > totalNumbers) return null;
          return (
            <DeclarationCard
              key={number}
              number={number}
              isSelected={selectedNumber === number}
              isDisabled={
                // 親から渡された isDisabled が true の場合、または
                // selectedNumber があり、現在の number がそれより大きい場合
                (selectedNumber !== null && number > selectedNumber)
              }
              onClick={onSelect}
            />
          );
        })}
      </div>

      {/* 右矢印 */}
      <button
        className={`p-2 rounded-full ${
          startIndex >= totalNumbers - visibleCount || isDisabled // isDisabled が true の場合も無効化
            ? 'text-gray-300 cursor-not-allowed'
            : 'text-gray-600 hover:bg-gray-100'
        }`}
        onClick={handleNextClick}
        disabled={startIndex >= totalNumbers - visibleCount || isDisabled} // isDisabled が true の場合も無効化
      >
        <ChevronRight />
      </button>
    </div>
  );
};

================
File: src/pages/JoinRoomPage.tsx
================
import React, { useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import RoomList from '../components/room/RoomList';
import useGameStore from '../stores/gameStore';

const JoinRoomPage: React.FC = () => {
  const navigate = useNavigate();
  const {
    connect,
    isConnected,
    isConnecting,
    connectionError,
    currentRoom,
    availableRooms,
    registerPlayer, // registerPlayer を取得
    currentPlayer, // currentPlayer を取得
    socketId, // socketId を取得
  } = useGameStore();

  useEffect(() => {
    if (!isConnected && !isConnecting) {
      connect();
    }
  }, [isConnected, isConnecting, connect]);

  // 接続成功後、プレイヤーが未登録なら登録する
  useEffect(() => {
    // socketId もチェック条件に追加
    if (isConnected && socketId && !currentPlayer && !isConnecting) {
      // 仮のプレイヤー名。本来はユーザー入力などから取得
      const playerName = `Player_${Math.random().toString(36).substring(2, 7)}`;
      console.log(`[JoinRoomPage] Registering player: ${playerName} for socket ${socketId}`); // ログ更新
      registerPlayer(playerName);
    }
    // socketId を依存配列に追加
  }, [isConnected, socketId, currentPlayer, registerPlayer, isConnecting]);


  useEffect(() => {
    if (currentRoom) {
      navigate(`/game/${currentRoom.id}`);
    }
  }, [currentRoom, navigate]);

  // handleJoinSuccess は不要になったため削除
  return (
    <div className="min-h-screen bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-3xl mx-auto">
        <div className="text-center mb-8">
          <h2 className="text-3xl font-extrabold text-gray-900">
            ルームに参加
          </h2>
          <p className="mt-2 text-sm text-gray-600">
            参加したいルームを選択してください
          </p>
        </div>

        {connectionError && (
          <div className="mb-4 p-4 rounded-md bg-red-50">
            <div className="text-sm text-red-700">
              接続エラー: {connectionError}
            </div>
          </div>
        )}

        {isConnecting || !currentPlayer ? ( // currentPlayer が存在しない場合もローディング表示
          <div className="text-center text-gray-600 py-8">
            {isConnecting ? 'サーバーに接続中...' : 'プレイヤー情報を取得中...'}
          </div>
        ) : (
          <div className="bg-white shadow sm:rounded-lg p-6">
            <RoomList
              rooms={availableRooms}
            />
          </div>
        )}

        <div className="mt-4 text-center">
          <button
            onClick={() => navigate('/online')}
            className="text-sm text-indigo-600 hover:text-indigo-500"
          >
            オンラインメニューに戻る
          </button>
        </div>
      </div>
    </div>
  );
};

export default JoinRoomPage;

================
File: project_desc/roadmap.md
================
# Ricochet Robots - マルチプレイヤーモード開発ロードマップ

## Phase 1: 基本機能実装 (2週間) ✅

### Week 1: 通信基盤の構築
1. バックエンド開発 [@backend-engineer]
   - [x] Socket.IOサーバーのセットアップ
   - [x] ルーム管理の基本機能実装
   - [x] イベントハンドラーの設計と実装
   - [x] 接続管理システムの実装

2. フロントエンド通信機能 [@frontend-engineer]
   - [x] Socket.IOクライアントの統合
   - [x] 通信状態管理の実装
   - [x] 再接続ロジックの実装

### Week 2: ルーム管理システム
1. バックエンド実装 [@backend-engineer]
   - [x] ルームの作成・削除ロジック
   - [x] プレイヤー参加・退出の処理
   - [x] ルーム状態の管理機能
   - [x] パスワード認証システム

2. フロントエンドUI [@frontend-engineer]
   - [x] ルーム作成画面の実装
   - [x] ルーム一覧表示の実装
   - [x] ルーム参加フローの実装
   - [x] エラーハンドリングUI

## Phase 2: ゲームロジック実装 (3週間)

### Week 3: マルチプレイヤー同期 ✅
1. バックエンド実装 [@backend-engineer]
   - [x] ゲーム状態の同期システム
   - [x] プレイヤーターン管理
   - [x] ボードとカードの状態同期
   - [x] ロボット移動の同期処理

2. フロントエンド実装 [@frontend-engineer]
   - [x] マルチプレイヤー用のGameState管理
   - [x] プレイヤー情報表示
   - [x] 同期状態のUI表示
   - [x] ターン管理のUI実装

### Week 4: 宣言システム ✅
1. バックエンド実装 [@backend-engineer]
   - [x] 宣言フェーズの状態管理
   - [x] 宣言の収集と判定ロジック
   - [x] タイマー管理システム
   - [x] 権利移行システム

2. フロントエンド実装 [@frontend-engineer]
   - [x] 宣言UI の改修
   - [x] タイマーの表示
   - [x] 他プレイヤーの宣言表示
   - [x] 解法提示権利の管理UI

### Week 5: スコアリング ✅
1. バックエンド実装 [@backend-engineer]
   - [x] スコア計算システム
   - [x] ランキング管理
   - [x] ゲーム終了判定

2. フロントエンド実装 [@frontend-engineer]
   - [x] スコアボードUI
   - [x] ランキング表示
   - [x] 結果画面の実装
   - [x] 統計情報の表示

## Phase 3: UI/UX改善 (2週間)

### Week 6: パフォーマンス最適化
1. バックエンド最適化 [@backend-engineer]
   - [ ] イベント送信の最適化
   - [ ] 状態更新の効率化
   - [ ] メモリ使用量の最適化
   - [ ] エラーハンドリングの強化

2. フロントエンド最適化 [@frontend-engineer]
   - [ ] レンダリングパフォーマンスの改善
   - [ ] アニメーションの最適化
   - [ ] 状態管理の効率化
   - [ ] ネットワーク遅延への対応

### Week 7: UX改善
1. UI/UX設計 [@uiux-designer]
   - [ ] ユーザーフィードバックの分析
   - [ ] UI フローの改善
   - [ ] アクセシビリティの向上
   - [ ] ローディング状態の改善

2. フロントエンド実装 [@frontend-engineer]
   - [ ] 改善されたUIの実装
   - [ ] トランジションの追加
   - [ ] フィードバック機能の強化
   - [ ] エラー表示の改善

## Phase 4: 追加機能 (2週間)

### Week 8: 拡張機能
1. チャット機能 [@backend-engineer, @frontend-engineer]
   - [ ] チャットサーバーの実装
   - [ ] チャットUIの実装
   - [ ] メッセージ履歴管理
   - [ ] 絵文字サポート

2. 観戦モード [@backend-engineer, @frontend-engineer]
   - [ ] 観戦者管理システム
   - [ ] 観戦UI の実装
   - [ ] 状態同期の最適化
   - [ ] 観戦者チャット

### Week 9: 最終調整
1. リプレイ機能 [@backend-engineer, @frontend-engineer]
   - [ ] 手順記録システム
   - [ ] リプレイ再生機能
   - [ ] リプレイ保存・共有
   - [ ] リプレイ分析ツール

2. 最終テストとデプロイ [@qa-engineer]
   - [ ] 結合テストの実施
   - [ ] パフォーマンステスト
   - [ ] セキュリティテスト
   - [ ] デプロイ手順の確認

## マイルストーン

1. Alpha Release (Week 3 終了時)
   - 基本的なルーム管理
   - 簡単なマルチプレイヤーゲーム

2. Beta Release (Week 5 終了時)
   - 完全なゲームロジック
   - スコアリングシステム
   - 基本的なUI

3. Release Candidate (Week 7 終了時)
   - 最適化された通信
   - 改善されたUI/UX
   - バグ修正

4. Final Release (Week 9 終了時)
   - すべての機能を実装
   - 完全なテスト
   - 本番環境への準備完了

## 優先順位とリスク管理

### 高優先度
- 安定した通信基盤の構築
- 正確なゲーム状態の同期
- スムーズな宣言システム

### リスク
1. 通信の遅延や不安定性
   - 対策: フォールバック機能の実装
   - 対策: 状態の整合性チェック

2. 同時アクセスによる競合
   - 対策: 厳密な状態管理
   - 対策: 楽観的ロック

3. スケジュールの遅延
   - 対策: 優先度に基づく機能の段階的リリース
   - 対策: 週次での進捗確認と調整

================
File: src/components/room/CreateRoomForm.tsx
================
import React, { useState } from 'react';
import useGameStore from '../../stores/gameStore';
import { Room } from '../../types/room'; // Room型をインポート

interface CreateRoomFormProps {
  onSuccess?: (room: Room) => void; // 引数に Room を追加
}

const CreateRoomForm: React.FC<CreateRoomFormProps> = ({ onSuccess }) => {
  const [name, setName] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false); // ローディング状態を追加
  // currentPlayer を取得
  const { createRoom, connectionError, currentPlayer } = useGameStore();

  const handleSubmit = async (e: React.FormEvent) => { // async に変更
    e.preventDefault();
    // currentPlayer が存在しない場合も処理しない
    if (isLoading) return; // ローディング中は処理しない

    setError(null);
    setIsLoading(true); // ローディング開始

    if (!name.trim()) {
      setError('ルーム名を入力してください');
      setIsLoading(false); // ローディング終了
      return;
    }

    try {
      const createdRoom = await createRoom({ // await を追加し、戻り値を受け取る
        name: name.trim(),
        password: password.trim() || undefined,
      });
      // 成功した場合、作成された Room オブジェクトを onSuccess に渡す
      if (onSuccess) {
        onSuccess(createdRoom); // createdRoom を引数として渡す
      }
    } catch (err) {
      // エラーは gameStore でセットされるので、ここではローディング解除のみ
      console.error("Room creation failed in form:", err);
    } finally {
      setIsLoading(false); // ローディング終了
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4 w-full max-w-md">
      <div>
        <label htmlFor="roomName" className="block text-sm font-medium text-gray-700">
          ルーム名
        </label>
        <input
          type="text"
          id="roomName"
          value={name}
          onChange={(e) => setName(e.target.value)}
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
          placeholder="ルーム名を入力"
          maxLength={20}
        />
      </div>

      <div>
        <label htmlFor="password" className="block text-sm font-medium text-gray-700">
          パスワード（オプション）
        </label>
        <input
          type="password"
          id="password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
          placeholder="パスワードを入力"
          maxLength={20}
        />
      </div>

      {(error || connectionError) && (
        <div className="text-red-600 text-sm">
          {error || connectionError}
        </div>
      )}

      <button
        type="submit"
        // isLoading または currentPlayer が null の場合に無効化
        disabled={isLoading || !currentPlayer}
        className={`w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 ${
          (isLoading || !currentPlayer)
            ? 'bg-indigo-400 cursor-not-allowed' // ローディング中または未登録時のスタイル
            : 'bg-indigo-600 hover:bg-indigo-700' // 通常時のスタイル
        }`}
      >
        {/* currentPlayer が null の場合は登録中と表示 */}
        {isLoading ? '作成中...' : !currentPlayer ? 'プレイヤー情報登録中...' : 'ルームを作成'}
      </button>
    </form>
  );
};

export default CreateRoomForm;

================
File: src/pages/CreateRoomPage.tsx
================
import React, { useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import CreateRoomForm from '../components/room/CreateRoomForm';
import useGameStore from '../stores/gameStore';
import { Room } from '../types/room'; // Room型をインポート

const CreateRoomPage: React.FC = () => {
  const navigate = useNavigate();
  const { 
    connect,
    isConnected,
    isConnecting,
    connectionError,
    currentRoom,
    registerPlayer, // registerPlayer を取得
    currentPlayer, // currentPlayer を取得
    socketId, // socketId を取得
  } = useGameStore();

  useEffect(() => {
    if (!isConnected && !isConnecting) {
      connect();
    }
  }, [isConnected, isConnecting, connect]);

  // 接続成功後、プレイヤーが未登録なら登録する
  useEffect(() => {
    // socketId もチェック条件に追加
    if (isConnected && socketId && !currentPlayer && !isConnecting) {
      // 仮のプレイヤー名。本来はユーザー入力などから取得
      const playerName = `Player_${Math.random().toString(36).substring(2, 7)}`;
      console.log(`[CreateRoomPage] Registering player: ${playerName} for socket ${socketId}`); // ログ更新
      registerPlayer(playerName);
    }
    // socketId を依存配列に追加
  }, [isConnected, socketId, currentPlayer, registerPlayer, isConnecting]);

  // useEffect フックは削除

  const handleCreateSuccess = (room: Room) => { // 引数に room: Room を追加
    console.log('[CreateRoomPage] handleCreateSuccess received room:', room); // ★ ログ追加
    // ルーム作成に成功した場合、受け取った room の ID を使ってリダイレクト
    if (room && room.id) { // ★ room と room.id の存在を確認
      navigate(`/game/${room.id}`);
    } else {
      console.error('[CreateRoomPage] Received room object is invalid or missing ID:', room); // ★ エラーログ追加
      // TODO: エラー処理 (例: エラーメッセージを表示)
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md mx-auto">
        <div className="text-center mb-8">
          <h2 className="text-3xl font-extrabold text-gray-900">
            ルームを作成
          </h2>
          <p className="mt-2 text-sm text-gray-600">
            新しいゲームルームを作成して、他のプレイヤーを招待しましょう
          </p>
        </div>

        {connectionError && (
          <div className="mb-4 p-4 rounded-md bg-red-50">
            <div className="text-sm text-red-700">
              接続エラー: {connectionError}
            </div>
          </div>
        )}

        {isConnecting && ( // 接続中表示
          <div className="text-center text-gray-600">
            接続中...
          </div>
        )}
        {!isConnecting && !currentPlayer && ( // プレイヤー登録待ち表示
          <div className="text-center text-gray-600">
            プレイヤー情報を登録中...
          </div>
        )}
        {!isConnecting && currentPlayer && ( // 接続完了かつプレイヤー登録済みの場合のみフォーム表示
          <CreateRoomForm onSuccess={handleCreateSuccess} />
        )}

        <div className="mt-4 text-center">
          <button
            onClick={() => navigate('/online')}
            className="text-sm text-indigo-600 hover:text-indigo-500"
          >
            オンラインメニューに戻る
          </button>
        </div>
      </div>
    </div>
  );
};

export default CreateRoomPage;

================
File: src/types/game.ts
================
import { TargetSymbol } from './board';
import { Player } from './player'; // Import Player type

// ボードの位置を表す型
export type Position = {
  x: number;
  y: number;
};

// ロボットの色を表す型
export type RobotColor = 'red' | 'blue' | 'yellow' | 'green';

// ゲームモードを表す型
export type GameMode = 'single' | 'multi';

// ロボットを表す型
export type Robot = {
  color: RobotColor;
  position: Position;
  initialPosition?: Position;
};

// セルの反射板を表す型
export type Reflector = {
  color: RobotColor;
  direction: '／' | '＼';
};

// セルの種類を表す型
export type CellType = 
  | 'empty'           // 通常の空きマス
  | 'wall-top'        // 上壁
  | 'wall-right'      // 右壁
  | 'wall-bottom'     // 下壁
  | 'wall-left'       // 左壁
  | 'corner-tl'       // 左上コーナー
  | 'corner-tr'       // 右上コーナー
  | 'corner-br'       // 右下コーナー
  | 'corner-bl'       // 左下コーナー
  | 'target';         // 目標地点

// セルを表す型
export type Cell = {
  type: CellType;
  walls: {
    top: boolean;
    right: boolean;
    bottom: boolean;
    left: boolean;
  };
  isTarget?: boolean;
  targetColor?: RobotColor | 'colors';
  targetSymbol?: string;
  reflector?: Reflector;
};

// ボードを表す型
export type Board = {
  cells: Cell[][];
  robots: Robot[];
  size: number;
};

// カードを表す型
export type Card = {
  color: RobotColor | 'colors';
  symbol: TargetSymbol;
  position: Position;
};

// ゲームの状態を表す型 (サーバー側の server/src/types/game.ts と一致させる)
export type GamePhase =
  | 'waiting'       // 待機中
  | 'declaration'   // 宣言フェーズ
  | 'solution'      // 解法提示フェーズ
  // | 'completed'     // サーバー側に存在しないため削除
  | 'finished';     // ゲーム終了

// シングルプレイヤーの状態を表す型
export type SinglePlayerState = {
  moveCount: number;           // 現在の手数
  score: number;              // スコア
  completedCards: number;      // クリアしたカード数
  declaredMoves: number;      // 宣言した手数
  maxDeclaredMoves: number;   // 宣言可能な最大手数
  timer: number;              // 宣言フェーズの残り時間（秒）
  isDeclarationPhase: boolean; // 宣言フェーズ中か
};

// ゲームの状態を表す型
export type GameState = {
  board: Board;
  currentCard?: Card;
  phase: GamePhase;
  moveHistory: Position[];
  singlePlayer: SinglePlayerState;
};

// 移動の方向を表す型
export type Direction = 'up' | 'right' | 'down' | 'left';

// --- Multiplayer Game State (Matches server/src/types/game.ts using Record) ---
export interface Declaration { // Already defined in server/src/types/game.ts, ensure consistency if needed
  playerId: string;
  moves: number;
  timestamp: number;
}

export interface PlayerGameState { // Already defined in server/src/types/game.ts, ensure consistency if needed
  score: number;
  declarations: Declaration[]; // Assuming this remains an array on the server for player state
  isReady: boolean;
}

export interface MultiplayerGameState {
  phase: GamePhase;
  currentCard?: Card; // Make optional to match server
  remainingCards: number;
  totalCards: number;
  declarations: Record<string, Declaration>; // Use Record
  currentPlayer?: string; // Make optional to match server
  playerStates: Record<string, PlayerGameState>; // Use Record
  timer: number;
  timerStartedAt: number;
  declarationOrder?: string[];
  robotPositions: Record<RobotColor, Position>; // Use Record
  boardPatternIds: string[]; // Add board pattern IDs received from server
  moveHistory: {
    robotColor: RobotColor;
    positions: Position[];
    timestamp: number;
  }[];
  rankings?: { playerId: string; score: number; rank: number }[];
  // Add winner property if needed based on server type
  winner?: Player | null; // Assuming Player type exists or needs to be imported/defined
}

// Assuming Player type needs to be defined or imported for 'winner'
// If Player type is defined elsewhere (e.g., src/types/player.ts), import it.
// Otherwise, define a basic Player interface here for type checking.
// Example:
// export interface Player {
//   id: string;
//   name: string;
//   // other properties...
// }
// Make sure to import Player if defined elsewhere: import { Player } from './player';

================
File: server/coverage/coverage-final.json
================
{"/home/kunon/apps/ricochet_robots/server/src/services/cardDeck.ts": {"path":"/home/kunon/apps/ricochet_robots/server/src/services/cardDeck.ts","statementMap":{"0":{"start":{"line":1,"column":0},"end":{"line":1,"column":73}},"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":71}},"2":{"start":{"line":15,"column":4},"end":{"line":15,"column":43}},"3":{"start":{"line":16,"column":4},"end":{"line":16,"column":38}},"4":{"start":{"line":17,"column":4},"end":{"line":17,"column":26}},"5":{"start":{"line":18,"column":4},"end":{"line":18,"column":19}},"6":{"start":{"line":19,"column":4},"end":{"line":19,"column":73}},"7":{"start":{"line":23,"column":32},"end":{"line":23,"column":34}},"8":{"start":{"line":26,"column":4},"end":{"line":36,"column":7}},"9":{"start":{"line":27,"column":6},"end":{"line":35,"column":9}},"10":{"start":{"line":27,"column":31},"end":{"line":27,"column":61}},"11":{"start":{"line":29,"column":26},"end":{"line":29,"column":46}},"12":{"start":{"line":30,"column":8},"end":{"line":34,"column":9}},"13":{"start":{"line":31,"column":12},"end":{"line":31,"column":42}},"14":{"start":{"line":33,"column":12},"end":{"line":33,"column":98}},"15":{"start":{"line":39,"column":22},"end":{"line":39,"column":51}},"16":{"start":{"line":40,"column":4},"end":{"line":47,"column":5}},"17":{"start":{"line":41,"column":8},"end":{"line":44,"column":11}},"18":{"start":{"line":46,"column":8},"end":{"line":46,"column":101}},"19":{"start":{"line":50,"column":4},"end":{"line":50,"column":57}},"20":{"start":{"line":51,"column":4},"end":{"line":51,"column":17}},"21":{"start":{"line":55,"column":22},"end":{"line":55,"column":42}},"22":{"start":{"line":56,"column":21},"end":{"line":56,"column":56}},"23":{"start":{"line":57,"column":4},"end":{"line":60,"column":5}},"24":{"start":{"line":58,"column":8},"end":{"line":58,"column":73}},"25":{"start":{"line":59,"column":8},"end":{"line":59,"column":20}},"26":{"start":{"line":62,"column":4},"end":{"line":62,"column":20}},"27":{"start":{"line":67,"column":4},"end":{"line":70,"column":5}},"28":{"start":{"line":67,"column":17},"end":{"line":67,"column":38}},"29":{"start":{"line":68,"column":16},"end":{"line":68,"column":51}},"30":{"start":{"line":69,"column":6},"end":{"line":69,"column":70}},"31":{"start":{"line":74,"column":4},"end":{"line":77,"column":5}},"32":{"start":{"line":75,"column":6},"end":{"line":75,"column":53}},"33":{"start":{"line":76,"column":6},"end":{"line":76,"column":18}},"34":{"start":{"line":79,"column":21},"end":{"line":79,"column":52}},"35":{"start":{"line":80,"column":21},"end":{"line":80,"column":76}},"36":{"start":{"line":82,"column":4},"end":{"line":86,"column":5}},"37":{"start":{"line":83,"column":6},"end":{"line":83,"column":95}},"38":{"start":{"line":85,"column":6},"end":{"line":85,"column":29}},"39":{"start":{"line":91,"column":28},"end":{"line":95,"column":6}},"40":{"start":{"line":98,"column":4},"end":{"line":98,"column":86}},"41":{"start":{"line":100,"column":4},"end":{"line":100,"column":21}},"42":{"start":{"line":104,"column":4},"end":{"line":104,"column":49}},"43":{"start":{"line":108,"column":4},"end":{"line":108,"column":29}},"44":{"start":{"line":9,"column":0},"end":{"line":9,"column":13}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":14,"column":2},"end":{"line":14,"column":14}},"loc":{"start":{"line":14,"column":46},"end":{"line":20,"column":3}}},"1":{"name":"(anonymous_1)","decl":{"start":{"line":22,"column":10},"end":{"line":22,"column":23}},"loc":{"start":{"line":22,"column":23},"end":{"line":52,"column":3}}},"2":{"name":"(anonymous_2)","decl":{"start":{"line":26,"column":25},"end":{"line":26,"column":30}},"loc":{"start":{"line":26,"column":33},"end":{"line":36,"column":5}}},"3":{"name":"(anonymous_3)","decl":{"start":{"line":27,"column":21},"end":{"line":27,"column":27}},"loc":{"start":{"line":27,"column":31},"end":{"line":27,"column":61}}},"4":{"name":"(anonymous_4)","decl":{"start":{"line":27,"column":71},"end":{"line":27,"column":77}},"loc":{"start":{"line":27,"column":80},"end":{"line":35,"column":7}}},"5":{"name":"(anonymous_5)","decl":{"start":{"line":54,"column":10},"end":{"line":54,"column":27}},"loc":{"start":{"line":54,"column":74},"end":{"line":63,"column":3}}},"6":{"name":"(anonymous_6)","decl":{"start":{"line":66,"column":10},"end":{"line":66,"column":17}},"loc":{"start":{"line":66,"column":17},"end":{"line":71,"column":3}}},"7":{"name":"(anonymous_7)","decl":{"start":{"line":73,"column":2},"end":{"line":73,"column":10}},"loc":{"start":{"line":73,"column":10},"end":{"line":101,"column":3}}},"8":{"name":"(anonymous_8)","decl":{"start":{"line":103,"column":2},"end":{"line":103,"column":14}},"loc":{"start":{"line":103,"column":14},"end":{"line":105,"column":3}}},"9":{"name":"(anonymous_9)","decl":{"start":{"line":107,"column":2},"end":{"line":107,"column":15}},"loc":{"start":{"line":107,"column":15},"end":{"line":109,"column":3}}}},"branchMap":{"0":{"loc":{"start":{"line":30,"column":8},"end":{"line":34,"column":9}},"type":"if","locations":[{"start":{"line":30,"column":8},"end":{"line":34,"column":9}},{"start":{"line":32,"column":15},"end":{"line":34,"column":9}}]},"1":{"loc":{"start":{"line":40,"column":4},"end":{"line":47,"column":5}},"type":"if","locations":[{"start":{"line":40,"column":4},"end":{"line":47,"column":5}},{"start":{"line":45,"column":11},"end":{"line":47,"column":5}}]},"2":{"loc":{"start":{"line":57,"column":4},"end":{"line":60,"column":5}},"type":"if","locations":[{"start":{"line":57,"column":4},"end":{"line":60,"column":5}}]},"3":{"loc":{"start":{"line":74,"column":4},"end":{"line":77,"column":5}},"type":"if","locations":[{"start":{"line":74,"column":4},"end":{"line":77,"column":5}}]},"4":{"loc":{"start":{"line":82,"column":4},"end":{"line":86,"column":5}},"type":"if","locations":[{"start":{"line":82,"column":4},"end":{"line":86,"column":5}}]},"5":{"loc":{"start":{"line":93,"column":13},"end":{"line":93,"column":45}},"type":"binary-expr","locations":[{"start":{"line":93,"column":13},"end":{"line":93,"column":27}},{"start":{"line":93,"column":31},"end":{"line":93,"column":45}}]}},"s":{"0":2,"1":2,"2":36,"3":36,"4":36,"5":36,"6":36,"7":36,"8":36,"9":144,"10":720,"11":576,"12":576,"13":240,"14":336,"15":36,"16":36,"17":15,"18":21,"19":36,"20":36,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":36,"28":36,"29":240,"30":240,"31":17,"32":17,"33":17,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":54,"43":36,"44":2},"f":{"0":36,"1":36,"2":144,"3":720,"4":576,"5":0,"6":36,"7":17,"8":54,"9":36},"b":{"0":[240,336],"1":[15,21],"2":[0],"3":[17],"4":[0],"5":[0,0]}}
,"/home/kunon/apps/ricochet_robots/server/src/services/gameManager.ts": {"path":"/home/kunon/apps/ricochet_robots/server/src/services/gameManager.ts","statementMap":{"0":{"start":{"line":1,"column":0},"end":{"line":1,"column":38}},"1":{"start":{"line":2,"column":0},"end":{"line":2,"column":167}},"2":{"start":{"line":4,"column":0},"end":{"line":4,"column":38}},"3":{"start":{"line":10,"column":62},"end":{"line":15,"column":2}},"4":{"start":{"line":27,"column":4},"end":{"line":27,"column":12}},"5":{"start":{"line":28,"column":4},"end":{"line":28,"column":23}},"6":{"start":{"line":29,"column":4},"end":{"line":29,"column":27}},"7":{"start":{"line":30,"column":4},"end":{"line":30,"column":43}},"8":{"start":{"line":31,"column":4},"end":{"line":31,"column":50}},"9":{"start":{"line":32,"column":4},"end":{"line":32,"column":48}},"10":{"start":{"line":36,"column":58},"end":{"line":36,"column":60}},"11":{"start":{"line":37,"column":4},"end":{"line":43,"column":7}},"12":{"start":{"line":38,"column":6},"end":{"line":42,"column":8}},"13":{"start":{"line":45,"column":4},"end":{"line":57,"column":6}},"14":{"start":{"line":58,"column":4},"end":{"line":58,"column":82}},"15":{"start":{"line":64,"column":4},"end":{"line":64,"column":27}},"16":{"start":{"line":66,"column":4},"end":{"line":68,"column":5}},"17":{"start":{"line":67,"column":6},"end":{"line":67,"column":50}},"18":{"start":{"line":70,"column":4},"end":{"line":72,"column":5}},"19":{"start":{"line":71,"column":6},"end":{"line":71,"column":44}},"20":{"start":{"line":75,"column":4},"end":{"line":75,"column":67}},"21":{"start":{"line":78,"column":4},"end":{"line":78,"column":45}},"22":{"start":{"line":79,"column":4},"end":{"line":79,"column":43}},"23":{"start":{"line":80,"column":4},"end":{"line":80,"column":65}},"24":{"start":{"line":82,"column":4},"end":{"line":82,"column":55}},"25":{"start":{"line":83,"column":4},"end":{"line":83,"column":55}},"26":{"start":{"line":87,"column":4},"end":{"line":87,"column":19}},"27":{"start":{"line":88,"column":4},"end":{"line":88,"column":49}},"28":{"start":{"line":89,"column":4},"end":{"line":89,"column":37}},"29":{"start":{"line":90,"column":4},"end":{"line":90,"column":59}},"30":{"start":{"line":91,"column":4},"end":{"line":91,"column":47}},"31":{"start":{"line":95,"column":4},"end":{"line":95,"column":55}},"32":{"start":{"line":99,"column":4},"end":{"line":99,"column":19}},"33":{"start":{"line":101,"column":4},"end":{"line":103,"column":5}},"34":{"start":{"line":102,"column":6},"end":{"line":102,"column":13}},"35":{"start":{"line":105,"column":4},"end":{"line":105,"column":36}},"36":{"start":{"line":106,"column":4},"end":{"line":106,"column":47}},"37":{"start":{"line":108,"column":4},"end":{"line":126,"column":13}},"38":{"start":{"line":109,"column":26},"end":{"line":109,"column":36}},"39":{"start":{"line":110,"column":24},"end":{"line":110,"column":53}},"40":{"start":{"line":112,"column":22},"end":{"line":112,"column":66}},"41":{"start":{"line":113,"column":24},"end":{"line":113,"column":55}},"42":{"start":{"line":116,"column":27},"end":{"line":116,"column":61}},"43":{"start":{"line":117,"column":6},"end":{"line":120,"column":7}},"44":{"start":{"line":118,"column":8},"end":{"line":118,"column":41}},"45":{"start":{"line":119,"column":8},"end":{"line":119,"column":59}},"46":{"start":{"line":122,"column":6},"end":{"line":125,"column":7}},"47":{"start":{"line":123,"column":8},"end":{"line":123,"column":23}},"48":{"start":{"line":124,"column":8},"end":{"line":124,"column":19}},"49":{"start":{"line":133,"column":4},"end":{"line":137,"column":5}},"50":{"start":{"line":134,"column":6},"end":{"line":134,"column":108}},"51":{"start":{"line":136,"column":6},"end":{"line":136,"column":13}},"52":{"start":{"line":139,"column":17},"end":{"line":139,"column":41}},"53":{"start":{"line":140,"column":4},"end":{"line":144,"column":5}},"54":{"start":{"line":141,"column":6},"end":{"line":141,"column":74}},"55":{"start":{"line":142,"column":6},"end":{"line":142,"column":21}},"56":{"start":{"line":143,"column":6},"end":{"line":143,"column":13}},"57":{"start":{"line":146,"column":4},"end":{"line":146,"column":38}},"58":{"start":{"line":147,"column":4},"end":{"line":147,"column":65}},"59":{"start":{"line":149,"column":4},"end":{"line":149,"column":74}},"60":{"start":{"line":151,"column":4},"end":{"line":151,"column":33}},"61":{"start":{"line":156,"column":4},"end":{"line":158,"column":5}},"62":{"start":{"line":157,"column":6},"end":{"line":157,"column":50}},"63":{"start":{"line":160,"column":4},"end":{"line":162,"column":5}},"64":{"start":{"line":161,"column":6},"end":{"line":161,"column":97}},"65":{"start":{"line":164,"column":37},"end":{"line":168,"column":6}},"66":{"start":{"line":170,"column":4},"end":{"line":170,"column":56}},"67":{"start":{"line":171,"column":4},"end":{"line":171,"column":55}},"68":{"start":{"line":174,"column":4},"end":{"line":179,"column":5}},"69":{"start":{"line":175,"column":6},"end":{"line":175,"column":77}},"70":{"start":{"line":176,"column":6},"end":{"line":178,"column":42}},"71":{"start":{"line":177,"column":8},"end":{"line":177,"column":35}},"72":{"start":{"line":182,"column":4},"end":{"line":182,"column":19}},"73":{"start":{"line":185,"column":30},"end":{"line":185,"column":72}},"74":{"start":{"line":188,"column":4},"end":{"line":193,"column":7}},"75":{"start":{"line":189,"column":6},"end":{"line":191,"column":7}},"76":{"start":{"line":190,"column":8},"end":{"line":190,"column":33}},"77":{"start":{"line":192,"column":6},"end":{"line":192,"column":39}},"78":{"start":{"line":196,"column":4},"end":{"line":196,"column":77}},"79":{"start":{"line":196,"column":65},"end":{"line":196,"column":75}},"80":{"start":{"line":199,"column":4},"end":{"line":206,"column":5}},"81":{"start":{"line":201,"column":6},"end":{"line":201,"column":72}},"82":{"start":{"line":202,"column":6},"end":{"line":202,"column":32}},"83":{"start":{"line":205,"column":6},"end":{"line":205,"column":32}},"84":{"start":{"line":207,"column":4},"end":{"line":207,"column":55}},"85":{"start":{"line":211,"column":4},"end":{"line":211,"column":19}},"86":{"start":{"line":212,"column":4},"end":{"line":212,"column":46}},"87":{"start":{"line":213,"column":4},"end":{"line":213,"column":36}},"88":{"start":{"line":214,"column":4},"end":{"line":214,"column":56}},"89":{"start":{"line":215,"column":4},"end":{"line":215,"column":47}},"90":{"start":{"line":218,"column":4},"end":{"line":220,"column":37}},"91":{"start":{"line":219,"column":6},"end":{"line":219,"column":33}},"92":{"start":{"line":221,"column":4},"end":{"line":221,"column":55}},"93":{"start":{"line":225,"column":4},"end":{"line":227,"column":5}},"94":{"start":{"line":226,"column":6},"end":{"line":226,"column":47}},"95":{"start":{"line":229,"column":4},"end":{"line":231,"column":5}},"96":{"start":{"line":230,"column":6},"end":{"line":230,"column":39}},"97":{"start":{"line":233,"column":24},"end":{"line":233,"column":61}},"98":{"start":{"line":234,"column":4},"end":{"line":237,"column":5}},"99":{"start":{"line":236,"column":6},"end":{"line":236,"column":57}},"100":{"start":{"line":239,"column":4},"end":{"line":241,"column":5}},"101":{"start":{"line":240,"column":6},"end":{"line":240,"column":40}},"102":{"start":{"line":244,"column":4},"end":{"line":248,"column":7}},"103":{"start":{"line":250,"column":4},"end":{"line":250,"column":55}},"104":{"start":{"line":253,"column":4},"end":{"line":255,"column":5}},"105":{"start":{"line":254,"column":6},"end":{"line":254,"column":36}},"106":{"start":{"line":262,"column":4},"end":{"line":262,"column":17}},"107":{"start":{"line":266,"column":4},"end":{"line":266,"column":19}},"108":{"start":{"line":268,"column":26},"end":{"line":268,"column":54}},"109":{"start":{"line":269,"column":4},"end":{"line":274,"column":5}},"110":{"start":{"line":270,"column":26},"end":{"line":270,"column":68}},"111":{"start":{"line":271,"column":6},"end":{"line":273,"column":7}},"112":{"start":{"line":272,"column":8},"end":{"line":272,"column":54}},"113":{"start":{"line":277,"column":4},"end":{"line":277,"column":30}},"114":{"start":{"line":278,"column":4},"end":{"line":278,"column":55}},"115":{"start":{"line":282,"column":4},"end":{"line":282,"column":19}},"116":{"start":{"line":284,"column":28},"end":{"line":284,"column":56}},"117":{"start":{"line":285,"column":4},"end":{"line":289,"column":5}},"118":{"start":{"line":287,"column":6},"end":{"line":287,"column":32}},"119":{"start":{"line":288,"column":6},"end":{"line":288,"column":13}},"120":{"start":{"line":293,"column":4},"end":{"line":295,"column":5}},"121":{"start":{"line":294,"column":6},"end":{"line":294,"column":109}},"122":{"start":{"line":294,"column":85},"end":{"line":294,"column":107}},"123":{"start":{"line":298,"column":4},"end":{"line":305,"column":5}},"124":{"start":{"line":300,"column":6},"end":{"line":300,"column":72}},"125":{"start":{"line":301,"column":6},"end":{"line":301,"column":32}},"126":{"start":{"line":304,"column":6},"end":{"line":304,"column":32}},"127":{"start":{"line":306,"column":4},"end":{"line":306,"column":55}},"128":{"start":{"line":313,"column":21},"end":{"line":313,"column":45}},"129":{"start":{"line":315,"column":4},"end":{"line":327,"column":5}},"130":{"start":{"line":316,"column":6},"end":{"line":316,"column":44}},"131":{"start":{"line":317,"column":6},"end":{"line":317,"column":67}},"132":{"start":{"line":318,"column":6},"end":{"line":318,"column":39}},"133":{"start":{"line":319,"column":6},"end":{"line":319,"column":47}},"134":{"start":{"line":320,"column":6},"end":{"line":320,"column":50}},"135":{"start":{"line":321,"column":6},"end":{"line":321,"column":38}},"136":{"start":{"line":322,"column":6},"end":{"line":322,"column":35}},"137":{"start":{"line":323,"column":6},"end":{"line":323,"column":98}},"138":{"start":{"line":325,"column":6},"end":{"line":325,"column":66}},"139":{"start":{"line":326,"column":6},"end":{"line":326,"column":21}},"140":{"start":{"line":332,"column":4},"end":{"line":332,"column":19}},"141":{"start":{"line":333,"column":4},"end":{"line":333,"column":46}},"142":{"start":{"line":336,"column":25},"end":{"line":337,"column":69}},"143":{"start":{"line":337,"column":35},"end":{"line":337,"column":67}},"144":{"start":{"line":340,"column":4},"end":{"line":340,"column":51}},"145":{"start":{"line":340,"column":32},"end":{"line":340,"column":49}},"146":{"start":{"line":343,"column":15},"end":{"line":343,"column":16}},"147":{"start":{"line":344,"column":4},"end":{"line":349,"column":7}},"148":{"start":{"line":345,"column":6},"end":{"line":347,"column":7}},"149":{"start":{"line":346,"column":8},"end":{"line":346,"column":25}},"150":{"start":{"line":348,"column":6},"end":{"line":348,"column":33}},"151":{"start":{"line":350,"column":4},"end":{"line":350,"column":55}},"152":{"start":{"line":357,"column":4},"end":{"line":357,"column":54}},"153":{"start":{"line":362,"column":4},"end":{"line":365,"column":5}},"154":{"start":{"line":363,"column":6},"end":{"line":363,"column":40}},"155":{"start":{"line":364,"column":6},"end":{"line":364,"column":37}},"156":{"start":{"line":17,"column":0},"end":{"line":17,"column":13}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":26,"column":2},"end":{"line":26,"column":14}},"loc":{"start":{"line":26,"column":131},"end":{"line":33,"column":3}}},"1":{"name":"(anonymous_1)","decl":{"start":{"line":35,"column":10},"end":{"line":35,"column":29}},"loc":{"start":{"line":35,"column":29},"end":{"line":59,"column":3}}},"2":{"name":"(anonymous_2)","decl":{"start":{"line":37,"column":25},"end":{"line":37,"column":31}},"loc":{"start":{"line":37,"column":34},"end":{"line":43,"column":5}}},"3":{"name":"(anonymous_3)","decl":{"start":{"line":62,"column":9},"end":{"line":62,"column":18}},"loc":{"start":{"line":62,"column":36},"end":{"line":84,"column":3}}},"4":{"name":"(anonymous_4)","decl":{"start":{"line":86,"column":10},"end":{"line":86,"column":31}},"loc":{"start":{"line":86,"column":31},"end":{"line":96,"column":3}}},"5":{"name":"(anonymous_5)","decl":{"start":{"line":98,"column":10},"end":{"line":98,"column":20}},"loc":{"start":{"line":98,"column":59},"end":{"line":127,"column":3}}},"6":{"name":"(anonymous_6)","decl":{"start":{"line":108,"column":37},"end":{"line":108,"column":40}},"loc":{"start":{"line":108,"column":42},"end":{"line":126,"column":5}}},"7":{"name":"(anonymous_7)","decl":{"start":{"line":130,"column":9},"end":{"line":130,"column":23}},"loc":{"start":{"line":130,"column":40},"end":{"line":153,"column":3}}},"8":{"name":"(anonymous_8)","decl":{"start":{"line":155,"column":9},"end":{"line":155,"column":21}},"loc":{"start":{"line":155,"column":53},"end":{"line":180,"column":3}}},"9":{"name":"(anonymous_9)","decl":{"start":{"line":176,"column":22},"end":{"line":176,"column":25}},"loc":{"start":{"line":176,"column":27},"end":{"line":178,"column":7}}},"10":{"name":"(anonymous_10)","decl":{"start":{"line":181,"column":10},"end":{"line":181,"column":29}},"loc":{"start":{"line":181,"column":29},"end":{"line":208,"column":3}}},"11":{"name":"(anonymous_11)","decl":{"start":{"line":188,"column":27},"end":{"line":188,"column":28}},"loc":{"start":{"line":188,"column":36},"end":{"line":193,"column":5}}},"12":{"name":"(anonymous_12)","decl":{"start":{"line":196,"column":60},"end":{"line":196,"column":61}},"loc":{"start":{"line":196,"column":65},"end":{"line":196,"column":75}}},"13":{"name":"(anonymous_13)","decl":{"start":{"line":210,"column":10},"end":{"line":210,"column":28}},"loc":{"start":{"line":210,"column":28},"end":{"line":222,"column":3}}},"14":{"name":"(anonymous_14)","decl":{"start":{"line":218,"column":20},"end":{"line":218,"column":23}},"loc":{"start":{"line":218,"column":25},"end":{"line":220,"column":5}}},"15":{"name":"(anonymous_15)","decl":{"start":{"line":224,"column":9},"end":{"line":224,"column":18}},"loc":{"start":{"line":224,"column":82},"end":{"line":257,"column":3}}},"16":{"name":"(anonymous_16)","decl":{"start":{"line":259,"column":10},"end":{"line":259,"column":19}},"loc":{"start":{"line":259,"column":19},"end":{"line":263,"column":3}}},"17":{"name":"(anonymous_17)","decl":{"start":{"line":265,"column":10},"end":{"line":265,"column":32}},"loc":{"start":{"line":265,"column":32},"end":{"line":279,"column":3}}},"18":{"name":"(anonymous_18)","decl":{"start":{"line":281,"column":10},"end":{"line":281,"column":29}},"loc":{"start":{"line":281,"column":29},"end":{"line":307,"column":3}}},"19":{"name":"(anonymous_19)","decl":{"start":{"line":294,"column":79},"end":{"line":294,"column":81}},"loc":{"start":{"line":294,"column":85},"end":{"line":294,"column":107}}},"20":{"name":"(anonymous_20)","decl":{"start":{"line":312,"column":10},"end":{"line":312,"column":28}},"loc":{"start":{"line":312,"column":28},"end":{"line":329,"column":3}}},"21":{"name":"(anonymous_21)","decl":{"start":{"line":331,"column":10},"end":{"line":331,"column":17}},"loc":{"start":{"line":331,"column":17},"end":{"line":351,"column":3}}},"22":{"name":"(anonymous_22)","decl":{"start":{"line":337,"column":11},"end":{"line":337,"column":12}},"loc":{"start":{"line":337,"column":35},"end":{"line":337,"column":67}}},"23":{"name":"(anonymous_23)","decl":{"start":{"line":340,"column":22},"end":{"line":340,"column":23}},"loc":{"start":{"line":340,"column":32},"end":{"line":340,"column":49}}},"24":{"name":"(anonymous_24)","decl":{"start":{"line":344,"column":47},"end":{"line":344,"column":48}},"loc":{"start":{"line":344,"column":65},"end":{"line":349,"column":5}}},"25":{"name":"(anonymous_25)","decl":{"start":{"line":353,"column":9},"end":{"line":353,"column":21}},"loc":{"start":{"line":353,"column":21},"end":{"line":358,"column":3}}},"26":{"name":"(anonymous_26)","decl":{"start":{"line":361,"column":9},"end":{"line":361,"column":16}},"loc":{"start":{"line":361,"column":16},"end":{"line":366,"column":3}}}},"branchMap":{"0":{"loc":{"start":{"line":26,"column":94},"end":{"line":26,"column":131}},"type":"default-arg","locations":[{"start":{"line":26,"column":113},"end":{"line":26,"column":131}}]},"1":{"loc":{"start":{"line":66,"column":4},"end":{"line":68,"column":5}},"type":"if","locations":[{"start":{"line":66,"column":4},"end":{"line":68,"column":5}}]},"2":{"loc":{"start":{"line":70,"column":4},"end":{"line":72,"column":5}},"type":"if","locations":[{"start":{"line":70,"column":4},"end":{"line":72,"column":5}}]},"3":{"loc":{"start":{"line":101,"column":4},"end":{"line":103,"column":5}},"type":"if","locations":[{"start":{"line":101,"column":4},"end":{"line":103,"column":5}}]},"4":{"loc":{"start":{"line":117,"column":6},"end":{"line":120,"column":7}},"type":"if","locations":[{"start":{"line":117,"column":6},"end":{"line":120,"column":7}}]},"5":{"loc":{"start":{"line":122,"column":6},"end":{"line":125,"column":7}},"type":"if","locations":[{"start":{"line":122,"column":6},"end":{"line":125,"column":7}}]},"6":{"loc":{"start":{"line":133,"column":4},"end":{"line":137,"column":5}},"type":"if","locations":[{"start":{"line":133,"column":4},"end":{"line":137,"column":5}}]},"7":{"loc":{"start":{"line":140,"column":4},"end":{"line":144,"column":5}},"type":"if","locations":[{"start":{"line":140,"column":4},"end":{"line":144,"column":5}}]},"8":{"loc":{"start":{"line":156,"column":4},"end":{"line":158,"column":5}},"type":"if","locations":[{"start":{"line":156,"column":4},"end":{"line":158,"column":5}}]},"9":{"loc":{"start":{"line":160,"column":4},"end":{"line":162,"column":5}},"type":"if","locations":[{"start":{"line":160,"column":4},"end":{"line":162,"column":5}}]},"10":{"loc":{"start":{"line":160,"column":8},"end":{"line":160,"column":66}},"type":"binary-expr","locations":[{"start":{"line":160,"column":8},"end":{"line":160,"column":35}},{"start":{"line":160,"column":39},"end":{"line":160,"column":66}}]},"11":{"loc":{"start":{"line":174,"column":4},"end":{"line":179,"column":5}},"type":"if","locations":[{"start":{"line":174,"column":4},"end":{"line":179,"column":5}}]},"12":{"loc":{"start":{"line":189,"column":6},"end":{"line":191,"column":7}},"type":"if","locations":[{"start":{"line":189,"column":6},"end":{"line":191,"column":7}}]},"13":{"loc":{"start":{"line":199,"column":4},"end":{"line":206,"column":5}},"type":"if","locations":[{"start":{"line":199,"column":4},"end":{"line":206,"column":5}},{"start":{"line":203,"column":11},"end":{"line":206,"column":5}}]},"14":{"loc":{"start":{"line":225,"column":4},"end":{"line":227,"column":5}},"type":"if","locations":[{"start":{"line":225,"column":4},"end":{"line":227,"column":5}}]},"15":{"loc":{"start":{"line":229,"column":4},"end":{"line":231,"column":5}},"type":"if","locations":[{"start":{"line":229,"column":4},"end":{"line":231,"column":5}}]},"16":{"loc":{"start":{"line":234,"column":4},"end":{"line":237,"column":5}},"type":"if","locations":[{"start":{"line":234,"column":4},"end":{"line":237,"column":5}}]},"17":{"loc":{"start":{"line":239,"column":4},"end":{"line":241,"column":5}},"type":"if","locations":[{"start":{"line":239,"column":4},"end":{"line":241,"column":5}}]},"18":{"loc":{"start":{"line":253,"column":4},"end":{"line":255,"column":5}},"type":"if","locations":[{"start":{"line":253,"column":4},"end":{"line":255,"column":5}}]},"19":{"loc":{"start":{"line":269,"column":4},"end":{"line":274,"column":5}},"type":"if","locations":[{"start":{"line":269,"column":4},"end":{"line":274,"column":5}}]},"20":{"loc":{"start":{"line":271,"column":6},"end":{"line":273,"column":7}},"type":"if","locations":[{"start":{"line":271,"column":6},"end":{"line":273,"column":7}}]},"21":{"loc":{"start":{"line":285,"column":4},"end":{"line":289,"column":5}},"type":"if","locations":[{"start":{"line":285,"column":4},"end":{"line":289,"column":5}}]},"22":{"loc":{"start":{"line":293,"column":4},"end":{"line":295,"column":5}},"type":"if","locations":[{"start":{"line":293,"column":4},"end":{"line":295,"column":5}}]},"23":{"loc":{"start":{"line":298,"column":4},"end":{"line":305,"column":5}},"type":"if","locations":[{"start":{"line":298,"column":4},"end":{"line":305,"column":5}},{"start":{"line":302,"column":11},"end":{"line":305,"column":5}}]},"24":{"loc":{"start":{"line":298,"column":8},"end":{"line":298,"column":85}},"type":"binary-expr","locations":[{"start":{"line":298,"column":8},"end":{"line":298,"column":39}},{"start":{"line":298,"column":43},"end":{"line":298,"column":85}}]},"25":{"loc":{"start":{"line":315,"column":4},"end":{"line":327,"column":5}},"type":"if","locations":[{"start":{"line":315,"column":4},"end":{"line":327,"column":5}},{"start":{"line":324,"column":11},"end":{"line":327,"column":5}}]},"26":{"loc":{"start":{"line":345,"column":6},"end":{"line":347,"column":7}},"type":"if","locations":[{"start":{"line":345,"column":6},"end":{"line":347,"column":7}}]},"27":{"loc":{"start":{"line":345,"column":10},"end":{"line":345,"column":67}},"type":"binary-expr","locations":[{"start":{"line":345,"column":10},"end":{"line":345,"column":19}},{"start":{"line":345,"column":23},"end":{"line":345,"column":67}}]},"28":{"loc":{"start":{"line":362,"column":4},"end":{"line":365,"column":5}},"type":"if","locations":[{"start":{"line":362,"column":4},"end":{"line":365,"column":5}}]}},"s":{"0":2,"1":2,"2":2,"3":2,"4":36,"5":36,"6":36,"7":36,"8":36,"9":36,"10":36,"11":36,"12":76,"13":36,"14":0,"15":19,"16":19,"17":0,"18":19,"19":1,"20":18,"21":18,"22":18,"23":18,"24":18,"25":18,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":17,"50":0,"51":0,"52":17,"53":17,"54":17,"55":17,"56":17,"57":0,"58":0,"59":0,"60":0,"61":10,"62":10,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":17,"141":17,"142":17,"143":51,"144":17,"145":34,"146":17,"147":17,"148":51,"149":0,"150":51,"151":17,"152":59,"153":37,"154":0,"155":0,"156":2},"f":{"0":36,"1":36,"2":76,"3":19,"4":0,"5":0,"6":0,"7":17,"8":10,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":17,"22":51,"23":34,"24":51,"25":59,"26":37},"b":{"0":[0],"1":[0],"2":[1],"3":[0],"4":[0],"5":[0],"6":[0],"7":[17],"8":[10],"9":[0],"10":[0,0],"11":[0],"12":[0],"13":[0,0],"14":[0],"15":[0],"16":[0],"17":[0],"18":[0],"19":[0],"20":[0],"21":[0],"22":[0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0],"27":[51,34],"28":[0]}}
,"/home/kunon/apps/ricochet_robots/server/src/services/roomManager.ts": {"path":"/home/kunon/apps/ricochet_robots/server/src/services/roomManager.ts","statementMap":{"0":{"start":{"line":3,"column":0},"end":{"line":3,"column":36}},"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":44}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":98}},"3":{"start":{"line":14,"column":4},"end":{"line":14,"column":27}},"4":{"start":{"line":18,"column":19},"end":{"line":18,"column":27}},"5":{"start":{"line":20,"column":4},"end":{"line":20,"column":29}},"6":{"start":{"line":21,"column":4},"end":{"line":21,"column":31}},"7":{"start":{"line":24,"column":28},"end":{"line":24,"column":52}},"8":{"start":{"line":26,"column":45},"end":{"line":49,"column":6}},"9":{"start":{"line":51,"column":24},"end":{"line":51,"column":107}},"10":{"start":{"line":52,"column":23},"end":{"line":64,"column":6}},"11":{"start":{"line":66,"column":4},"end":{"line":66,"column":33}},"12":{"start":{"line":69,"column":4},"end":{"line":69,"column":48}},"13":{"start":{"line":71,"column":4},"end":{"line":71,"column":16}},"14":{"start":{"line":76,"column":17},"end":{"line":76,"column":39}},"15":{"start":{"line":77,"column":4},"end":{"line":79,"column":5}},"16":{"start":{"line":78,"column":6},"end":{"line":78,"column":40}},"17":{"start":{"line":81,"column":4},"end":{"line":83,"column":5}},"18":{"start":{"line":82,"column":6},"end":{"line":82,"column":42}},"19":{"start":{"line":85,"column":4},"end":{"line":87,"column":5}},"20":{"start":{"line":86,"column":6},"end":{"line":86,"column":38}},"21":{"start":{"line":89,"column":4},"end":{"line":91,"column":5}},"22":{"start":{"line":90,"column":6},"end":{"line":90,"column":48}},"23":{"start":{"line":94,"column":4},"end":{"line":94,"column":27}},"24":{"start":{"line":95,"column":4},"end":{"line":95,"column":26}},"25":{"start":{"line":96,"column":4},"end":{"line":96,"column":28}},"26":{"start":{"line":97,"column":4},"end":{"line":97,"column":38}},"27":{"start":{"line":99,"column":4},"end":{"line":99,"column":40}},"28":{"start":{"line":100,"column":4},"end":{"line":100,"column":35}},"29":{"start":{"line":101,"column":4},"end":{"line":101,"column":16}},"30":{"start":{"line":105,"column":17},"end":{"line":105,"column":39}},"31":{"start":{"line":106,"column":4},"end":{"line":108,"column":5}},"32":{"start":{"line":107,"column":6},"end":{"line":107,"column":40}},"33":{"start":{"line":110,"column":19},"end":{"line":110,"column":45}},"34":{"start":{"line":111,"column":4},"end":{"line":113,"column":5}},"35":{"start":{"line":112,"column":6},"end":{"line":112,"column":44}},"36":{"start":{"line":115,"column":4},"end":{"line":115,"column":34}},"37":{"start":{"line":116,"column":4},"end":{"line":116,"column":35}},"38":{"start":{"line":119,"column":4},"end":{"line":119,"column":25}},"39":{"start":{"line":122,"column":4},"end":{"line":133,"column":5}},"40":{"start":{"line":123,"column":6},"end":{"line":123,"column":32}},"41":{"start":{"line":126,"column":9},"end":{"line":133,"column":5}},"42":{"start":{"line":127,"column":22},"end":{"line":127,"column":58}},"43":{"start":{"line":128,"column":6},"end":{"line":132,"column":7}},"44":{"start":{"line":129,"column":9},"end":{"line":129,"column":34}},"45":{"start":{"line":130,"column":9},"end":{"line":130,"column":31}},"46":{"start":{"line":135,"column":4},"end":{"line":135,"column":16}},"47":{"start":{"line":139,"column":4},"end":{"line":147,"column":8}},"48":{"start":{"line":139,"column":56},"end":{"line":147,"column":6}},"49":{"start":{"line":151,"column":4},"end":{"line":151,"column":34}},"50":{"start":{"line":155,"column":17},"end":{"line":155,"column":39}},"51":{"start":{"line":156,"column":4},"end":{"line":161,"column":5}},"52":{"start":{"line":158,"column":6},"end":{"line":158,"column":94}},"53":{"start":{"line":159,"column":6},"end":{"line":159,"column":13}},"54":{"start":{"line":163,"column":19},"end":{"line":163,"column":45}},"55":{"start":{"line":164,"column":4},"end":{"line":169,"column":5}},"56":{"start":{"line":166,"column":7},"end":{"line":166,"column":94}},"57":{"start":{"line":167,"column":7},"end":{"line":167,"column":14}},"58":{"start":{"line":171,"column":4},"end":{"line":171,"column":33}},"59":{"start":{"line":172,"column":4},"end":{"line":174,"column":5}},"60":{"start":{"line":173,"column":8},"end":{"line":173,"column":42}},"61":{"start":{"line":175,"column":4},"end":{"line":175,"column":35}},"62":{"start":{"line":180,"column":29},"end":{"line":180,"column":66}},"63":{"start":{"line":181,"column":4},"end":{"line":188,"column":5}},"64":{"start":{"line":183,"column":30},"end":{"line":183,"column":88}},"65":{"start":{"line":183,"column":75},"end":{"line":183,"column":87}},"66":{"start":{"line":184,"column":6},"end":{"line":187,"column":7}},"67":{"start":{"line":185,"column":8},"end":{"line":185,"column":60}},"68":{"start":{"line":186,"column":8},"end":{"line":186,"column":34}},"69":{"start":{"line":10,"column":0},"end":{"line":10,"column":13}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":13,"column":2},"end":{"line":13,"column":null}},"loc":{"start":{"line":13,"column":2},"end":{"line":15,"column":3}}},"1":{"name":"(anonymous_1)","decl":{"start":{"line":17,"column":2},"end":{"line":17,"column":12}},"loc":{"start":{"line":17,"column":53},"end":{"line":72,"column":3}}},"2":{"name":"(anonymous_2)","decl":{"start":{"line":75,"column":2},"end":{"line":75,"column":10}},"loc":{"start":{"line":75,"column":60},"end":{"line":102,"column":3}}},"3":{"name":"(anonymous_3)","decl":{"start":{"line":104,"column":2},"end":{"line":104,"column":11}},"loc":{"start":{"line":104,"column":44},"end":{"line":136,"column":3}}},"4":{"name":"(anonymous_4)","decl":{"start":{"line":138,"column":2},"end":{"line":138,"column":18}},"loc":{"start":{"line":138,"column":18},"end":{"line":148,"column":3}}},"5":{"name":"(anonymous_5)","decl":{"start":{"line":139,"column":47},"end":{"line":139,"column":51}},"loc":{"start":{"line":139,"column":56},"end":{"line":147,"column":6}}},"6":{"name":"(anonymous_6)","decl":{"start":{"line":150,"column":2},"end":{"line":150,"column":9}},"loc":{"start":{"line":150,"column":24},"end":{"line":152,"column":3}}},"7":{"name":"(anonymous_7)","decl":{"start":{"line":154,"column":2},"end":{"line":154,"column":24}},"loc":{"start":{"line":154,"column":77},"end":{"line":176,"column":3}}},"8":{"name":"(anonymous_8)","decl":{"start":{"line":179,"column":2},"end":{"line":179,"column":22}},"loc":{"start":{"line":179,"column":22},"end":{"line":189,"column":3}}},"9":{"name":"(anonymous_9)","decl":{"start":{"line":183,"column":70},"end":{"line":183,"column":71}},"loc":{"start":{"line":183,"column":75},"end":{"line":183,"column":87}}}},"branchMap":{"0":{"loc":{"start":{"line":55,"column":16},"end":{"line":55,"column":40}},"type":"binary-expr","locations":[{"start":{"line":55,"column":16},"end":{"line":55,"column":32}},{"start":{"line":55,"column":36},"end":{"line":55,"column":40}}]},"1":{"loc":{"start":{"line":59,"column":18},"end":{"line":59,"column":41}},"type":"binary-expr","locations":[{"start":{"line":59,"column":18},"end":{"line":59,"column":36}},{"start":{"line":59,"column":40},"end":{"line":59,"column":41}}]},"2":{"loc":{"start":{"line":77,"column":4},"end":{"line":79,"column":5}},"type":"if","locations":[{"start":{"line":77,"column":4},"end":{"line":79,"column":5}}]},"3":{"loc":{"start":{"line":81,"column":4},"end":{"line":83,"column":5}},"type":"if","locations":[{"start":{"line":81,"column":4},"end":{"line":83,"column":5}}]},"4":{"loc":{"start":{"line":81,"column":8},"end":{"line":81,"column":51}},"type":"binary-expr","locations":[{"start":{"line":81,"column":8},"end":{"line":81,"column":21}},{"start":{"line":81,"column":25},"end":{"line":81,"column":51}}]},"5":{"loc":{"start":{"line":85,"column":4},"end":{"line":87,"column":5}},"type":"if","locations":[{"start":{"line":85,"column":4},"end":{"line":87,"column":5}}]},"6":{"loc":{"start":{"line":89,"column":4},"end":{"line":91,"column":5}},"type":"if","locations":[{"start":{"line":89,"column":4},"end":{"line":91,"column":5}}]},"7":{"loc":{"start":{"line":106,"column":4},"end":{"line":108,"column":5}},"type":"if","locations":[{"start":{"line":106,"column":4},"end":{"line":108,"column":5}}]},"8":{"loc":{"start":{"line":111,"column":4},"end":{"line":113,"column":5}},"type":"if","locations":[{"start":{"line":111,"column":4},"end":{"line":113,"column":5}}]},"9":{"loc":{"start":{"line":122,"column":4},"end":{"line":133,"column":5}},"type":"if","locations":[{"start":{"line":122,"column":4},"end":{"line":133,"column":5}},{"start":{"line":126,"column":9},"end":{"line":133,"column":5}}]},"10":{"loc":{"start":{"line":126,"column":9},"end":{"line":133,"column":5}},"type":"if","locations":[{"start":{"line":126,"column":9},"end":{"line":133,"column":5}}]},"11":{"loc":{"start":{"line":128,"column":6},"end":{"line":132,"column":7}},"type":"if","locations":[{"start":{"line":128,"column":6},"end":{"line":132,"column":7}}]},"12":{"loc":{"start":{"line":146,"column":14},"end":{"line":146,"column":56}},"type":"binary-expr","locations":[{"start":{"line":146,"column":14},"end":{"line":146,"column":35}},{"start":{"line":146,"column":39},"end":{"line":146,"column":56}}]},"13":{"loc":{"start":{"line":156,"column":4},"end":{"line":161,"column":5}},"type":"if","locations":[{"start":{"line":156,"column":4},"end":{"line":161,"column":5}}]},"14":{"loc":{"start":{"line":164,"column":4},"end":{"line":169,"column":5}},"type":"if","locations":[{"start":{"line":164,"column":4},"end":{"line":169,"column":5}}]},"15":{"loc":{"start":{"line":172,"column":4},"end":{"line":174,"column":5}},"type":"if","locations":[{"start":{"line":172,"column":4},"end":{"line":174,"column":5}}]},"16":{"loc":{"start":{"line":184,"column":6},"end":{"line":187,"column":7}},"type":"if","locations":[{"start":{"line":184,"column":6},"end":{"line":187,"column":7}}]},"17":{"loc":{"start":{"line":184,"column":10},"end":{"line":184,"column":65}},"type":"binary-expr","locations":[{"start":{"line":184,"column":10},"end":{"line":184,"column":25}},{"start":{"line":184,"column":29},"end":{"line":184,"column":65}}]}},"s":{"0":1,"1":1,"2":1,"3":18,"4":15,"5":15,"6":15,"7":15,"8":15,"9":15,"10":15,"11":15,"12":15,"13":15,"14":5,"15":5,"16":1,"17":4,"18":1,"19":3,"20":1,"21":2,"22":0,"23":2,"24":2,"25":2,"26":2,"27":2,"28":2,"29":2,"30":3,"31":3,"32":0,"33":3,"34":3,"35":1,"36":2,"37":2,"38":2,"39":2,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":2,"47":2,"48":1,"49":6,"50":3,"51":3,"52":1,"53":1,"54":2,"55":2,"56":1,"57":1,"58":1,"59":1,"60":0,"61":1,"62":2,"63":2,"64":2,"65":2,"66":2,"67":1,"68":1,"69":1},"f":{"0":18,"1":15,"2":5,"3":3,"4":2,"5":1,"6":6,"7":3,"8":2,"9":2},"b":{"0":[15,12],"1":[15,12],"2":[1],"3":[1],"4":[4,1],"5":[1],"6":[0],"7":[0],"8":[1],"9":[1,1],"10":[1],"11":[1],"12":[1,0],"13":[1],"14":[1],"15":[0],"16":[1],"17":[2,1]}}
,"/home/kunon/apps/ricochet_robots/server/src/types/game.ts": {"path":"/home/kunon/apps/ricochet_robots/server/src/types/game.ts","statementMap":{"0":{"start":{"line":8,"column":0},"end":{"line":8,"column":null}},"1":{"start":{"line":9,"column":2},"end":{"line":9,"column":null}},"2":{"start":{"line":10,"column":2},"end":{"line":10,"column":null}},"3":{"start":{"line":11,"column":2},"end":{"line":11,"column":null}},"4":{"start":{"line":12,"column":2},"end":{"line":12,"column":null}},"5":{"start":{"line":18,"column":0},"end":{"line":18,"column":null}},"6":{"start":{"line":19,"column":2},"end":{"line":19,"column":null}},"7":{"start":{"line":20,"column":2},"end":{"line":20,"column":null}},"8":{"start":{"line":21,"column":2},"end":{"line":21,"column":null}},"9":{"start":{"line":22,"column":2},"end":{"line":22,"column":null}},"10":{"start":{"line":23,"column":2},"end":{"line":23,"column":null}},"11":{"start":{"line":26,"column":0},"end":{"line":26,"column":null}},"12":{"start":{"line":27,"column":2},"end":{"line":27,"column":null}},"13":{"start":{"line":28,"column":2},"end":{"line":28,"column":null}},"14":{"start":{"line":29,"column":2},"end":{"line":29,"column":null}},"15":{"start":{"line":30,"column":2},"end":{"line":30,"column":null}},"16":{"start":{"line":83,"column":13},"end":{"line":91,"column":2}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":8,"column":0},"end":{"line":8,"column":12}},"loc":{"start":{"line":8,"column":22},"end":{"line":15,"column":1}}},"1":{"name":"(anonymous_1)","decl":{"start":{"line":18,"column":0},"end":{"line":18,"column":12}},"loc":{"start":{"line":18,"column":24},"end":{"line":24,"column":1}}},"2":{"name":"(anonymous_2)","decl":{"start":{"line":26,"column":0},"end":{"line":26,"column":12}},"loc":{"start":{"line":26,"column":21},"end":{"line":31,"column":1}}}},"branchMap":{"0":{"loc":{"start":{"line":8,"column":12},"end":{"line":8,"column":null}},"type":"binary-expr","locations":[{"start":{"line":8,"column":12},"end":{"line":8,"column":22}},{"start":{"line":8,"column":22},"end":{"line":8,"column":null}}]},"1":{"loc":{"start":{"line":18,"column":12},"end":{"line":18,"column":null}},"type":"binary-expr","locations":[{"start":{"line":18,"column":12},"end":{"line":18,"column":24}},{"start":{"line":18,"column":24},"end":{"line":18,"column":null}}]},"2":{"loc":{"start":{"line":26,"column":12},"end":{"line":26,"column":null}},"type":"binary-expr","locations":[{"start":{"line":26,"column":12},"end":{"line":26,"column":21}},{"start":{"line":26,"column":21},"end":{"line":26,"column":null}}]}},"s":{"0":2,"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":2,"9":2,"10":2,"11":2,"12":2,"13":2,"14":2,"15":2,"16":2},"f":{"0":2,"1":2,"2":2},"b":{"0":[2,2],"1":[2,2],"2":[2,2]}}
,"/home/kunon/apps/ricochet_robots/server/src/utils/constants.ts": {"path":"/home/kunon/apps/ricochet_robots/server/src/utils/constants.ts","statementMap":{"0":{"start":{"line":1,"column":0},"end":{"line":1,"column":57}},"1":{"start":{"line":5,"column":13},"end":{"line":11,"column":2}},"2":{"start":{"line":15,"column":13},"end":{"line":21,"column":2}},"3":{"start":{"line":25,"column":13},"end":{"line":30,"column":2}}},"fnMap":{},"branchMap":{},"s":{"0":2,"1":2,"2":2,"3":2},"f":{},"b":{}}
}

================
File: server/coverage/lcov.info
================
TN:
SF:src/services/cardDeck.ts
FN:14,(anonymous_0)
FN:22,(anonymous_1)
FN:26,(anonymous_2)
FN:27,(anonymous_3)
FN:27,(anonymous_4)
FN:54,(anonymous_5)
FN:66,(anonymous_6)
FN:73,(anonymous_7)
FN:103,(anonymous_8)
FN:107,(anonymous_9)
FNF:10
FNH:9
FNDA:36,(anonymous_0)
FNDA:36,(anonymous_1)
FNDA:144,(anonymous_2)
FNDA:720,(anonymous_3)
FNDA:576,(anonymous_4)
FNDA:0,(anonymous_5)
FNDA:36,(anonymous_6)
FNDA:17,(anonymous_7)
FNDA:54,(anonymous_8)
FNDA:36,(anonymous_9)
DA:1,2
DA:2,2
DA:9,2
DA:15,36
DA:16,36
DA:17,36
DA:18,36
DA:19,36
DA:23,36
DA:26,36
DA:27,720
DA:29,576
DA:30,576
DA:31,240
DA:33,336
DA:39,36
DA:40,36
DA:41,15
DA:46,21
DA:50,36
DA:51,36
DA:55,0
DA:56,0
DA:57,0
DA:58,0
DA:59,0
DA:62,0
DA:67,36
DA:68,240
DA:69,240
DA:74,17
DA:75,17
DA:76,17
DA:79,0
DA:80,0
DA:82,0
DA:83,0
DA:85,0
DA:91,0
DA:98,0
DA:100,0
DA:104,54
DA:108,36
LF:43
LH:29
BRDA:30,0,0,240
BRDA:30,0,1,336
BRDA:40,1,0,15
BRDA:40,1,1,21
BRDA:57,2,0,0
BRDA:74,3,0,17
BRDA:82,4,0,0
BRDA:93,5,0,0
BRDA:93,5,1,0
BRF:9
BRH:5
end_of_record
TN:
SF:src/services/gameManager.ts
FN:26,(anonymous_0)
FN:35,(anonymous_1)
FN:37,(anonymous_2)
FN:62,(anonymous_3)
FN:86,(anonymous_4)
FN:98,(anonymous_5)
FN:108,(anonymous_6)
FN:130,(anonymous_7)
FN:155,(anonymous_8)
FN:176,(anonymous_9)
FN:181,(anonymous_10)
FN:188,(anonymous_11)
FN:196,(anonymous_12)
FN:210,(anonymous_13)
FN:218,(anonymous_14)
FN:224,(anonymous_15)
FN:259,(anonymous_16)
FN:265,(anonymous_17)
FN:281,(anonymous_18)
FN:294,(anonymous_19)
FN:312,(anonymous_20)
FN:331,(anonymous_21)
FN:337,(anonymous_22)
FN:340,(anonymous_23)
FN:344,(anonymous_24)
FN:353,(anonymous_25)
FN:361,(anonymous_26)
FNF:27
FNH:12
FNDA:36,(anonymous_0)
FNDA:36,(anonymous_1)
FNDA:76,(anonymous_2)
FNDA:19,(anonymous_3)
FNDA:0,(anonymous_4)
FNDA:0,(anonymous_5)
FNDA:0,(anonymous_6)
FNDA:17,(anonymous_7)
FNDA:10,(anonymous_8)
FNDA:0,(anonymous_9)
FNDA:0,(anonymous_10)
FNDA:0,(anonymous_11)
FNDA:0,(anonymous_12)
FNDA:0,(anonymous_13)
FNDA:0,(anonymous_14)
FNDA:0,(anonymous_15)
FNDA:0,(anonymous_16)
FNDA:0,(anonymous_17)
FNDA:0,(anonymous_18)
FNDA:0,(anonymous_19)
FNDA:0,(anonymous_20)
FNDA:17,(anonymous_21)
FNDA:51,(anonymous_22)
FNDA:34,(anonymous_23)
FNDA:51,(anonymous_24)
FNDA:59,(anonymous_25)
FNDA:37,(anonymous_26)
DA:1,2
DA:2,2
DA:4,2
DA:10,2
DA:17,2
DA:27,36
DA:28,36
DA:29,36
DA:30,36
DA:31,36
DA:32,36
DA:36,36
DA:37,36
DA:38,76
DA:45,36
DA:58,0
DA:64,19
DA:66,19
DA:67,0
DA:70,19
DA:71,1
DA:75,18
DA:78,18
DA:79,18
DA:80,18
DA:82,18
DA:83,18
DA:87,0
DA:88,0
DA:89,0
DA:90,0
DA:91,0
DA:95,0
DA:99,0
DA:101,0
DA:102,0
DA:105,0
DA:106,0
DA:108,0
DA:109,0
DA:110,0
DA:112,0
DA:113,0
DA:116,0
DA:117,0
DA:118,0
DA:119,0
DA:122,0
DA:123,0
DA:124,0
DA:133,17
DA:134,0
DA:136,0
DA:139,17
DA:140,17
DA:141,17
DA:142,17
DA:143,17
DA:146,0
DA:147,0
DA:149,0
DA:151,0
DA:156,10
DA:157,10
DA:160,0
DA:161,0
DA:164,0
DA:170,0
DA:171,0
DA:174,0
DA:175,0
DA:176,0
DA:177,0
DA:182,0
DA:185,0
DA:188,0
DA:189,0
DA:190,0
DA:192,0
DA:196,0
DA:199,0
DA:201,0
DA:202,0
DA:205,0
DA:207,0
DA:211,0
DA:212,0
DA:213,0
DA:214,0
DA:215,0
DA:218,0
DA:219,0
DA:221,0
DA:225,0
DA:226,0
DA:229,0
DA:230,0
DA:233,0
DA:234,0
DA:236,0
DA:239,0
DA:240,0
DA:244,0
DA:250,0
DA:253,0
DA:254,0
DA:262,0
DA:266,0
DA:268,0
DA:269,0
DA:270,0
DA:271,0
DA:272,0
DA:277,0
DA:278,0
DA:282,0
DA:284,0
DA:285,0
DA:287,0
DA:288,0
DA:293,0
DA:294,0
DA:298,0
DA:300,0
DA:301,0
DA:304,0
DA:306,0
DA:313,0
DA:315,0
DA:316,0
DA:317,0
DA:318,0
DA:319,0
DA:320,0
DA:321,0
DA:322,0
DA:323,0
DA:325,0
DA:326,0
DA:332,17
DA:333,17
DA:336,17
DA:337,51
DA:340,34
DA:343,17
DA:344,17
DA:345,51
DA:346,0
DA:348,51
DA:350,17
DA:357,59
DA:362,37
DA:363,0
DA:364,0
LF:154
LH:45
BRDA:26,0,0,0
BRDA:66,1,0,0
BRDA:70,2,0,1
BRDA:101,3,0,0
BRDA:117,4,0,0
BRDA:122,5,0,0
BRDA:133,6,0,0
BRDA:140,7,0,17
BRDA:156,8,0,10
BRDA:160,9,0,0
BRDA:160,10,0,0
BRDA:160,10,1,0
BRDA:174,11,0,0
BRDA:189,12,0,0
BRDA:199,13,0,0
BRDA:199,13,1,0
BRDA:225,14,0,0
BRDA:229,15,0,0
BRDA:234,16,0,0
BRDA:239,17,0,0
BRDA:253,18,0,0
BRDA:269,19,0,0
BRDA:271,20,0,0
BRDA:285,21,0,0
BRDA:293,22,0,0
BRDA:298,23,0,0
BRDA:298,23,1,0
BRDA:298,24,0,0
BRDA:298,24,1,0
BRDA:315,25,0,0
BRDA:315,25,1,0
BRDA:345,26,0,0
BRDA:345,27,0,51
BRDA:345,27,1,34
BRDA:362,28,0,0
BRF:35
BRH:5
end_of_record
TN:
SF:src/services/roomManager.ts
FN:13,(anonymous_0)
FN:17,(anonymous_1)
FN:75,(anonymous_2)
FN:104,(anonymous_3)
FN:138,(anonymous_4)
FN:139,(anonymous_5)
FN:150,(anonymous_6)
FN:154,(anonymous_7)
FN:179,(anonymous_8)
FN:183,(anonymous_9)
FNF:10
FNH:10
FNDA:18,(anonymous_0)
FNDA:15,(anonymous_1)
FNDA:5,(anonymous_2)
FNDA:3,(anonymous_3)
FNDA:2,(anonymous_4)
FNDA:1,(anonymous_5)
FNDA:6,(anonymous_6)
FNDA:3,(anonymous_7)
FNDA:2,(anonymous_8)
FNDA:2,(anonymous_9)
DA:3,1
DA:4,1
DA:5,1
DA:10,1
DA:14,18
DA:18,15
DA:20,15
DA:21,15
DA:24,15
DA:26,15
DA:51,15
DA:52,15
DA:66,15
DA:69,15
DA:71,15
DA:76,5
DA:77,5
DA:78,1
DA:81,4
DA:82,1
DA:85,3
DA:86,1
DA:89,2
DA:90,0
DA:94,2
DA:95,2
DA:96,2
DA:97,2
DA:99,2
DA:100,2
DA:101,2
DA:105,3
DA:106,3
DA:107,0
DA:110,3
DA:111,3
DA:112,1
DA:115,2
DA:116,2
DA:119,2
DA:122,2
DA:123,1
DA:126,1
DA:127,1
DA:128,1
DA:129,1
DA:130,1
DA:135,2
DA:139,2
DA:151,6
DA:155,3
DA:156,3
DA:158,1
DA:159,1
DA:163,2
DA:164,2
DA:166,1
DA:167,1
DA:171,1
DA:172,1
DA:173,0
DA:175,1
DA:180,2
DA:181,2
DA:183,2
DA:184,2
DA:185,1
DA:186,1
LF:68
LH:65
BRDA:55,0,0,15
BRDA:55,0,1,12
BRDA:59,1,0,15
BRDA:59,1,1,12
BRDA:77,2,0,1
BRDA:81,3,0,1
BRDA:81,4,0,4
BRDA:81,4,1,1
BRDA:85,5,0,1
BRDA:89,6,0,0
BRDA:106,7,0,0
BRDA:111,8,0,1
BRDA:122,9,0,1
BRDA:122,9,1,1
BRDA:126,10,0,1
BRDA:128,11,0,1
BRDA:146,12,0,1
BRDA:146,12,1,0
BRDA:156,13,0,1
BRDA:164,14,0,1
BRDA:172,15,0,0
BRDA:184,16,0,1
BRDA:184,17,0,2
BRDA:184,17,1,1
BRF:24
BRH:20
end_of_record
TN:
SF:src/types/game.ts
FN:8,(anonymous_0)
FN:18,(anonymous_1)
FN:26,(anonymous_2)
FNF:3
FNH:3
FNDA:2,(anonymous_0)
FNDA:2,(anonymous_1)
FNDA:2,(anonymous_2)
DA:8,2
DA:9,2
DA:10,2
DA:11,2
DA:12,2
DA:18,2
DA:19,2
DA:20,2
DA:21,2
DA:22,2
DA:23,2
DA:26,2
DA:27,2
DA:28,2
DA:29,2
DA:30,2
DA:83,2
LF:17
LH:17
BRDA:8,0,0,2
BRDA:8,0,1,2
BRDA:18,1,0,2
BRDA:18,1,1,2
BRDA:26,2,0,2
BRDA:26,2,1,2
BRF:6
BRH:6
end_of_record
TN:
SF:src/utils/constants.ts
FNF:0
FNH:0
DA:1,2
DA:5,2
DA:15,2
DA:25,2
LF:4
LH:4
BRF:0
BRH:0
end_of_record

================
File: server/src/services/__tests__/gameManager.test.ts
================
import { describe, expect, it, beforeEach, afterEach, jest } from '@jest/globals';
import { GameManager } from '../gameManager';
import { Player } from '../../types/player';
import { GamePhase, RobotColor, GameRules, MultiplayerGameState } from '../../types/game';

const mockPlayers: Player[] = [
  { id: 'player1', name: 'Player 1', roomId: '', score: 0, connected: true, isHost: false, lastConnected: new Date() },
  { id: 'player2', name: 'Player 2', roomId: '', score: 0, connected: true, isHost: false, lastConnected: new Date() },
  { id: 'player3', name: 'Player 3', roomId: '', score: 0, connected: true, isHost: false, lastConnected: new Date() }
];

const testRules: GameRules = {
  maxPlayers: 6,
  declarationTimeLimit: 5, // seconds
  solutionTimeLimit: 10,   // seconds
  minMoves: 1,
  maxMoves: 30,
  successPoints: 1,
  penaltyPoints: -1 // Note: Penalty logic is removed in GameManager, but rule exists
};

// Add dummy target positions and board IDs for constructor
const dummyTargetPositions = new Map<string, { x: number; y: number }>();
// Add enough targets for the default cards (assuming standard symbols/colors)
// Need R, G, B, Y for Triangle, Circle, Square, Hexagon + Vortex
dummyTargetPositions.set('R_TRIANGLE', { x: 1, y: 1 });
dummyTargetPositions.set('G_TRIANGLE', { x: 1, y: 2 });
dummyTargetPositions.set('B_TRIANGLE', { x: 1, y: 3 });
dummyTargetPositions.set('Y_TRIANGLE', { x: 1, y: 4 });
dummyTargetPositions.set('R_CIRCLE', { x: 2, y: 1 });
dummyTargetPositions.set('G_CIRCLE', { x: 2, y: 2 });
dummyTargetPositions.set('B_CIRCLE', { x: 2, y: 3 });
dummyTargetPositions.set('Y_CIRCLE', { x: 2, y: 4 });
dummyTargetPositions.set('R_SQUARE', { x: 3, y: 1 });
dummyTargetPositions.set('G_SQUARE', { x: 3, y: 2 });
dummyTargetPositions.set('B_SQUARE', { x: 3, y: 3 });
dummyTargetPositions.set('Y_SQUARE', { x: 3, y: 4 });
dummyTargetPositions.set('R_HEXAGON', { x: 4, y: 1 });
dummyTargetPositions.set('G_HEXAGON', { x: 4, y: 2 });
dummyTargetPositions.set('B_HEXAGON', { x: 4, y: 3 });
dummyTargetPositions.set('Y_HEXAGON', { x: 4, y: 4 });
dummyTargetPositions.set('VORTEX', { x: 8, y: 8 }); // Vortex target position
const dummyBoardPatternIds = ['A1', 'B2', 'C3', 'D4'];

// Helper to simulate a full round where at least one player declares and all fail
const simulateFailedRound = (manager: GameManager, players: Player[], rules: GameRules) => {
  const initialPhase = manager.getGameState().phase;
  if (initialPhase !== GamePhase.DECLARATION) {
    throw new Error(`simulateFailedRound called in wrong phase: ${initialPhase}`);
  }

  // Ensure at least one player declares to move to solution phase
  manager.declareMoves(players[0].id, 5); // Example declaration

  // End declaration phase timer
  jest.advanceTimersByTime(rules.declarationTimeLimit * 1000);

  let currentState = manager.getGameState();
  const order = currentState.declarationOrder;

  if (currentState.phase === GamePhase.SOLUTION && order && order.length > 0) {
    // Simulate each player in order failing
    const numAttempts = order.length; // Number of players who declared
    for (let i = 0; i < numAttempts; i++) {
       // Check if we are still in solution phase before advancing timer
       if (manager.getGameState().phase !== GamePhase.SOLUTION) {
           // Phase changed unexpectedly (e.g., game ended prematurely in test?)
           // console.warn(`Warning: Phase changed to ${manager.getGameState().phase} during failed round simulation (attempt ${i+1}/${numAttempts})`);
           break;
       }
       jest.advanceTimersByTime(rules.solutionTimeLimit * 1000);
    }
    // Add a tiny bit more time to ensure the last timer callback executes
    jest.advanceTimersByTime(1);
  } else if (currentState.phase === GamePhase.DECLARATION) {
      // This means no one declared OR the declaration timer immediately triggered the next round
      // (which shouldn't happen if someone declared before timer end)
      // console.warn("Warning: Skipped solution attempts in simulateFailedRound, phase was already DECLARATION after declaration timer.");
  } else {
      // console.warn(`Warning: Unexpected phase ${currentState.phase} after declaration timer in simulateFailedRound.`);
  }
};


describe('GameManager', () => {
  let gameManager: GameManager;

  beforeEach(() => {
    jest.useFakeTimers();
    // Clone players to avoid state leakage between tests
    const playersCopy = JSON.parse(JSON.stringify(mockPlayers));
    gameManager = new GameManager(playersCopy, dummyBoardPatternIds, dummyTargetPositions, testRules);
  });

  afterEach(() => {
    gameManager.cleanup(); // Ensure timers are cleared
    jest.useRealTimers();
  });

  describe('Game Initialization', () => {
    it('should initialize game with correct state', () => {
      const state = gameManager.getGameState();
      expect(state.phase).toBe(GamePhase.WAITING);
      expect(state.remainingCards).toBe(17); // Now CardDeck should initialize correctly
      expect(state.totalCards).toBe(17);
      expect(Object.keys(state.playerStates).length).toBe(mockPlayers.length);
    });

    it('should not start game with less than 2 players', () => {
      const singlePlayer = [mockPlayers[0]];
      const singlePlayerGame = new GameManager(singlePlayer, dummyBoardPatternIds, dummyTargetPositions, testRules);
      expect(() => singlePlayerGame.startGame(singlePlayer)).toThrow('Not enough players');
    });

    it('should start game successfully', () => {
      gameManager.startGame(mockPlayers); // Pass players array
      const state = gameManager.getGameState();
      expect(state.phase).toBe(GamePhase.WAITING); // startGame now sets phase to WAITING initially
      // Card draw is now explicit, so currentPlayer is not set yet
      expect(state.currentPlayer).toBeUndefined();
      expect(state.timer).toBe(0); // Timer doesn't start until first declaration
    });
  });

  describe('Declaration Phase', () => {
    beforeEach(() => {
      gameManager.startGame(mockPlayers);
      gameManager.handleDrawCard('player1'); // Explicitly draw card
    });

    it('should accept valid declarations', () => {
      gameManager.declareMoves('player1', 10);
      const state = gameManager.getGameState();
      expect(state.declarations['player1']).toBeDefined();
      expect(state.declarations['player1']?.moves).toBe(10);
    });

    it('should reject declarations outside of declaration phase', () => {
      // Player 1 declares, starting the timer
      gameManager.declareMoves('player1', 5);
      // Advance timer to end declaration phase
      jest.advanceTimersByTime(testRules.declarationTimeLimit * 1000 + 1); // Advance timer to end declaration phase
      expect(gameManager.getGameState().phase).toBe(GamePhase.SOLUTION); // Should be in solution phase now

      // Attempt to declare during solution phase
      expect(() => gameManager.declareMoves('player2', 8)).toThrow('Not in declaration phase');
    });

    it('should reject declarations with invalid move counts', () => {
      // Need to be in declaration phase to test this
      expect(() => gameManager.declareMoves('player1', 0)).toThrow(/Moves must be between/);
      expect(() => gameManager.declareMoves('player1', 31)).toThrow(/Moves must be between/);
    });

    it('should end declaration phase only when timer runs out', () => {
      // Player 1 declares, starting the timer
      gameManager.declareMoves('player1', 5);
      gameManager.declareMoves('player2', 8);
      // Still in declaration phase even if all declared
      expect(gameManager.getGameState().phase).toBe(GamePhase.DECLARATION);
      jest.advanceTimersByTime((testRules.declarationTimeLimit - 1) * 1000);
      // Still in declaration phase because timer hasn't ended
      expect(gameManager.getGameState().phase).toBe(GamePhase.DECLARATION);
      // Timer ends
      jest.advanceTimersByTime(1000 + 1); // Advance timer slightly more
      expect(gameManager.getGameState().phase).toBe(GamePhase.SOLUTION);
    });

    it('should sort declarations correctly (moves asc, timestamp asc)', () => {
      const p1Timestamp = Date.now();
      // Player 1 declares, starting the timer
      gameManager.declareMoves('player1', 10); // P1: 10 moves
      jest.advanceTimersByTime(100); // Simulate time passing

      const p2Timestamp = Date.now();
      gameManager.declareMoves('player2', 5);  // P2: 5 moves (earlier timestamp for 5)
      jest.advanceTimersByTime(100);

      const p3Timestamp = Date.now();
      gameManager.declareMoves('player3', 5);  // P3: 5 moves (later timestamp for 5)

      // End declaration phase
      jest.advanceTimersByTime(testRules.declarationTimeLimit * 1000 + 1); // Advance timer to end declaration phase

      const state = gameManager.getGameState();
      expect(state.phase).toBe(GamePhase.SOLUTION);
      expect(state.declarationOrder).toEqual(['player2', 'player3', 'player1']);
      expect(state.currentPlayer).toBe('player2'); // Player 2 has fewest moves and earliest timestamp
    });

     it('should handle no declarations', () => {
      // No one declares, advance time. Timer should not start.
      jest.advanceTimersByTime(testRules.declarationTimeLimit * 1000 + 1); // Advance time
      const state = gameManager.getGameState();
      // Phase remains DECLARATION because the timer never started
      expect(state.phase).toBe(GamePhase.DECLARATION);
      expect(state.declarationOrder).toBeUndefined(); // No order set
      expect(state.remainingCards).toBe(17); // Card was NOT skipped
    });

    it('should start declaration timer only after the first declaration', () => {
      // Player 1 declares
      gameManager.declareMoves('player1', 5);
      let state = gameManager.getGameState();
      // Timer should have started now
      expect(state.timer).toBe(testRules.declarationTimeLimit);
      // @ts-expect-error - Accessing private property for test verification
      expect(gameManager.timerInterval).toBeDefined();

      // Player 2 declares, timer should still be running from the first declaration
      const initialTimerValue = state.timer;
      jest.advanceTimersByTime(1000); // Advance time slightly
      gameManager.declareMoves('player2', 8);
      state = gameManager.getGameState();
      expect(state.timer).toBeLessThan(initialTimerValue); // Timer should have decreased
      // @ts-expect-error
      expect(gameManager.timerInterval).toBeDefined(); // Timer should still be the same interval

      // Advance timer to end declaration phase
      jest.advanceTimersByTime(testRules.declarationTimeLimit * 1000 + 1); // Advance remaining time + buffer
      state = gameManager.getGameState();
      expect(state.phase).toBe(GamePhase.SOLUTION); // Phase should change
    });

    it('should not start timer if no declarations are made', () => {
      // Advance time without any declarations
      jest.advanceTimersByTime(testRules.declarationTimeLimit * 1000 + 1); // Advance time
      const state = gameManager.getGameState();
      // Timer should not have started, phase should remain DECLARATION (or transition due to timeout if that logic existed)
      // Since the timer *only* starts on declaration now, the phase won't automatically change.
      // Let's verify the timer was never set.
      // @ts-expect-error - Accessing private property for test verification
      expect(gameManager.timerInterval).toBeUndefined();
      // The phase remains DECLARATION because the timer that calls endDeclarationPhase never started.
      // This might need adjustment depending on desired behavior when no one declares.
      // For now, we test that the timer *doesn't* start without a declaration.
      expect(state.phase).toBe(GamePhase.DECLARATION); // Phase remains unchanged without timer
    });
  });


  describe('Solution Phase & Round Transitions', () => {
     beforeEach(() => {
       gameManager.startGame(mockPlayers); // Pass players array
       gameManager.handleDrawCard('player1'); // Start first round
       // Setup declarations for consistent testing
       gameManager.declareMoves('player2', 5); // P2: 5 moves
       jest.advanceTimersByTime(100);
       gameManager.declareMoves('player1', 10); // P1: 10 moves
       jest.advanceTimersByTime(100);
       gameManager.declareMoves('player3', 5); // P3: 5 moves (later)
       // End declaration phase
       jest.advanceTimersByTime(testRules.declarationTimeLimit * 1000 + 1); // Add 1ms buffer
       // Expected order: P2, P3, P1
     });

     it('should transition player turns correctly on solution failure', () => {
       let state = gameManager.getGameState();
       expect(state.phase).toBe(GamePhase.SOLUTION);
       expect(state.currentPlayer).toBe('player2');

       // Simulate Player 2 failing
       jest.advanceTimersByTime(testRules.solutionTimeLimit * 1000 + 1); // Add 1ms buffer
       state = gameManager.getGameState();
       expect(state.phase).toBe(GamePhase.SOLUTION);
       expect(state.currentPlayer).toBe('player3'); // P3 is next (5 moves, later timestamp)

       // Simulate Player 3 failing
       jest.advanceTimersByTime(testRules.solutionTimeLimit * 1000 + 1); // Add 1ms buffer
       state = gameManager.getGameState();
       expect(state.phase).toBe(GamePhase.SOLUTION);
       expect(state.currentPlayer).toBe('player1'); // P1 is next (10 moves)

       // Simulate Player 1 failing
       jest.advanceTimersByTime(testRules.solutionTimeLimit * 1000 + 1); // Add 1ms buffer
       state = gameManager.getGameState();
       // All failed, should draw next card and start new declaration phase
       expect(state.phase).toBe(GamePhase.DECLARATION);
       expect(state.remainingCards).toBe(16);
     });

     it('should decrease remaining cards and return to declaration phase after a failed round', () => {
        const initialState = gameManager.getGameState(); // State is SOLUTION here
        expect(initialState.phase).toBe(GamePhase.SOLUTION);
        const initialCardCount = initialState.remainingCards; // Should be 17 (card drawn in beforeEach)

        // Simulate the round failing (P2 fails, P3 fails, P1 fails)
        jest.advanceTimersByTime(testRules.solutionTimeLimit * 1000 + 1); // P2 fails
        jest.advanceTimersByTime(testRules.solutionTimeLimit * 1000 + 1); // P3 fails
        jest.advanceTimersByTime(testRules.solutionTimeLimit * 1000 + 1); // P1 fails

        const finalState = gameManager.getGameState();

        // Check if phase returned to declaration for the next round
        expect(finalState.phase).toBe(GamePhase.DECLARATION);
        // Check card count AFTER transition (should be decremented)
        expect(finalState.remainingCards).toBe(16); // Check final state's card count
      });

     // TODO: Add tests for successful solution

  });


  describe('Game End Conditions', () => {
     it('should end game after last card is played (failed round)', () => {
       gameManager.startGame(mockPlayers); // Pass players array
       gameManager.handleDrawCard('player1'); // Start first round
       // Simulate 17 rounds ending in failure
       for (let i = 0; i < 17; i++) {
         const currentPhase = gameManager.getGameState().phase;
         if (currentPhase !== GamePhase.DECLARATION) {
             throw new Error(`Test setup error: Expected DECLARATION phase at round ${i+1}, got ${currentPhase}`);
         }
         // Use helper to simulate the round
         simulateFailedRound(gameManager, mockPlayers, testRules);
       }

       const state = gameManager.getGameState();
       expect(state.phase).toBe(GamePhase.FINISHED);
       expect(state.remainingCards).toBe(0);
     });

     it('should prevent actions after game end', () => {
       gameManager.startGame(mockPlayers); // Pass players array
       gameManager.handleDrawCard('player1'); // Start first round
       // Simulate 17 rounds ending in failure
       for (let i = 0; i < 17; i++) {
         if (gameManager.getGameState().phase !== GamePhase.DECLARATION) throw new Error(`Test setup error at round ${i+1}`);
         simulateFailedRound(gameManager, mockPlayers, testRules);
       }
       expect(gameManager.getGameState().phase).toBe(GamePhase.FINISHED); // Verify game ended

       // Try actions
       expect(() => {
         gameManager.declareMoves(mockPlayers[0].id, 5);
       }).toThrow('Not in declaration phase'); // Correct error

       expect(() => {
         gameManager.moveRobot(mockPlayers[0].id, RobotColor.RED, [{ x: 0, y: 0 }]);
       }).toThrow('Not in solution phase'); // Correct error
     });

     // TODO: Add test for game ending after successful solution on last card
  });


  describe('Timer Management', () => {
    beforeEach(() => {
      gameManager.startGame(mockPlayers); // Pass players array
      gameManager.handleDrawCard('player1'); // Start first round
    });

    it('should set solution timer correctly after declaration phase ends', () => {
      // Player 1 declares
      gameManager.declareMoves(mockPlayers[0].id, 5);

      // Advance timer to end declaration phase
      jest.advanceTimersByTime(testRules.declarationTimeLimit * 1000 + 1); // Add 1ms buffer

      // Check if phase is SOLUTION and timer is set correctly
      const state = gameManager.getGameState();
      expect(state.phase).toBe(GamePhase.SOLUTION);
      expect(state.currentPlayer).toBe(mockPlayers[0].id); // Player 1 should be current
      expect(state.timer).toBe(testRules.solutionTimeLimit);
    });

    it('should clean up timers on game end', () => {
       // Simulate 17 rounds ending in failure to reach FINISHED state
       for (let i = 0; i < 17; i++) {
         if (gameManager.getGameState().phase !== GamePhase.DECLARATION) throw new Error(`Test setup error at round ${i+1}`);
         simulateFailedRound(gameManager, mockPlayers, testRules);
       }
       const finalState = gameManager.getGameState();
       expect(finalState.phase).toBe(GamePhase.FINISHED);

       // Access internal timer to check (bit hacky, but useful for testing cleanup)
       // @ts-expect-error // Accessing private property for test
       const internalTimer = gameManager.timerInterval;
       expect(internalTimer).toBeUndefined();
     });

    // Skipping long running timer accuracy test for now
    it.skip('should maintain timer accuracy during long games', () => {
      for (let i = 0; i < 5; i++) {
        gameManager.declareMoves(mockPlayers[0].id, 5); // Need someone to declare
        jest.advanceTimersByTime(testRules.declarationTimeLimit * 500); // Half time
        const midState = gameManager.getGameState();
        // Timer calculation might have slight variance, check within a range
        expect(midState.timer).toBeCloseTo(testRules.declarationTimeLimit / 2, 0);
        jest.advanceTimersByTime(testRules.declarationTimeLimit * 500); // Rest of time
        // Simulate failure to move to next round
        if(gameManager.getGameState().phase === GamePhase.SOLUTION) {
            jest.advanceTimersByTime(testRules.solutionTimeLimit * 1000 + 1);
        }
      }
    });
  });

  describe('Score Management', () => {
    beforeEach(() => {
      gameManager.startGame(mockPlayers); // Pass players array
      gameManager.handleDrawCard('player1'); // Start first round
    });

    it('should not apply penalties for failed attempts', () => {
      // P1 declares 5, P2 declares 10
      gameManager.declareMoves('player1', 5);
      gameManager.declareMoves('player2', 10);
      jest.advanceTimersByTime(testRules.declarationTimeLimit * 1000 + 1); // End declaration + buffer

      // P1 attempts and fails
      expect(gameManager.getGameState().currentPlayer).toBe('player1');
      jest.advanceTimersByTime(testRules.solutionTimeLimit * 1000 + 1); // Add 1ms buffer
      // Player 1 fails, score should remain 0
      expect(gameManager.getGameState().playerStates['player1']?.score).toBe(0);

      // P2 attempts and fails
      expect(gameManager.getGameState().currentPlayer).toBe('player2');
      jest.advanceTimersByTime(testRules.solutionTimeLimit * 1000 + 1); // Add 1ms buffer
      // Player 2 fails, score should remain 0
      expect(gameManager.getGameState().playerStates['player2']?.score).toBe(0);

      // Round ends, check scores again (should remain 0)
      // No need for extra 1ms here, transition happens in failCurrentSolution
      expect(gameManager.getGameState().phase).toBe(GamePhase.DECLARATION);
      expect(gameManager.getGameState().playerStates['player1']?.score).toBe(0);
      expect(gameManager.getGameState().playerStates['player2']?.score).toBe(0);
      // Player 3 didn't attempt, score should be 0
      expect(gameManager.getGameState().playerStates['player3']?.score).toBe(0);
    });

    it('should maintain cumulative scores (assuming success logic existed)', () => {
       // This test is less meaningful without success logic,
       // but we can check that scores remain 0 after failed rounds.
       for (let round = 0; round < 2; round++) {
         if (gameManager.getGameState().phase !== GamePhase.DECLARATION) throw new Error(`Test setup error at round ${round+1}`);
         simulateFailedRound(gameManager, mockPlayers, testRules);
       }

       const state = gameManager.getGameState();
       mockPlayers.forEach(player => {
         const playerState = state.playerStates[player.id];
         expect(playerState?.score).toBe(0);
       });
     });

     // TODO: Add tests for score increase on successful solution

     it('should calculate rankings correctly at game end', () => {
       // Mock scores before ending the game
       // @ts-expect-error // Accessing private property for test setup
       gameManager.gameState.playerStates['player1'].score = 5;
       // @ts-expect-error
       gameManager.gameState.playerStates['player2'].score = 10;
       // @ts-expect-error
       gameManager.gameState.playerStates['player3'].score = 5; // Tie with player1

       // Force game end by setting remaining cards to 1 and simulating a failed round
       // @ts-expect-error
       gameManager.gameState.remainingCards = 1;
       simulateFailedRound(gameManager, mockPlayers, testRules);

       const state = gameManager.getGameState();
       expect(state.phase).toBe(GamePhase.FINISHED);
       expect(state.rankings).toBeDefined();
       expect(state.rankings).toEqual([
         { playerId: 'player2', score: 10, rank: 1 },
         { playerId: 'player1', score: 5, rank: 2 }, // Tied score, same rank
         { playerId: 'player3', score: 5, rank: 2 }, // Tied score, same rank
       ]);
     });
   });

});

================
File: server/coverage/lcov-report/services/gameManager.ts.html
================
<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for services/gameManager.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="../prettify.css" />
    <link rel="stylesheet" href="../base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="../favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(../sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="../index.html">All files</a> / <a href="index.html">services</a> gameManager.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">29.29% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>46/157</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">14.28% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>5/35</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">44.44% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>12/27</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">29.22% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>45/154</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line low'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a>
<a name='L36'></a><a href='#L36'>36</a>
<a name='L37'></a><a href='#L37'>37</a>
<a name='L38'></a><a href='#L38'>38</a>
<a name='L39'></a><a href='#L39'>39</a>
<a name='L40'></a><a href='#L40'>40</a>
<a name='L41'></a><a href='#L41'>41</a>
<a name='L42'></a><a href='#L42'>42</a>
<a name='L43'></a><a href='#L43'>43</a>
<a name='L44'></a><a href='#L44'>44</a>
<a name='L45'></a><a href='#L45'>45</a>
<a name='L46'></a><a href='#L46'>46</a>
<a name='L47'></a><a href='#L47'>47</a>
<a name='L48'></a><a href='#L48'>48</a>
<a name='L49'></a><a href='#L49'>49</a>
<a name='L50'></a><a href='#L50'>50</a>
<a name='L51'></a><a href='#L51'>51</a>
<a name='L52'></a><a href='#L52'>52</a>
<a name='L53'></a><a href='#L53'>53</a>
<a name='L54'></a><a href='#L54'>54</a>
<a name='L55'></a><a href='#L55'>55</a>
<a name='L56'></a><a href='#L56'>56</a>
<a name='L57'></a><a href='#L57'>57</a>
<a name='L58'></a><a href='#L58'>58</a>
<a name='L59'></a><a href='#L59'>59</a>
<a name='L60'></a><a href='#L60'>60</a>
<a name='L61'></a><a href='#L61'>61</a>
<a name='L62'></a><a href='#L62'>62</a>
<a name='L63'></a><a href='#L63'>63</a>
<a name='L64'></a><a href='#L64'>64</a>
<a name='L65'></a><a href='#L65'>65</a>
<a name='L66'></a><a href='#L66'>66</a>
<a name='L67'></a><a href='#L67'>67</a>
<a name='L68'></a><a href='#L68'>68</a>
<a name='L69'></a><a href='#L69'>69</a>
<a name='L70'></a><a href='#L70'>70</a>
<a name='L71'></a><a href='#L71'>71</a>
<a name='L72'></a><a href='#L72'>72</a>
<a name='L73'></a><a href='#L73'>73</a>
<a name='L74'></a><a href='#L74'>74</a>
<a name='L75'></a><a href='#L75'>75</a>
<a name='L76'></a><a href='#L76'>76</a>
<a name='L77'></a><a href='#L77'>77</a>
<a name='L78'></a><a href='#L78'>78</a>
<a name='L79'></a><a href='#L79'>79</a>
<a name='L80'></a><a href='#L80'>80</a>
<a name='L81'></a><a href='#L81'>81</a>
<a name='L82'></a><a href='#L82'>82</a>
<a name='L83'></a><a href='#L83'>83</a>
<a name='L84'></a><a href='#L84'>84</a>
<a name='L85'></a><a href='#L85'>85</a>
<a name='L86'></a><a href='#L86'>86</a>
<a name='L87'></a><a href='#L87'>87</a>
<a name='L88'></a><a href='#L88'>88</a>
<a name='L89'></a><a href='#L89'>89</a>
<a name='L90'></a><a href='#L90'>90</a>
<a name='L91'></a><a href='#L91'>91</a>
<a name='L92'></a><a href='#L92'>92</a>
<a name='L93'></a><a href='#L93'>93</a>
<a name='L94'></a><a href='#L94'>94</a>
<a name='L95'></a><a href='#L95'>95</a>
<a name='L96'></a><a href='#L96'>96</a>
<a name='L97'></a><a href='#L97'>97</a>
<a name='L98'></a><a href='#L98'>98</a>
<a name='L99'></a><a href='#L99'>99</a>
<a name='L100'></a><a href='#L100'>100</a>
<a name='L101'></a><a href='#L101'>101</a>
<a name='L102'></a><a href='#L102'>102</a>
<a name='L103'></a><a href='#L103'>103</a>
<a name='L104'></a><a href='#L104'>104</a>
<a name='L105'></a><a href='#L105'>105</a>
<a name='L106'></a><a href='#L106'>106</a>
<a name='L107'></a><a href='#L107'>107</a>
<a name='L108'></a><a href='#L108'>108</a>
<a name='L109'></a><a href='#L109'>109</a>
<a name='L110'></a><a href='#L110'>110</a>
<a name='L111'></a><a href='#L111'>111</a>
<a name='L112'></a><a href='#L112'>112</a>
<a name='L113'></a><a href='#L113'>113</a>
<a name='L114'></a><a href='#L114'>114</a>
<a name='L115'></a><a href='#L115'>115</a>
<a name='L116'></a><a href='#L116'>116</a>
<a name='L117'></a><a href='#L117'>117</a>
<a name='L118'></a><a href='#L118'>118</a>
<a name='L119'></a><a href='#L119'>119</a>
<a name='L120'></a><a href='#L120'>120</a>
<a name='L121'></a><a href='#L121'>121</a>
<a name='L122'></a><a href='#L122'>122</a>
<a name='L123'></a><a href='#L123'>123</a>
<a name='L124'></a><a href='#L124'>124</a>
<a name='L125'></a><a href='#L125'>125</a>
<a name='L126'></a><a href='#L126'>126</a>
<a name='L127'></a><a href='#L127'>127</a>
<a name='L128'></a><a href='#L128'>128</a>
<a name='L129'></a><a href='#L129'>129</a>
<a name='L130'></a><a href='#L130'>130</a>
<a name='L131'></a><a href='#L131'>131</a>
<a name='L132'></a><a href='#L132'>132</a>
<a name='L133'></a><a href='#L133'>133</a>
<a name='L134'></a><a href='#L134'>134</a>
<a name='L135'></a><a href='#L135'>135</a>
<a name='L136'></a><a href='#L136'>136</a>
<a name='L137'></a><a href='#L137'>137</a>
<a name='L138'></a><a href='#L138'>138</a>
<a name='L139'></a><a href='#L139'>139</a>
<a name='L140'></a><a href='#L140'>140</a>
<a name='L141'></a><a href='#L141'>141</a>
<a name='L142'></a><a href='#L142'>142</a>
<a name='L143'></a><a href='#L143'>143</a>
<a name='L144'></a><a href='#L144'>144</a>
<a name='L145'></a><a href='#L145'>145</a>
<a name='L146'></a><a href='#L146'>146</a>
<a name='L147'></a><a href='#L147'>147</a>
<a name='L148'></a><a href='#L148'>148</a>
<a name='L149'></a><a href='#L149'>149</a>
<a name='L150'></a><a href='#L150'>150</a>
<a name='L151'></a><a href='#L151'>151</a>
<a name='L152'></a><a href='#L152'>152</a>
<a name='L153'></a><a href='#L153'>153</a>
<a name='L154'></a><a href='#L154'>154</a>
<a name='L155'></a><a href='#L155'>155</a>
<a name='L156'></a><a href='#L156'>156</a>
<a name='L157'></a><a href='#L157'>157</a>
<a name='L158'></a><a href='#L158'>158</a>
<a name='L159'></a><a href='#L159'>159</a>
<a name='L160'></a><a href='#L160'>160</a>
<a name='L161'></a><a href='#L161'>161</a>
<a name='L162'></a><a href='#L162'>162</a>
<a name='L163'></a><a href='#L163'>163</a>
<a name='L164'></a><a href='#L164'>164</a>
<a name='L165'></a><a href='#L165'>165</a>
<a name='L166'></a><a href='#L166'>166</a>
<a name='L167'></a><a href='#L167'>167</a>
<a name='L168'></a><a href='#L168'>168</a>
<a name='L169'></a><a href='#L169'>169</a>
<a name='L170'></a><a href='#L170'>170</a>
<a name='L171'></a><a href='#L171'>171</a>
<a name='L172'></a><a href='#L172'>172</a>
<a name='L173'></a><a href='#L173'>173</a>
<a name='L174'></a><a href='#L174'>174</a>
<a name='L175'></a><a href='#L175'>175</a>
<a name='L176'></a><a href='#L176'>176</a>
<a name='L177'></a><a href='#L177'>177</a>
<a name='L178'></a><a href='#L178'>178</a>
<a name='L179'></a><a href='#L179'>179</a>
<a name='L180'></a><a href='#L180'>180</a>
<a name='L181'></a><a href='#L181'>181</a>
<a name='L182'></a><a href='#L182'>182</a>
<a name='L183'></a><a href='#L183'>183</a>
<a name='L184'></a><a href='#L184'>184</a>
<a name='L185'></a><a href='#L185'>185</a>
<a name='L186'></a><a href='#L186'>186</a>
<a name='L187'></a><a href='#L187'>187</a>
<a name='L188'></a><a href='#L188'>188</a>
<a name='L189'></a><a href='#L189'>189</a>
<a name='L190'></a><a href='#L190'>190</a>
<a name='L191'></a><a href='#L191'>191</a>
<a name='L192'></a><a href='#L192'>192</a>
<a name='L193'></a><a href='#L193'>193</a>
<a name='L194'></a><a href='#L194'>194</a>
<a name='L195'></a><a href='#L195'>195</a>
<a name='L196'></a><a href='#L196'>196</a>
<a name='L197'></a><a href='#L197'>197</a>
<a name='L198'></a><a href='#L198'>198</a>
<a name='L199'></a><a href='#L199'>199</a>
<a name='L200'></a><a href='#L200'>200</a>
<a name='L201'></a><a href='#L201'>201</a>
<a name='L202'></a><a href='#L202'>202</a>
<a name='L203'></a><a href='#L203'>203</a>
<a name='L204'></a><a href='#L204'>204</a>
<a name='L205'></a><a href='#L205'>205</a>
<a name='L206'></a><a href='#L206'>206</a>
<a name='L207'></a><a href='#L207'>207</a>
<a name='L208'></a><a href='#L208'>208</a>
<a name='L209'></a><a href='#L209'>209</a>
<a name='L210'></a><a href='#L210'>210</a>
<a name='L211'></a><a href='#L211'>211</a>
<a name='L212'></a><a href='#L212'>212</a>
<a name='L213'></a><a href='#L213'>213</a>
<a name='L214'></a><a href='#L214'>214</a>
<a name='L215'></a><a href='#L215'>215</a>
<a name='L216'></a><a href='#L216'>216</a>
<a name='L217'></a><a href='#L217'>217</a>
<a name='L218'></a><a href='#L218'>218</a>
<a name='L219'></a><a href='#L219'>219</a>
<a name='L220'></a><a href='#L220'>220</a>
<a name='L221'></a><a href='#L221'>221</a>
<a name='L222'></a><a href='#L222'>222</a>
<a name='L223'></a><a href='#L223'>223</a>
<a name='L224'></a><a href='#L224'>224</a>
<a name='L225'></a><a href='#L225'>225</a>
<a name='L226'></a><a href='#L226'>226</a>
<a name='L227'></a><a href='#L227'>227</a>
<a name='L228'></a><a href='#L228'>228</a>
<a name='L229'></a><a href='#L229'>229</a>
<a name='L230'></a><a href='#L230'>230</a>
<a name='L231'></a><a href='#L231'>231</a>
<a name='L232'></a><a href='#L232'>232</a>
<a name='L233'></a><a href='#L233'>233</a>
<a name='L234'></a><a href='#L234'>234</a>
<a name='L235'></a><a href='#L235'>235</a>
<a name='L236'></a><a href='#L236'>236</a>
<a name='L237'></a><a href='#L237'>237</a>
<a name='L238'></a><a href='#L238'>238</a>
<a name='L239'></a><a href='#L239'>239</a>
<a name='L240'></a><a href='#L240'>240</a>
<a name='L241'></a><a href='#L241'>241</a>
<a name='L242'></a><a href='#L242'>242</a>
<a name='L243'></a><a href='#L243'>243</a>
<a name='L244'></a><a href='#L244'>244</a>
<a name='L245'></a><a href='#L245'>245</a>
<a name='L246'></a><a href='#L246'>246</a>
<a name='L247'></a><a href='#L247'>247</a>
<a name='L248'></a><a href='#L248'>248</a>
<a name='L249'></a><a href='#L249'>249</a>
<a name='L250'></a><a href='#L250'>250</a>
<a name='L251'></a><a href='#L251'>251</a>
<a name='L252'></a><a href='#L252'>252</a>
<a name='L253'></a><a href='#L253'>253</a>
<a name='L254'></a><a href='#L254'>254</a>
<a name='L255'></a><a href='#L255'>255</a>
<a name='L256'></a><a href='#L256'>256</a>
<a name='L257'></a><a href='#L257'>257</a>
<a name='L258'></a><a href='#L258'>258</a>
<a name='L259'></a><a href='#L259'>259</a>
<a name='L260'></a><a href='#L260'>260</a>
<a name='L261'></a><a href='#L261'>261</a>
<a name='L262'></a><a href='#L262'>262</a>
<a name='L263'></a><a href='#L263'>263</a>
<a name='L264'></a><a href='#L264'>264</a>
<a name='L265'></a><a href='#L265'>265</a>
<a name='L266'></a><a href='#L266'>266</a>
<a name='L267'></a><a href='#L267'>267</a>
<a name='L268'></a><a href='#L268'>268</a>
<a name='L269'></a><a href='#L269'>269</a>
<a name='L270'></a><a href='#L270'>270</a>
<a name='L271'></a><a href='#L271'>271</a>
<a name='L272'></a><a href='#L272'>272</a>
<a name='L273'></a><a href='#L273'>273</a>
<a name='L274'></a><a href='#L274'>274</a>
<a name='L275'></a><a href='#L275'>275</a>
<a name='L276'></a><a href='#L276'>276</a>
<a name='L277'></a><a href='#L277'>277</a>
<a name='L278'></a><a href='#L278'>278</a>
<a name='L279'></a><a href='#L279'>279</a>
<a name='L280'></a><a href='#L280'>280</a>
<a name='L281'></a><a href='#L281'>281</a>
<a name='L282'></a><a href='#L282'>282</a>
<a name='L283'></a><a href='#L283'>283</a>
<a name='L284'></a><a href='#L284'>284</a>
<a name='L285'></a><a href='#L285'>285</a>
<a name='L286'></a><a href='#L286'>286</a>
<a name='L287'></a><a href='#L287'>287</a>
<a name='L288'></a><a href='#L288'>288</a>
<a name='L289'></a><a href='#L289'>289</a>
<a name='L290'></a><a href='#L290'>290</a>
<a name='L291'></a><a href='#L291'>291</a>
<a name='L292'></a><a href='#L292'>292</a>
<a name='L293'></a><a href='#L293'>293</a>
<a name='L294'></a><a href='#L294'>294</a>
<a name='L295'></a><a href='#L295'>295</a>
<a name='L296'></a><a href='#L296'>296</a>
<a name='L297'></a><a href='#L297'>297</a>
<a name='L298'></a><a href='#L298'>298</a>
<a name='L299'></a><a href='#L299'>299</a>
<a name='L300'></a><a href='#L300'>300</a>
<a name='L301'></a><a href='#L301'>301</a>
<a name='L302'></a><a href='#L302'>302</a>
<a name='L303'></a><a href='#L303'>303</a>
<a name='L304'></a><a href='#L304'>304</a>
<a name='L305'></a><a href='#L305'>305</a>
<a name='L306'></a><a href='#L306'>306</a>
<a name='L307'></a><a href='#L307'>307</a>
<a name='L308'></a><a href='#L308'>308</a>
<a name='L309'></a><a href='#L309'>309</a>
<a name='L310'></a><a href='#L310'>310</a>
<a name='L311'></a><a href='#L311'>311</a>
<a name='L312'></a><a href='#L312'>312</a>
<a name='L313'></a><a href='#L313'>313</a>
<a name='L314'></a><a href='#L314'>314</a>
<a name='L315'></a><a href='#L315'>315</a>
<a name='L316'></a><a href='#L316'>316</a>
<a name='L317'></a><a href='#L317'>317</a>
<a name='L318'></a><a href='#L318'>318</a>
<a name='L319'></a><a href='#L319'>319</a>
<a name='L320'></a><a href='#L320'>320</a>
<a name='L321'></a><a href='#L321'>321</a>
<a name='L322'></a><a href='#L322'>322</a>
<a name='L323'></a><a href='#L323'>323</a>
<a name='L324'></a><a href='#L324'>324</a>
<a name='L325'></a><a href='#L325'>325</a>
<a name='L326'></a><a href='#L326'>326</a>
<a name='L327'></a><a href='#L327'>327</a>
<a name='L328'></a><a href='#L328'>328</a>
<a name='L329'></a><a href='#L329'>329</a>
<a name='L330'></a><a href='#L330'>330</a>
<a name='L331'></a><a href='#L331'>331</a>
<a name='L332'></a><a href='#L332'>332</a>
<a name='L333'></a><a href='#L333'>333</a>
<a name='L334'></a><a href='#L334'>334</a>
<a name='L335'></a><a href='#L335'>335</a>
<a name='L336'></a><a href='#L336'>336</a>
<a name='L337'></a><a href='#L337'>337</a>
<a name='L338'></a><a href='#L338'>338</a>
<a name='L339'></a><a href='#L339'>339</a>
<a name='L340'></a><a href='#L340'>340</a>
<a name='L341'></a><a href='#L341'>341</a>
<a name='L342'></a><a href='#L342'>342</a>
<a name='L343'></a><a href='#L343'>343</a>
<a name='L344'></a><a href='#L344'>344</a>
<a name='L345'></a><a href='#L345'>345</a>
<a name='L346'></a><a href='#L346'>346</a>
<a name='L347'></a><a href='#L347'>347</a>
<a name='L348'></a><a href='#L348'>348</a>
<a name='L349'></a><a href='#L349'>349</a>
<a name='L350'></a><a href='#L350'>350</a>
<a name='L351'></a><a href='#L351'>351</a>
<a name='L352'></a><a href='#L352'>352</a>
<a name='L353'></a><a href='#L353'>353</a>
<a name='L354'></a><a href='#L354'>354</a>
<a name='L355'></a><a href='#L355'>355</a>
<a name='L356'></a><a href='#L356'>356</a>
<a name='L357'></a><a href='#L357'>357</a>
<a name='L358'></a><a href='#L358'>358</a>
<a name='L359'></a><a href='#L359'>359</a>
<a name='L360'></a><a href='#L360'>360</a>
<a name='L361'></a><a href='#L361'>361</a>
<a name='L362'></a><a href='#L362'>362</a>
<a name='L363'></a><a href='#L363'>363</a>
<a name='L364'></a><a href='#L364'>364</a>
<a name='L365'></a><a href='#L365'>365</a>
<a name='L366'></a><a href='#L366'>366</a>
<a name='L367'></a><a href='#L367'>367</a>
<a name='L368'></a><a href='#L368'>368</a></td><td class="line-coverage quiet"><span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">36x</span>
<span class="cline-any cline-yes">36x</span>
<span class="cline-any cline-yes">36x</span>
<span class="cline-any cline-yes">36x</span>
<span class="cline-any cline-yes">36x</span>
<span class="cline-any cline-yes">36x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">36x</span>
<span class="cline-any cline-yes">36x</span>
<span class="cline-any cline-yes">76x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">36x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">19x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">19x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">19x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-yes">10x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-yes">51x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">34x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-yes">51x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">51x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">17x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">59x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">37x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">import { EventEmitter } from 'events';
import { Card, Declaration, GamePhase, GameRules, MultiplayerGameState, PlayerGameState, Position, RobotColor, DEFAULT_GAME_RULES, TargetSymbol } from '../types/game';
import { Player } from '../types/player';
import { CardDeck } from './cardDeck'; // Import CardDeck
import { ROBOT_COLORS } from '../utils/constants'; // Import ROBOT_COLORS
&nbsp;
// Define TargetPositions type locally or import if defined elsewhere
type TargetPositions = Map&lt;string, Position&gt;;
// 仮のロボット初期位置 (本来はボード生成時に決定)
const INITIAL_ROBOT_POSITIONS: Record&lt;RobotColor, Position&gt; = {
  [RobotColor.RED]: { x: 1, y: 1 },
  [RobotColor.BLUE]: { x: 14, y: 1 },
  [RobotColor.GREEN]: { x: 1, y: 14 },
  [RobotColor.YELLOW]: { x: 14, y: 14 },
};
&nbsp;
export class GameManager extends EventEmitter { // EventEmitter を継承
  private gameState: MultiplayerGameState;
  private cardDeck: CardDeck; // Add cardDeck property
  private rules: GameRules;
  private players: Player[];
  private timerInterval?: NodeJS.Timeout;
  private boardPatternIds: string[];
  // private penaltyApplied: Set&lt;string&gt;; // No longer needed with the new rule
&nbsp;
  constructor(players: Player[], boardPatternIds: string[], targetPositions: TargetPositions, rules: GameRules = <span class="branch-0 cbranch-no" title="branch not covered" >DEFAULT_GAME_RULES)</span> {
    super();
    this.rules = rules;
    this.players = players;
    this.boardPatternIds = boardPatternIds;
    this.cardDeck = new CardDeck(targetPositions); // Create CardDeck instance
    this.gameState = this.initializeGameState();
  }
&nbsp;
  private initializeGameState(): MultiplayerGameState {
    const playerStates: Record&lt;string, PlayerGameState&gt; = {}; // Initialize as empty object
    this.players.forEach(player =&gt; {
      playerStates[player.id] = { // Use object assignment
        score: 0,
        declarations: [],
        isReady: false
      };
    });
&nbsp;
    return {
      phase: GamePhase.WAITING, // Start in WAITING phase
      currentCard: undefined, // No card initially
      remainingCards: this.cardDeck.getRemaining(), // Get from cardDeck
      totalCards: this.cardDeck.getTotalCards(), // Get from cardDeck
      declarations: {}, // Initialize as empty object
      playerStates,
      timer: 0,
      timerStartedAt: Date.now(), // Initialize with a value
      robotPositions: { ...INITIAL_ROBOT_POSITIONS }, // Use initial positions defined above
      moveHistory: [],
      boardPatternIds: this.boardPatternIds
    };
<span class="cstat-no" title="statement not covered" >    console.log(`Card deck initialized with ${this.gameState.totalCards} cards.`);</span>
  }
&nbsp;
  // Add players parameter to startGame
  public startGame(players: Player[]): void {
    // Update internal players list
    this.players = players;
&nbsp;
    <span class="missing-if-branch" title="if path not taken" >I</span>if (this.gameState.phase !== GamePhase.WAITING) {
<span class="cstat-no" title="statement not covered" >      throw new Error('Game has already started');</span>
    }
&nbsp;
    if (this.players.length &lt; 2) {
      throw new Error('Not enough players');
    }
&nbsp;
    // Set initial robot positions
    this.gameState.robotPositions = { ...INITIAL_ROBOT_POSITIONS };
&nbsp;
    // Set phase to WAITING, don't draw card yet
    this.gameState.phase = GamePhase.WAITING;
    this.gameState.currentCard = undefined; // Ensure no card is set initially
    this.gameState.remainingCards = this.cardDeck.getRemaining(); // Update remaining cards count
&nbsp;
    console.log("Game started. Phase set to WAITING.");
    this.emit('gameStateUpdated', this.getGameState()); // Emit the initial state for WAITING
  }
&nbsp;
  private <span class="fstat-no" title="function not covered" >startDeclarationPhase(</span>): void {
<span class="cstat-no" title="statement not covered" >    this.cleanup(); </span>// Clear any existing timers
<span class="cstat-no" title="statement not covered" >    this.gameState.phase = GamePhase.DECLARATION;</span>
<span class="cstat-no" title="statement not covered" >    this.gameState.declarations = {}; </span>// Use object assignment
<span class="cstat-no" title="statement not covered" >    this.gameState.timer = this.rules.declarationTimeLimit;</span>
<span class="cstat-no" title="statement not covered" >    this.gameState.timerStartedAt = Date.now();</span>
    // this.penaltyApplied.clear(); // No longer needed
&nbsp;
    // Timer is now started in declareMoves when the first declaration is made
<span class="cstat-no" title="statement not covered" >    this.emit('gameStateUpdated', this.getGameState()); </span>// 状態更新を通知
  }
&nbsp;
  private <span class="fstat-no" title="function not covered" >startTimer(</span>callback: () =&gt; void, duration: number): void {
<span class="cstat-no" title="statement not covered" >    this.cleanup(); </span>// Ensure no duplicate timers
&nbsp;
<span class="cstat-no" title="statement not covered" >    <span class="missing-if-branch" title="if path not taken" >I</span>if (this.gameState.phase === GamePhase.FINISHED) {</span>
<span class="cstat-no" title="statement not covered" >      return; </span>// Don't start timers if game is finished
    }
&nbsp;
<span class="cstat-no" title="statement not covered" >    this.gameState.timer = duration;</span>
<span class="cstat-no" title="statement not covered" >    this.gameState.timerStartedAt = Date.now();</span>
&nbsp;
<span class="cstat-no" title="statement not covered" >    this.timerInterval = setInterval(<span class="fstat-no" title="function not covered" >() =</span>&gt; {</span>
      const currentTime = <span class="cstat-no" title="statement not covered" >Date.now();</span>
      const startTime = <span class="cstat-no" title="statement not covered" >this.gameState.timerStartedAt;</span>
      // Calculate elapsed time in seconds
      const elapsed = <span class="cstat-no" title="statement not covered" >Math.floor((currentTime - startTime) / 1000);</span>
      const remaining = <span class="cstat-no" title="statement not covered" >Math.max(0, duration - elapsed);</span>
&nbsp;
      // Update timer only if it changed to avoid unnecessary updates
      const timerChanged = <span class="cstat-no" title="statement not covered" >this.gameState.timer !== remaining;</span>
<span class="cstat-no" title="statement not covered" >      <span class="missing-if-branch" title="if path not taken" >I</span>if (timerChanged) {</span>
<span class="cstat-no" title="statement not covered" >        this.gameState.timer = remaining;</span>
<span class="cstat-no" title="statement not covered" >        this.emit('gameStateUpdated', this.getGameState()); </span>// タイマー更新も通知
      }
&nbsp;
<span class="cstat-no" title="statement not covered" >      <span class="missing-if-branch" title="if path not taken" >I</span>if (remaining === 0) {</span>
<span class="cstat-no" title="statement not covered" >        this.cleanup(); </span>// Clear interval when timer reaches 0
<span class="cstat-no" title="statement not covered" >        callback(); </span>// Execute the callback (e.g., end phase) - callback内でemitされる
      }
    }, 1000); // Check every second
  }
&nbsp;
  // New method to handle the explicit card draw request
  public handleDrawCard(playerId: string): void {
    // Only allow drawing if in the correct phase and maybe only by the host? (Decide on rule)
    // For now, allow any player to trigger the first draw if in WAITING phase.
    <span class="missing-if-branch" title="if path not taken" >I</span>if (this.gameState.phase !== GamePhase.WAITING) {
<span class="cstat-no" title="statement not covered" >      console.warn(`Player ${playerId} attempted to draw card in incorrect phase: ${this.gameState.phase}`);</span>
      // Optionally throw an error or just ignore
<span class="cstat-no" title="statement not covered" >      return;</span>
    }
&nbsp;
    const card = this.cardDeck.drawNext();
    if (!card) {
      console.error("Failed to draw the first card even when requested.");
      this.endGame(); // End game if no cards
      return;
    }
&nbsp;
<span class="cstat-no" title="statement not covered" >    this.gameState.currentCard = card;</span>
<span class="cstat-no" title="statement not covered" >    this.gameState.remainingCards = this.cardDeck.getRemaining();</span>
&nbsp;
<span class="cstat-no" title="statement not covered" >    console.log(`Card drawn by ${playerId}. Starting declaration phase.`);</span>
    // Now start the declaration phase
<span class="cstat-no" title="statement not covered" >    this.startDeclarationPhase();</span>
    // gameStateUpdated is emitted within startDeclarationPhase
  }
&nbsp;
  public declareMoves(playerId: string, moves: number): void {
    if (this.gameState.phase !== GamePhase.DECLARATION) {
      throw new Error('Not in declaration phase');
    }
&nbsp;
<span class="cstat-no" title="statement not covered" >    <span class="missing-if-branch" title="if path not taken" >I</span>if (moves &lt; this.rules.minMoves || moves &gt; this.rules.maxMoves) {</span>
<span class="cstat-no" title="statement not covered" >      throw new Error(`Moves must be between ${this.rules.minMoves} and ${this.rules.maxMoves}`);</span>
    }
&nbsp;
    const declaration: Declaration = <span class="cstat-no" title="statement not covered" >{</span>
      playerId,
      moves,
      timestamp: Date.now()
    };
&nbsp;
<span class="cstat-no" title="statement not covered" >    this.gameState.declarations[playerId] = declaration; </span>// Use object assignment
<span class="cstat-no" title="statement not covered" >    this.emit('gameStateUpdated', this.getGameState()); </span>// 宣言追加を通知
&nbsp;
    // Start the declaration timer only when the *first* player makes a declaration
<span class="cstat-no" title="statement not covered" >    <span class="missing-if-branch" title="if path not taken" >I</span>if (Object.keys(this.gameState.declarations).length === 1) {</span>
<span class="cstat-no" title="statement not covered" >      console.log("First declaration received. Starting declaration timer.");</span>
<span class="cstat-no" title="statement not covered" >      this.startTimer(<span class="fstat-no" title="function not covered" >() =</span>&gt; {</span>
<span class="cstat-no" title="statement not covered" >        this.endDeclarationPhase();</span>
      }, this.rules.declarationTimeLimit);
    }
  }
  private <span class="fstat-no" title="function not covered" >endDeclarationPhase(</span>): void {
<span class="cstat-no" title="statement not covered" >    this.cleanup(); </span>// Clear declaration timer
&nbsp;
    // 1. Collect valid declarations
    const validDeclarations = <span class="cstat-no" title="statement not covered" >Object.values(this.gameState.declarations);</span> // Use Object.values
&nbsp;
    // 2. Sort declarations: ascending moves, then ascending timestamp
<span class="cstat-no" title="statement not covered" >    validDeclarations.sort(<span class="fstat-no" title="function not covered" >(a</span>, b) =&gt; {</span>
<span class="cstat-no" title="statement not covered" >      <span class="missing-if-branch" title="if path not taken" >I</span>if (a.moves !== b.moves) {</span>
<span class="cstat-no" title="statement not covered" >        return a.moves - b.moves;</span>
      }
<span class="cstat-no" title="statement not covered" >      return a.timestamp - b.timestamp;</span>
    });
&nbsp;
    // 3. Set the declaration order
<span class="cstat-no" title="statement not covered" >    this.gameState.declarationOrder = validDeclarations.map(<span class="fstat-no" title="function not covered" >d </span>=&gt; <span class="cstat-no" title="statement not covered" >d.playerId)</span>;</span>
&nbsp;
    // 4. Determine the next player and phase
<span class="cstat-no" title="statement not covered" >    if (this.gameState.declarationOrder.length &gt; 0) {</span>
      // If there are valid declarations, start the solution phase for the first player
<span class="cstat-no" title="statement not covered" >      this.gameState.currentPlayer = this.gameState.declarationOrder[0];</span>
<span class="cstat-no" title="statement not covered" >      this.startSolutionPhase();</span>
    } else {
      // If no one made a valid declaration, draw the next card
<span class="cstat-no" title="statement not covered" >      this.proceedToNextRound(); </span>// Use renamed method
    }
<span class="cstat-no" title="statement not covered" >    this.emit('gameStateUpdated', this.getGameState()); </span>// フェーズ終了/開始を通知
  }
&nbsp;
  private <span class="fstat-no" title="function not covered" >startSolutionPhase(</span>): void {
<span class="cstat-no" title="statement not covered" >    this.cleanup(); </span>// Clear any previous timers
<span class="cstat-no" title="statement not covered" >    this.gameState.phase = GamePhase.SOLUTION;</span>
<span class="cstat-no" title="statement not covered" >    this.gameState.moveHistory = []; </span>// Clear move history for the new attempt
<span class="cstat-no" title="statement not covered" >    this.gameState.timer = this.rules.solutionTimeLimit;</span>
<span class="cstat-no" title="statement not covered" >    this.gameState.timerStartedAt = Date.now();</span>
&nbsp;
    // Start timer for the solution attempt
<span class="cstat-no" title="statement not covered" >    this.startTimer(<span class="fstat-no" title="function not covered" >() =</span>&gt; {</span>
<span class="cstat-no" title="statement not covered" >      this.failCurrentSolution(); </span>// Player fails if timer runs out - failCurrentSolution 内で emit される
    }, this.rules.solutionTimeLimit);
<span class="cstat-no" title="statement not covered" >    this.emit('gameStateUpdated', this.getGameState()); </span>// フェーズ開始を通知
  }
&nbsp;
  public <span class="fstat-no" title="function not covered" >moveRobot(</span>playerId: string, robotColor: RobotColor, positions: Position[]): void {
<span class="cstat-no" title="statement not covered" >    <span class="missing-if-branch" title="if path not taken" >I</span>if (this.gameState.phase !== GamePhase.SOLUTION) {</span>
<span class="cstat-no" title="statement not covered" >      throw new Error('Not in solution phase');</span>
    }
&nbsp;
<span class="cstat-no" title="statement not covered" >    <span class="missing-if-branch" title="if path not taken" >I</span>if (playerId !== this.gameState.currentPlayer) {</span>
<span class="cstat-no" title="statement not covered" >      throw new Error('Not your turn');</span>
    }
&nbsp;
    const declaration = <span class="cstat-no" title="statement not covered" >this.gameState.declarations[playerId];</span> // Use object access
<span class="cstat-no" title="statement not covered" >    <span class="missing-if-branch" title="if path not taken" >I</span>if (!declaration) {</span>
      // This should ideally not happen if logic is correct
<span class="cstat-no" title="statement not covered" >      throw new Error('No declaration found for player');</span>
    }
&nbsp;
<span class="cstat-no" title="statement not covered" >    <span class="missing-if-branch" title="if path not taken" >I</span>if (positions.length &gt; declaration.moves) {</span>
<span class="cstat-no" title="statement not covered" >      throw new Error('Too many moves');</span>
    }
&nbsp;
    // Record the move
<span class="cstat-no" title="statement not covered" >    this.gameState.moveHistory.push({</span>
      robotColor,
      positions,
      timestamp: Date.now()
    });
&nbsp;
<span class="cstat-no" title="statement not covered" >    this.emit('gameStateUpdated', this.getGameState()); </span>// 移動記録を通知
&nbsp;
    // Check if the move achieves the goal
<span class="cstat-no" title="statement not covered" >    <span class="missing-if-branch" title="if path not taken" >I</span>if (this.checkGoal()) {</span>
<span class="cstat-no" title="statement not covered" >      this.successCurrentSolution(); </span>// この中で emit される
    }
    // If not goal, player continues their turn until timer runs out or they succeed
  }
&nbsp;
  private <span class="fstat-no" title="function not covered" >checkGoal(</span>): boolean {
    // TODO: Implement actual goal checking logic based on currentCard and robotPositions
    // For now, assume it always fails to test other logic paths
<span class="cstat-no" title="statement not covered" >    return false;</span>
  }
&nbsp;
  private <span class="fstat-no" title="function not covered" >successCurrentSolution(</span>): void {
<span class="cstat-no" title="statement not covered" >    this.cleanup(); </span>// Stop solution timer
&nbsp;
    const currentPlayer = <span class="cstat-no" title="statement not covered" >this.gameState.currentPlayer;</span>
<span class="cstat-no" title="statement not covered" >    <span class="missing-if-branch" title="if path not taken" >I</span>if (currentPlayer) {</span>
      const playerState = <span class="cstat-no" title="statement not covered" >this.gameState.playerStates[currentPlayer];</span> // Use object access
<span class="cstat-no" title="statement not covered" >      <span class="missing-if-branch" title="if path not taken" >I</span>if (playerState) {</span>
<span class="cstat-no" title="statement not covered" >        playerState.score += this.rules.successPoints; </span>// Award points
      }
    }
&nbsp;
    // Move to the next card/round
<span class="cstat-no" title="statement not covered" >    this.proceedToNextRound();</span>
<span class="cstat-no" title="statement not covered" >    this.emit('gameStateUpdated', this.getGameState()); </span>// 成功状態を通知
  }
&nbsp;
  private <span class="fstat-no" title="function not covered" >failCurrentSolution(</span>): void {
<span class="cstat-no" title="statement not covered" >    this.cleanup(); </span>// Stop solution timer
&nbsp;
    const currentPlayerId = <span class="cstat-no" title="statement not covered" >this.gameState.currentPlayer;</span>
<span class="cstat-no" title="statement not covered" >    <span class="missing-if-branch" title="if path not taken" >I</span>if (!currentPlayerId) {</span>
      // Should not happen in this phase, but handle defensively
<span class="cstat-no" title="statement not covered" >      this.proceedToNextRound(); </span>// Use renamed method
<span class="cstat-no" title="statement not covered" >      return;</span>
    }
&nbsp;
    // Remove the current player from the declaration order
    // Penalty is no longer applied based on feedback
<span class="cstat-no" title="statement not covered" >    <span class="missing-if-branch" title="if path not taken" >I</span>if (this.gameState.declarationOrder) {</span>
<span class="cstat-no" title="statement not covered" >      this.gameState.declarationOrder = this.gameState.declarationOrder.filter(<span class="fstat-no" title="function not covered" >id </span>=&gt; <span class="cstat-no" title="statement not covered" >id !== currentPlayerId)</span>;</span>
    } // Add missing closing bracket
&nbsp;
    // Check if there are remaining players in the order
<span class="cstat-no" title="statement not covered" >    if (this.gameState.declarationOrder &amp;&amp; this.gameState.declarationOrder.length &gt; 0) {</span>
      // Move to the next player in the order
<span class="cstat-no" title="statement not covered" >      this.gameState.currentPlayer = this.gameState.declarationOrder[0];</span>
<span class="cstat-no" title="statement not covered" >      this.startSolutionPhase(); </span>// この中で emit される
    } else {
      // No more players left to attempt, proceed to the next round/card
<span class="cstat-no" title="statement not covered" >      this.proceedToNextRound();</span>
    }
<span class="cstat-no" title="statement not covered" >    this.emit('gameStateUpdated', this.getGameState()); </span>// 失敗状態/次のターン開始を通知
  }
&nbsp;
  // moveToNextPlayer method removed as its logic is now handled within failCurrentSolution
&nbsp;
  // Renamed from drawNextCard to avoid confusion with handleDrawCard
  private <span class="fstat-no" title="function not covered" >proceedToNextRound(</span>): void {
    const nextCard = <span class="cstat-no" title="statement not covered" >this.cardDeck.drawNext();</span>
&nbsp;
<span class="cstat-no" title="statement not covered" >    if (nextCard) {</span>
<span class="cstat-no" title="statement not covered" >      this.gameState.currentCard = nextCard;</span>
<span class="cstat-no" title="statement not covered" >      this.gameState.remainingCards = this.cardDeck.getRemaining();</span>
<span class="cstat-no" title="statement not covered" >      this.gameState.declarations = {};</span>
<span class="cstat-no" title="statement not covered" >      this.gameState.currentPlayer = undefined;</span>
<span class="cstat-no" title="statement not covered" >      this.gameState.declarationOrder = undefined;</span>
<span class="cstat-no" title="statement not covered" >      this.gameState.moveHistory = [];</span>
<span class="cstat-no" title="statement not covered" >      this.startDeclarationPhase(); </span>// Start declaration for the new card
<span class="cstat-no" title="statement not covered" >      console.log(`Proceeding to next round. Remaining cards: ${this.gameState.remainingCards}.`);</span>
    } else {
<span class="cstat-no" title="statement not covered" >      console.log("No more cards left in the deck. Ending game.");</span>
<span class="cstat-no" title="statement not covered" >      this.endGame();</span>
    }
    // State update emitted within startDeclarationPhase or endGame
  }
&nbsp;
  private endGame(): void {
    this.cleanup(); // Clear any running timers
    this.gameState.phase = GamePhase.FINISHED;
&nbsp;
    // Calculate final rankings
    const playerScores = Object.entries(this.gameState.playerStates) // Use Object.entries
      .map(([playerId, state]) =&gt; ({ playerId, score: state.score }));
&nbsp;
    // Sort players by score descending
    playerScores.sort((a, b) =&gt; b.score - a.score);
&nbsp;
    // Assign ranks (handle ties)
    let rank = 1;
    this.gameState.rankings = playerScores.map((player, index) =&gt; {
      <span class="missing-if-branch" title="if path not taken" >I</span>if (index &gt; 0 &amp;&amp; player.score &lt; playerScores[index - 1].score) {
<span class="cstat-no" title="statement not covered" >        rank = index + 1;</span>
      }
      return { ...player, rank };
    });
    this.emit('gameStateUpdated', this.getGameState()); // ゲーム終了状態を通知
  }
&nbsp;
  public getGameState(): MultiplayerGameState {
    // Return a copy to prevent direct modification
    // Deep copy might be needed if nested objects are mutable, but Records help here.
    // Consider using structuredClone for a true deep copy if necessary.
    return JSON.parse(JSON.stringify(this.gameState)); // Simple deep copy for now
  }
&nbsp;
  // Centralized cleanup for timers
  public cleanup(): void {
    <span class="missing-if-branch" title="if path not taken" >I</span>if (this.timerInterval) {
<span class="cstat-no" title="statement not covered" >      clearInterval(this.timerInterval);</span>
<span class="cstat-no" title="statement not covered" >      this.timerInterval = undefined;</span>
    }
  }
}
&nbsp;</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2025-04-05T05:09:52.757Z
            </div>
        <script src="../prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="../sorter.js"></script>
        <script src="../block-navigation.js"></script>
    </body>
</html>

================
File: server/coverage/lcov-report/services/index.html
================
<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for services</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="../prettify.css" />
    <link rel="stylesheet" href="../base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="../favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(../sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="../index.html">All files</a> services</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">52.94% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>144/272</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">44.11% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>30/68</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">65.95% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>31/47</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">52.45% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>139/265</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line medium'></div>
    <div class="pad1">
<table class="coverage-summary">
<thead>
<tr>
   <th data-col="file" data-fmt="html" data-html="true" class="file">File</th>
   <th data-col="pic" data-type="number" data-fmt="html" data-html="true" class="pic"></th>
   <th data-col="statements" data-type="number" data-fmt="pct" class="pct">Statements</th>
   <th data-col="statements_raw" data-type="number" data-fmt="html" class="abs"></th>
   <th data-col="branches" data-type="number" data-fmt="pct" class="pct">Branches</th>
   <th data-col="branches_raw" data-type="number" data-fmt="html" class="abs"></th>
   <th data-col="functions" data-type="number" data-fmt="pct" class="pct">Functions</th>
   <th data-col="functions_raw" data-type="number" data-fmt="html" class="abs"></th>
   <th data-col="lines" data-type="number" data-fmt="pct" class="pct">Lines</th>
   <th data-col="lines_raw" data-type="number" data-fmt="html" class="abs"></th>
</tr>
</thead>
<tbody><tr>
	<td class="file medium" data-value="cardDeck.ts"><a href="cardDeck.ts.html">cardDeck.ts</a></td>
	<td data-value="68.88" class="pic medium">
	<div class="chart"><div class="cover-fill" style="width: 68%"></div><div class="cover-empty" style="width: 32%"></div></div>
	</td>
	<td data-value="68.88" class="pct medium">68.88%</td>
	<td data-value="45" class="abs medium">31/45</td>
	<td data-value="55.55" class="pct medium">55.55%</td>
	<td data-value="9" class="abs medium">5/9</td>
	<td data-value="90" class="pct high">90%</td>
	<td data-value="10" class="abs high">9/10</td>
	<td data-value="67.44" class="pct medium">67.44%</td>
	<td data-value="43" class="abs medium">29/43</td>
	</tr>

<tr>
	<td class="file low" data-value="gameManager.ts"><a href="gameManager.ts.html">gameManager.ts</a></td>
	<td data-value="29.29" class="pic low">
	<div class="chart"><div class="cover-fill" style="width: 29%"></div><div class="cover-empty" style="width: 71%"></div></div>
	</td>
	<td data-value="29.29" class="pct low">29.29%</td>
	<td data-value="157" class="abs low">46/157</td>
	<td data-value="14.28" class="pct low">14.28%</td>
	<td data-value="35" class="abs low">5/35</td>
	<td data-value="44.44" class="pct low">44.44%</td>
	<td data-value="27" class="abs low">12/27</td>
	<td data-value="29.22" class="pct low">29.22%</td>
	<td data-value="154" class="abs low">45/154</td>
	</tr>

<tr>
	<td class="file high" data-value="roomManager.ts"><a href="roomManager.ts.html">roomManager.ts</a></td>
	<td data-value="95.71" class="pic high">
	<div class="chart"><div class="cover-fill" style="width: 95%"></div><div class="cover-empty" style="width: 5%"></div></div>
	</td>
	<td data-value="95.71" class="pct high">95.71%</td>
	<td data-value="70" class="abs high">67/70</td>
	<td data-value="83.33" class="pct high">83.33%</td>
	<td data-value="24" class="abs high">20/24</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="10" class="abs high">10/10</td>
	<td data-value="95.58" class="pct high">95.58%</td>
	<td data-value="68" class="abs high">65/68</td>
	</tr>

</tbody>
</table>
</div>
                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2025-04-05T05:09:52.757Z
            </div>
        <script src="../prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="../sorter.js"></script>
        <script src="../block-navigation.js"></script>
    </body>
</html>

================
File: server/coverage/lcov-report/services/roomManager.ts.html
================
<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for services/roomManager.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="../prettify.css" />
    <link rel="stylesheet" href="../base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="../favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(../sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="../index.html">All files</a> / <a href="index.html">services</a> roomManager.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">95.71% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>67/70</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">83.33% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>20/24</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>10/10</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">95.58% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>65/68</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a>
<a name='L36'></a><a href='#L36'>36</a>
<a name='L37'></a><a href='#L37'>37</a>
<a name='L38'></a><a href='#L38'>38</a>
<a name='L39'></a><a href='#L39'>39</a>
<a name='L40'></a><a href='#L40'>40</a>
<a name='L41'></a><a href='#L41'>41</a>
<a name='L42'></a><a href='#L42'>42</a>
<a name='L43'></a><a href='#L43'>43</a>
<a name='L44'></a><a href='#L44'>44</a>
<a name='L45'></a><a href='#L45'>45</a>
<a name='L46'></a><a href='#L46'>46</a>
<a name='L47'></a><a href='#L47'>47</a>
<a name='L48'></a><a href='#L48'>48</a>
<a name='L49'></a><a href='#L49'>49</a>
<a name='L50'></a><a href='#L50'>50</a>
<a name='L51'></a><a href='#L51'>51</a>
<a name='L52'></a><a href='#L52'>52</a>
<a name='L53'></a><a href='#L53'>53</a>
<a name='L54'></a><a href='#L54'>54</a>
<a name='L55'></a><a href='#L55'>55</a>
<a name='L56'></a><a href='#L56'>56</a>
<a name='L57'></a><a href='#L57'>57</a>
<a name='L58'></a><a href='#L58'>58</a>
<a name='L59'></a><a href='#L59'>59</a>
<a name='L60'></a><a href='#L60'>60</a>
<a name='L61'></a><a href='#L61'>61</a>
<a name='L62'></a><a href='#L62'>62</a>
<a name='L63'></a><a href='#L63'>63</a>
<a name='L64'></a><a href='#L64'>64</a>
<a name='L65'></a><a href='#L65'>65</a>
<a name='L66'></a><a href='#L66'>66</a>
<a name='L67'></a><a href='#L67'>67</a>
<a name='L68'></a><a href='#L68'>68</a>
<a name='L69'></a><a href='#L69'>69</a>
<a name='L70'></a><a href='#L70'>70</a>
<a name='L71'></a><a href='#L71'>71</a>
<a name='L72'></a><a href='#L72'>72</a>
<a name='L73'></a><a href='#L73'>73</a>
<a name='L74'></a><a href='#L74'>74</a>
<a name='L75'></a><a href='#L75'>75</a>
<a name='L76'></a><a href='#L76'>76</a>
<a name='L77'></a><a href='#L77'>77</a>
<a name='L78'></a><a href='#L78'>78</a>
<a name='L79'></a><a href='#L79'>79</a>
<a name='L80'></a><a href='#L80'>80</a>
<a name='L81'></a><a href='#L81'>81</a>
<a name='L82'></a><a href='#L82'>82</a>
<a name='L83'></a><a href='#L83'>83</a>
<a name='L84'></a><a href='#L84'>84</a>
<a name='L85'></a><a href='#L85'>85</a>
<a name='L86'></a><a href='#L86'>86</a>
<a name='L87'></a><a href='#L87'>87</a>
<a name='L88'></a><a href='#L88'>88</a>
<a name='L89'></a><a href='#L89'>89</a>
<a name='L90'></a><a href='#L90'>90</a>
<a name='L91'></a><a href='#L91'>91</a>
<a name='L92'></a><a href='#L92'>92</a>
<a name='L93'></a><a href='#L93'>93</a>
<a name='L94'></a><a href='#L94'>94</a>
<a name='L95'></a><a href='#L95'>95</a>
<a name='L96'></a><a href='#L96'>96</a>
<a name='L97'></a><a href='#L97'>97</a>
<a name='L98'></a><a href='#L98'>98</a>
<a name='L99'></a><a href='#L99'>99</a>
<a name='L100'></a><a href='#L100'>100</a>
<a name='L101'></a><a href='#L101'>101</a>
<a name='L102'></a><a href='#L102'>102</a>
<a name='L103'></a><a href='#L103'>103</a>
<a name='L104'></a><a href='#L104'>104</a>
<a name='L105'></a><a href='#L105'>105</a>
<a name='L106'></a><a href='#L106'>106</a>
<a name='L107'></a><a href='#L107'>107</a>
<a name='L108'></a><a href='#L108'>108</a>
<a name='L109'></a><a href='#L109'>109</a>
<a name='L110'></a><a href='#L110'>110</a>
<a name='L111'></a><a href='#L111'>111</a>
<a name='L112'></a><a href='#L112'>112</a>
<a name='L113'></a><a href='#L113'>113</a>
<a name='L114'></a><a href='#L114'>114</a>
<a name='L115'></a><a href='#L115'>115</a>
<a name='L116'></a><a href='#L116'>116</a>
<a name='L117'></a><a href='#L117'>117</a>
<a name='L118'></a><a href='#L118'>118</a>
<a name='L119'></a><a href='#L119'>119</a>
<a name='L120'></a><a href='#L120'>120</a>
<a name='L121'></a><a href='#L121'>121</a>
<a name='L122'></a><a href='#L122'>122</a>
<a name='L123'></a><a href='#L123'>123</a>
<a name='L124'></a><a href='#L124'>124</a>
<a name='L125'></a><a href='#L125'>125</a>
<a name='L126'></a><a href='#L126'>126</a>
<a name='L127'></a><a href='#L127'>127</a>
<a name='L128'></a><a href='#L128'>128</a>
<a name='L129'></a><a href='#L129'>129</a>
<a name='L130'></a><a href='#L130'>130</a>
<a name='L131'></a><a href='#L131'>131</a>
<a name='L132'></a><a href='#L132'>132</a>
<a name='L133'></a><a href='#L133'>133</a>
<a name='L134'></a><a href='#L134'>134</a>
<a name='L135'></a><a href='#L135'>135</a>
<a name='L136'></a><a href='#L136'>136</a>
<a name='L137'></a><a href='#L137'>137</a>
<a name='L138'></a><a href='#L138'>138</a>
<a name='L139'></a><a href='#L139'>139</a>
<a name='L140'></a><a href='#L140'>140</a>
<a name='L141'></a><a href='#L141'>141</a>
<a name='L142'></a><a href='#L142'>142</a>
<a name='L143'></a><a href='#L143'>143</a>
<a name='L144'></a><a href='#L144'>144</a>
<a name='L145'></a><a href='#L145'>145</a>
<a name='L146'></a><a href='#L146'>146</a>
<a name='L147'></a><a href='#L147'>147</a>
<a name='L148'></a><a href='#L148'>148</a>
<a name='L149'></a><a href='#L149'>149</a>
<a name='L150'></a><a href='#L150'>150</a>
<a name='L151'></a><a href='#L151'>151</a>
<a name='L152'></a><a href='#L152'>152</a>
<a name='L153'></a><a href='#L153'>153</a>
<a name='L154'></a><a href='#L154'>154</a>
<a name='L155'></a><a href='#L155'>155</a>
<a name='L156'></a><a href='#L156'>156</a>
<a name='L157'></a><a href='#L157'>157</a>
<a name='L158'></a><a href='#L158'>158</a>
<a name='L159'></a><a href='#L159'>159</a>
<a name='L160'></a><a href='#L160'>160</a>
<a name='L161'></a><a href='#L161'>161</a>
<a name='L162'></a><a href='#L162'>162</a>
<a name='L163'></a><a href='#L163'>163</a>
<a name='L164'></a><a href='#L164'>164</a>
<a name='L165'></a><a href='#L165'>165</a>
<a name='L166'></a><a href='#L166'>166</a>
<a name='L167'></a><a href='#L167'>167</a>
<a name='L168'></a><a href='#L168'>168</a>
<a name='L169'></a><a href='#L169'>169</a>
<a name='L170'></a><a href='#L170'>170</a>
<a name='L171'></a><a href='#L171'>171</a>
<a name='L172'></a><a href='#L172'>172</a>
<a name='L173'></a><a href='#L173'>173</a>
<a name='L174'></a><a href='#L174'>174</a>
<a name='L175'></a><a href='#L175'>175</a>
<a name='L176'></a><a href='#L176'>176</a>
<a name='L177'></a><a href='#L177'>177</a>
<a name='L178'></a><a href='#L178'>178</a>
<a name='L179'></a><a href='#L179'>179</a>
<a name='L180'></a><a href='#L180'>180</a>
<a name='L181'></a><a href='#L181'>181</a>
<a name='L182'></a><a href='#L182'>182</a>
<a name='L183'></a><a href='#L183'>183</a>
<a name='L184'></a><a href='#L184'>184</a>
<a name='L185'></a><a href='#L185'>185</a>
<a name='L186'></a><a href='#L186'>186</a>
<a name='L187'></a><a href='#L187'>187</a>
<a name='L188'></a><a href='#L188'>188</a>
<a name='L189'></a><a href='#L189'>189</a>
<a name='L190'></a><a href='#L190'>190</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">18x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">15x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">15x</span>
<span class="cline-any cline-yes">15x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">15x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">15x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">15x</span>
<span class="cline-any cline-yes">15x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">15x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">15x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">15x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">5x</span>
<span class="cline-any cline-yes">5x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">4x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">6x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-yes">3x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-no">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-yes">1x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">import { Room, RoomOptions, RoomSummary } from '../types/room'; // GameStatus を削除
import { Player } from '../types/player';
import { v4 as uuidv4 } from 'uuid';
import { GameManager } from './gameManager';
import { DEFAULT_GAME_RULES, GamePhase, Position, TargetSymbol, RobotColor } from '../types/game'; // Import necessary types
&nbsp;
// Define TargetPositions type locally or import if defined elsewhere
type TargetPositions = Map&lt;string, Position&gt;;
&nbsp;
export class RoomManager {
  private rooms: Map&lt;string, Room&gt;;
&nbsp;
  constructor() {
    this.rooms = new Map();
  }
&nbsp;
  createRoom(hostPlayer: Player, options: RoomOptions): Room {
    const roomId = uuidv4();
    // ホストプレイヤーのisHostとroomIdを設定
    hostPlayer.isHost = true;
    hostPlayer.roomId = roomId; // roomIdも設定
    // GameManager を先にインスタンス化
    // TODO: Implement server-side BoardLoader to get dynamic patterns
    const boardPatternIds = ['A1', 'B2', 'C3', 'D3']; // Placeholder: Use fixed patterns for now
    // TODO: Replace this placeholder with actual target positions derived from board generation
    const targetPositions: TargetPositions = new Map&lt;string, Position&gt;([
        // Vortex (color null)
        [`${TargetSymbol.VORTEX}-null`, { x: 7, y: 7 }], // Center
        // Red Targets
        [`${TargetSymbol.GEAR}-${RobotColor.RED}`, { x: 0, y: 5 }],
        [`${TargetSymbol.MOON}-${RobotColor.RED}`, { x: 5, y: 0 }],
        [`${TargetSymbol.PLANET}-${RobotColor.RED}`, { x: 10, y: 15 }],
        [`${TargetSymbol.STAR}-${RobotColor.RED}`, { x: 15, y: 10 }],
        // Blue Targets
        [`${TargetSymbol.GEAR}-${RobotColor.BLUE}`, { x: 1, y: 10 }],
        [`${TargetSymbol.MOON}-${RobotColor.BLUE}`, { x: 6, y: 5 }],
        [`${TargetSymbol.PLANET}-${RobotColor.BLUE}`, { x: 11, y: 1 }],
        [`${TargetSymbol.STAR}-${RobotColor.BLUE}`, { x: 14, y: 6 }],
        // Green Targets
        [`${TargetSymbol.GEAR}-${RobotColor.GREEN}`, { x: 2, y: 15 }],
        [`${TargetSymbol.MOON}-${RobotColor.GREEN}`, { x: 7, y: 11 }],
        [`${TargetSymbol.PLANET}-${RobotColor.GREEN}`, { x: 12, y: 7 }],
        [`${TargetSymbol.STAR}-${RobotColor.GREEN}`, { x: 13, y: 12 }],
        // Yellow Targets
        [`${TargetSymbol.GEAR}-${RobotColor.YELLOW}`, { x: 3, y: 3 }],
        [`${TargetSymbol.MOON}-${RobotColor.YELLOW}`, { x: 8, y: 8 }],
        [`${TargetSymbol.PLANET}-${RobotColor.YELLOW}`, { x: 13, y: 13 }],
        [`${TargetSymbol.STAR}-${RobotColor.YELLOW}`, { x: 15, y: 2 }],
    ]);
&nbsp;
    const gameManager = new GameManager([hostPlayer], boardPatternIds, targetPositions, DEFAULT_GAME_RULES);
    const room: Room = {
      id: roomId,
      name: options.name,
      password: options.password || null,
      hostId: hostPlayer.id,
      players: new Map([[hostPlayer.id, hostPlayer]]),
      gameManager: gameManager, // gameManager を設定
      maxPlayers: options.maxPlayers || 8,
      // GameManager を初期化し、その状態を gameState に設定
      gameState: null, // まず null で初期化
      created: new Date(),
      lastActivity: new Date()
    };
&nbsp;
    this.rooms.set(roomId, room);
&nbsp;
    // gameState も gameManager から取得して設定
    room.gameState = gameManager.getGameState();
&nbsp;
    return room;
  }
&nbsp;
  // 第一引数を Player オブジェクトに変更
  joinRoom(player: Player, roomId: string, password?: string): boolean {
    const room = this.rooms.get(roomId);
    if (!room) {
      throw new Error('Room not found');
    }
&nbsp;
    if (room.password &amp;&amp; room.password !== password) {
      throw new Error('Invalid password');
    }
&nbsp;
    if (room.players.size &gt;= room.maxPlayers) {
      throw new Error('Room is full');
    }
&nbsp;
    <span class="missing-if-branch" title="if path not taken" >I</span>if (room.players.has(player.id)) {
<span class="cstat-no" title="statement not covered" >      throw new Error('Player already in room');</span>
    }
&nbsp;
    // 渡された Player オブジェクトを使用し、roomId と isHost を設定
    player.roomId = roomId;
    player.isHost = false; // 参加者はホストではない
    player.connected = true; // 接続状態を更新
    player.lastConnected = new Date(); // 最終接続時刻を更新
&nbsp;
    room.players.set(player.id, player);
    room.lastActivity = new Date();
    return true;
  }
&nbsp;
  leaveRoom(playerId: string, roomId: string): boolean {
    const room = this.rooms.get(roomId);
    <span class="missing-if-branch" title="if path not taken" >I</span>if (!room) {
<span class="cstat-no" title="statement not covered" >      throw new Error('Room not found');</span>
    }
&nbsp;
    const player = room.players.get(playerId); // 退出するプレイヤーを取得
    if (!player) {
      throw new Error('Player not in room');
    }
&nbsp;
    room.players.delete(playerId);
    room.lastActivity = new Date();
&nbsp;
    // Player オブジェクトの roomId をリセット
    player.roomId = null;
&nbsp;
    // もし部屋が空になったら削除
    if (room.players.size === 0) {
      this.rooms.delete(roomId);
    }
    // もしホストが退出したら、最も古いプレイヤーを新しいホストにする
    else if (playerId === room.hostId) {
      const newHost = Array.from(room.players.values())[0];
      if (newHost) { // プレイヤーが残っている場合のみ
         room.hostId = newHost.id;
         newHost.isHost = true;
         // 新ホスト情報を他のプレイヤーに通知するイベントを発行しても良い
      }
    }
&nbsp;
    return true;
  }
&nbsp;
  getRoomSummaries(): RoomSummary[] {
    return Array.from(this.rooms.values()).map(room =&gt; ({
      id: room.id,
      name: room.name,
      hasPassword: !!room.password,
      playerCount: room.players.size,
      maxPlayers: room.maxPlayers,
      // gameState が null の可能性を考慮し、 ?. と ?? を使用
      status: room.gameState?.phase ?? <span class="branch-1 cbranch-no" title="branch not covered" >GamePhase.WAITING</span>
    }));
  }
&nbsp;
  getRoom(roomId: string): Room | undefined {
    return this.rooms.get(roomId);
  }
&nbsp;
  updatePlayerConnection(playerId: string, roomId: string, connected: boolean): void {
    const room = this.rooms.get(roomId);
    if (!room) {
      // ルームが存在しない場合は何もしないか、エラーログを出す
      console.warn(`updatePlayerConnection: Room ${roomId} not found for player ${playerId}`);
      return;
      // throw new Error('Room not found');
    }
&nbsp;
    const player = room.players.get(playerId);
    if (!player) {
       // プレイヤーが存在しない場合は何もしないか、エラーログを出す
       console.warn(`updatePlayerConnection: Player ${playerId} not found in room ${roomId}`);
       return;
      // throw new Error('Player not found');
    }
&nbsp;
    player.connected = connected;
    <span class="missing-if-branch" title="if path not taken" >I</span>if (connected) {
<span class="cstat-no" title="statement not covered" >        player.lastConnected = new Date(); </span>// 再接続時に最終接続時刻を更新
    }
    room.lastActivity = new Date(); // ルームのアクティビティも更新
  }
&nbsp;
  // 非アクティブなルームのクリーンアップ（30分以上アクティビティがないルーム）
  cleanupInactiveRooms(): void {
    const thirtyMinutesAgo = new Date(Date.now() - 30 * 60 * 1000);
    for (const [roomId, room] of this.rooms.entries()) {
      // プレイヤーが誰も接続していない、かつ最終アクティビティが古いルームを削除
      const allDisconnected = Array.from(room.players.values()).every(p =&gt; !p.connected);
      if (allDisconnected &amp;&amp; room.lastActivity &lt; thirtyMinutesAgo) {
        console.log(`Cleaning up inactive room: ${roomId}`);
        this.rooms.delete(roomId);
      }
    }
  }
}</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2025-04-05T05:09:52.757Z
            </div>
        <script src="../prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="../sorter.js"></script>
        <script src="../block-navigation.js"></script>
    </body>
</html>

================
File: server/coverage/lcov-report/types/game.ts.html
================
<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for types/game.ts</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="../prettify.css" />
    <link rel="stylesheet" href="../base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="../favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(../sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="../index.html">All files</a> / <a href="index.html">types</a> game.ts</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>17/17</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>6/6</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>3/3</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>17/17</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <pre><table class="coverage">
<tr><td class="line-count quiet"><a name='L1'></a><a href='#L1'>1</a>
<a name='L2'></a><a href='#L2'>2</a>
<a name='L3'></a><a href='#L3'>3</a>
<a name='L4'></a><a href='#L4'>4</a>
<a name='L5'></a><a href='#L5'>5</a>
<a name='L6'></a><a href='#L6'>6</a>
<a name='L7'></a><a href='#L7'>7</a>
<a name='L8'></a><a href='#L8'>8</a>
<a name='L9'></a><a href='#L9'>9</a>
<a name='L10'></a><a href='#L10'>10</a>
<a name='L11'></a><a href='#L11'>11</a>
<a name='L12'></a><a href='#L12'>12</a>
<a name='L13'></a><a href='#L13'>13</a>
<a name='L14'></a><a href='#L14'>14</a>
<a name='L15'></a><a href='#L15'>15</a>
<a name='L16'></a><a href='#L16'>16</a>
<a name='L17'></a><a href='#L17'>17</a>
<a name='L18'></a><a href='#L18'>18</a>
<a name='L19'></a><a href='#L19'>19</a>
<a name='L20'></a><a href='#L20'>20</a>
<a name='L21'></a><a href='#L21'>21</a>
<a name='L22'></a><a href='#L22'>22</a>
<a name='L23'></a><a href='#L23'>23</a>
<a name='L24'></a><a href='#L24'>24</a>
<a name='L25'></a><a href='#L25'>25</a>
<a name='L26'></a><a href='#L26'>26</a>
<a name='L27'></a><a href='#L27'>27</a>
<a name='L28'></a><a href='#L28'>28</a>
<a name='L29'></a><a href='#L29'>29</a>
<a name='L30'></a><a href='#L30'>30</a>
<a name='L31'></a><a href='#L31'>31</a>
<a name='L32'></a><a href='#L32'>32</a>
<a name='L33'></a><a href='#L33'>33</a>
<a name='L34'></a><a href='#L34'>34</a>
<a name='L35'></a><a href='#L35'>35</a>
<a name='L36'></a><a href='#L36'>36</a>
<a name='L37'></a><a href='#L37'>37</a>
<a name='L38'></a><a href='#L38'>38</a>
<a name='L39'></a><a href='#L39'>39</a>
<a name='L40'></a><a href='#L40'>40</a>
<a name='L41'></a><a href='#L41'>41</a>
<a name='L42'></a><a href='#L42'>42</a>
<a name='L43'></a><a href='#L43'>43</a>
<a name='L44'></a><a href='#L44'>44</a>
<a name='L45'></a><a href='#L45'>45</a>
<a name='L46'></a><a href='#L46'>46</a>
<a name='L47'></a><a href='#L47'>47</a>
<a name='L48'></a><a href='#L48'>48</a>
<a name='L49'></a><a href='#L49'>49</a>
<a name='L50'></a><a href='#L50'>50</a>
<a name='L51'></a><a href='#L51'>51</a>
<a name='L52'></a><a href='#L52'>52</a>
<a name='L53'></a><a href='#L53'>53</a>
<a name='L54'></a><a href='#L54'>54</a>
<a name='L55'></a><a href='#L55'>55</a>
<a name='L56'></a><a href='#L56'>56</a>
<a name='L57'></a><a href='#L57'>57</a>
<a name='L58'></a><a href='#L58'>58</a>
<a name='L59'></a><a href='#L59'>59</a>
<a name='L60'></a><a href='#L60'>60</a>
<a name='L61'></a><a href='#L61'>61</a>
<a name='L62'></a><a href='#L62'>62</a>
<a name='L63'></a><a href='#L63'>63</a>
<a name='L64'></a><a href='#L64'>64</a>
<a name='L65'></a><a href='#L65'>65</a>
<a name='L66'></a><a href='#L66'>66</a>
<a name='L67'></a><a href='#L67'>67</a>
<a name='L68'></a><a href='#L68'>68</a>
<a name='L69'></a><a href='#L69'>69</a>
<a name='L70'></a><a href='#L70'>70</a>
<a name='L71'></a><a href='#L71'>71</a>
<a name='L72'></a><a href='#L72'>72</a>
<a name='L73'></a><a href='#L73'>73</a>
<a name='L74'></a><a href='#L74'>74</a>
<a name='L75'></a><a href='#L75'>75</a>
<a name='L76'></a><a href='#L76'>76</a>
<a name='L77'></a><a href='#L77'>77</a>
<a name='L78'></a><a href='#L78'>78</a>
<a name='L79'></a><a href='#L79'>79</a>
<a name='L80'></a><a href='#L80'>80</a>
<a name='L81'></a><a href='#L81'>81</a>
<a name='L82'></a><a href='#L82'>82</a>
<a name='L83'></a><a href='#L83'>83</a>
<a name='L84'></a><a href='#L84'>84</a>
<a name='L85'></a><a href='#L85'>85</a>
<a name='L86'></a><a href='#L86'>86</a>
<a name='L87'></a><a href='#L87'>87</a>
<a name='L88'></a><a href='#L88'>88</a>
<a name='L89'></a><a href='#L89'>89</a>
<a name='L90'></a><a href='#L90'>90</a>
<a name='L91'></a><a href='#L91'>91</a></td><td class="line-coverage quiet"><span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-yes">2x</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span>
<span class="cline-any cline-neutral">&nbsp;</span></td><td class="text"><pre class="prettyprint lang-js">import { Player } from './player';
&nbsp;
export interface Position {
  x: number;
  y: number;
}
&nbsp;
export enum RobotColor {
  RED = 'red',
  BLUE = 'blue',
  GREEN = 'green',
  YELLOW = 'yellow',
  // Add a generic color for the vortex target, if applicable server-side
  // COLORS = 'colors' // Example, adjust if needed
}
&nbsp;
// Define TargetSymbol enum based on client-side src/types/board.ts
export enum TargetSymbol {
  GEAR = 'gear',
  MOON = 'moon',
  PLANET = 'planet',
  STAR = 'star',
  VORTEX = 'vortex',
}
&nbsp;
export enum GamePhase {
  WAITING = 'waiting', // Waiting for players to join/ready
  DECLARATION = 'declaration',
  SOLUTION = 'solution',
  FINISHED = 'finished'
}
&nbsp;
export interface Card {
  // Allow null for color to represent vortex or multi-color targets
  color: RobotColor | null;
  symbol: TargetSymbol; // Use the TargetSymbol enum
  position: Position;
}
&nbsp;
export interface Declaration {
  playerId: string;
  moves: number;
  timestamp: number;
}
&nbsp;
export interface PlayerGameState {
  score: number;
  declarations: Declaration[];
  isReady: boolean;
}
&nbsp;
export interface MultiplayerGameState {
  phase: GamePhase;
  currentCard?: Card;
  remainingCards: number;
  totalCards: number;
  declarations: Record&lt;string, Declaration&gt;; // Changed from Map
  currentPlayer?: string;
  playerStates: Record&lt;string, PlayerGameState&gt;; // Changed from Map
  timer: number;
  timerStartedAt: number;
  declarationOrder?: string[]; // Added: Order of players eligible to present solution
  robotPositions: Record&lt;RobotColor, Position&gt;; // Changed from Map
  moveHistory: {
    robotColor: RobotColor;
    positions: Position[];
    timestamp: number;
  }[];
  rankings?: { playerId: string; score: number; rank: number }[]; // Added for final rankings
  boardPatternIds: string[]; // Added: IDs of the board patterns used (e.g., ['A1', 'B2', 'C3', 'D4'])
}
&nbsp;
export interface GameRules {
  maxPlayers: number;
  declarationTimeLimit: number;
  solutionTimeLimit: number;
  minMoves: number;
  maxMoves: number;
  successPoints: number;
  penaltyPoints: number;
}
&nbsp;
export const DEFAULT_GAME_RULES: GameRules = {
  maxPlayers: 6,
  declarationTimeLimit: 30,  // seconds
  solutionTimeLimit: 60,     // seconds
  minMoves: 1,
  maxMoves: 30,
  successPoints: 1,
  penaltyPoints: -1
};</pre></td></tr></table></pre>

                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2025-04-05T05:09:52.757Z
            </div>
        <script src="../prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="../sorter.js"></script>
        <script src="../block-navigation.js"></script>
    </body>
</html>

================
File: server/coverage/lcov-report/types/index.html
================
<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for types</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="../prettify.css" />
    <link rel="stylesheet" href="../base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="../favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(../sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1><a href="../index.html">All files</a> types</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>17/17</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>6/6</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>3/3</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">100% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>17/17</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line high'></div>
    <div class="pad1">
<table class="coverage-summary">
<thead>
<tr>
   <th data-col="file" data-fmt="html" data-html="true" class="file">File</th>
   <th data-col="pic" data-type="number" data-fmt="html" data-html="true" class="pic"></th>
   <th data-col="statements" data-type="number" data-fmt="pct" class="pct">Statements</th>
   <th data-col="statements_raw" data-type="number" data-fmt="html" class="abs"></th>
   <th data-col="branches" data-type="number" data-fmt="pct" class="pct">Branches</th>
   <th data-col="branches_raw" data-type="number" data-fmt="html" class="abs"></th>
   <th data-col="functions" data-type="number" data-fmt="pct" class="pct">Functions</th>
   <th data-col="functions_raw" data-type="number" data-fmt="html" class="abs"></th>
   <th data-col="lines" data-type="number" data-fmt="pct" class="pct">Lines</th>
   <th data-col="lines_raw" data-type="number" data-fmt="html" class="abs"></th>
</tr>
</thead>
<tbody><tr>
	<td class="file high" data-value="game.ts"><a href="game.ts.html">game.ts</a></td>
	<td data-value="100" class="pic high">
	<div class="chart"><div class="cover-fill cover-full" style="width: 100%"></div><div class="cover-empty" style="width: 0%"></div></div>
	</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="17" class="abs high">17/17</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="6" class="abs high">6/6</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="3" class="abs high">3/3</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="17" class="abs high">17/17</td>
	</tr>

</tbody>
</table>
</div>
                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2025-04-05T05:09:52.757Z
            </div>
        <script src="../prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="../sorter.js"></script>
        <script src="../block-navigation.js"></script>
    </body>
</html>

================
File: server/coverage/lcov-report/index.html
================
<!doctype html>
<html lang="en">

<head>
    <title>Code coverage report for All files</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="prettify.css" />
    <link rel="stylesheet" href="base.css" />
    <link rel="shortcut icon" type="image/x-icon" href="favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type='text/css'>
        .coverage-summary .sorter {
            background-image: url(sort-arrow-sprite.png);
        }
    </style>
</head>
    
<body>
<div class='wrapper'>
    <div class='pad1'>
        <h1>All files</h1>
        <div class='clearfix'>
            
            <div class='fl pad1y space-right2'>
                <span class="strong">56.31% </span>
                <span class="quiet">Statements</span>
                <span class='fraction'>165/293</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">48.64% </span>
                <span class="quiet">Branches</span>
                <span class='fraction'>36/74</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">68% </span>
                <span class="quiet">Functions</span>
                <span class='fraction'>34/50</span>
            </div>
        
            
            <div class='fl pad1y space-right2'>
                <span class="strong">55.94% </span>
                <span class="quiet">Lines</span>
                <span class='fraction'>160/286</span>
            </div>
        
            
        </div>
        <p class="quiet">
            Press <em>n</em> or <em>j</em> to go to the next uncovered block, <em>b</em>, <em>p</em> or <em>k</em> for the previous block.
        </p>
        <template id="filterTemplate">
            <div class="quiet">
                Filter:
                <input type="search" id="fileSearch">
            </div>
        </template>
    </div>
    <div class='status-line medium'></div>
    <div class="pad1">
<table class="coverage-summary">
<thead>
<tr>
   <th data-col="file" data-fmt="html" data-html="true" class="file">File</th>
   <th data-col="pic" data-type="number" data-fmt="html" data-html="true" class="pic"></th>
   <th data-col="statements" data-type="number" data-fmt="pct" class="pct">Statements</th>
   <th data-col="statements_raw" data-type="number" data-fmt="html" class="abs"></th>
   <th data-col="branches" data-type="number" data-fmt="pct" class="pct">Branches</th>
   <th data-col="branches_raw" data-type="number" data-fmt="html" class="abs"></th>
   <th data-col="functions" data-type="number" data-fmt="pct" class="pct">Functions</th>
   <th data-col="functions_raw" data-type="number" data-fmt="html" class="abs"></th>
   <th data-col="lines" data-type="number" data-fmt="pct" class="pct">Lines</th>
   <th data-col="lines_raw" data-type="number" data-fmt="html" class="abs"></th>
</tr>
</thead>
<tbody><tr>
	<td class="file medium" data-value="services"><a href="services/index.html">services</a></td>
	<td data-value="52.94" class="pic medium">
	<div class="chart"><div class="cover-fill" style="width: 52%"></div><div class="cover-empty" style="width: 48%"></div></div>
	</td>
	<td data-value="52.94" class="pct medium">52.94%</td>
	<td data-value="272" class="abs medium">144/272</td>
	<td data-value="44.11" class="pct low">44.11%</td>
	<td data-value="68" class="abs low">30/68</td>
	<td data-value="65.95" class="pct medium">65.95%</td>
	<td data-value="47" class="abs medium">31/47</td>
	<td data-value="52.45" class="pct medium">52.45%</td>
	<td data-value="265" class="abs medium">139/265</td>
	</tr>

<tr>
	<td class="file high" data-value="types"><a href="types/index.html">types</a></td>
	<td data-value="100" class="pic high">
	<div class="chart"><div class="cover-fill cover-full" style="width: 100%"></div><div class="cover-empty" style="width: 0%"></div></div>
	</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="17" class="abs high">17/17</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="6" class="abs high">6/6</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="3" class="abs high">3/3</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="17" class="abs high">17/17</td>
	</tr>

<tr>
	<td class="file high" data-value="utils"><a href="utils/index.html">utils</a></td>
	<td data-value="100" class="pic high">
	<div class="chart"><div class="cover-fill cover-full" style="width: 100%"></div><div class="cover-empty" style="width: 0%"></div></div>
	</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="4" class="abs high">4/4</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="0" class="abs high">0/0</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="0" class="abs high">0/0</td>
	<td data-value="100" class="pct high">100%</td>
	<td data-value="4" class="abs high">4/4</td>
	</tr>

</tbody>
</table>
</div>
                <div class='push'></div><!-- for sticky footer -->
            </div><!-- /wrapper -->
            <div class='footer quiet pad2 space-top1 center small'>
                Code coverage generated by
                <a href="https://istanbul.js.org/" target="_blank" rel="noopener noreferrer">istanbul</a>
                at 2025-04-05T05:09:52.757Z
            </div>
        <script src="prettify.js"></script>
        <script>
            window.onload = function () {
                prettyPrint();
            };
        </script>
        <script src="sorter.js"></script>
        <script src="block-navigation.js"></script>
    </body>
</html>

================
File: server/coverage/clover.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<coverage generated="1743829792772" clover="3.2.0">
  <project timestamp="1743829792772" name="All files">
    <metrics statements="286" coveredstatements="160" conditionals="74" coveredconditionals="36" methods="50" coveredmethods="34" elements="410" coveredelements="230" complexity="0" loc="286" ncloc="286" packages="3" files="5" classes="5"/>
    <package name="services">
      <metrics statements="265" coveredstatements="139" conditionals="68" coveredconditionals="30" methods="47" coveredmethods="31"/>
      <file name="cardDeck.ts" path="/home/kunon/apps/ricochet_robots/server/src/services/cardDeck.ts">
        <metrics statements="43" coveredstatements="29" conditionals="9" coveredconditionals="5" methods="10" coveredmethods="9"/>
        <line num="1" count="2" type="stmt"/>
        <line num="2" count="2" type="stmt"/>
        <line num="9" count="2" type="stmt"/>
        <line num="15" count="36" type="stmt"/>
        <line num="16" count="36" type="stmt"/>
        <line num="17" count="36" type="stmt"/>
        <line num="18" count="36" type="stmt"/>
        <line num="19" count="36" type="stmt"/>
        <line num="23" count="36" type="stmt"/>
        <line num="26" count="36" type="stmt"/>
        <line num="27" count="720" type="stmt"/>
        <line num="29" count="576" type="stmt"/>
        <line num="30" count="576" type="cond" truecount="2" falsecount="0"/>
        <line num="31" count="240" type="stmt"/>
        <line num="33" count="336" type="stmt"/>
        <line num="39" count="36" type="stmt"/>
        <line num="40" count="36" type="cond" truecount="2" falsecount="0"/>
        <line num="41" count="15" type="stmt"/>
        <line num="46" count="21" type="stmt"/>
        <line num="50" count="36" type="stmt"/>
        <line num="51" count="36" type="stmt"/>
        <line num="55" count="0" type="stmt"/>
        <line num="56" count="0" type="stmt"/>
        <line num="57" count="0" type="cond" truecount="0" falsecount="1"/>
        <line num="58" count="0" type="stmt"/>
        <line num="59" count="0" type="stmt"/>
        <line num="62" count="0" type="stmt"/>
        <line num="67" count="36" type="stmt"/>
        <line num="68" count="240" type="stmt"/>
        <line num="69" count="240" type="stmt"/>
        <line num="74" count="17" type="cond" truecount="1" falsecount="0"/>
        <line num="75" count="17" type="stmt"/>
        <line num="76" count="17" type="stmt"/>
        <line num="79" count="0" type="stmt"/>
        <line num="80" count="0" type="stmt"/>
        <line num="82" count="0" type="cond" truecount="0" falsecount="1"/>
        <line num="83" count="0" type="stmt"/>
        <line num="85" count="0" type="stmt"/>
        <line num="91" count="0" type="stmt"/>
        <line num="98" count="0" type="stmt"/>
        <line num="100" count="0" type="stmt"/>
        <line num="104" count="54" type="stmt"/>
        <line num="108" count="36" type="stmt"/>
      </file>
      <file name="gameManager.ts" path="/home/kunon/apps/ricochet_robots/server/src/services/gameManager.ts">
        <metrics statements="154" coveredstatements="45" conditionals="35" coveredconditionals="5" methods="27" coveredmethods="12"/>
        <line num="1" count="2" type="stmt"/>
        <line num="2" count="2" type="stmt"/>
        <line num="4" count="2" type="stmt"/>
        <line num="10" count="2" type="stmt"/>
        <line num="17" count="2" type="stmt"/>
        <line num="27" count="36" type="stmt"/>
        <line num="28" count="36" type="stmt"/>
        <line num="29" count="36" type="stmt"/>
        <line num="30" count="36" type="stmt"/>
        <line num="31" count="36" type="stmt"/>
        <line num="32" count="36" type="stmt"/>
        <line num="36" count="36" type="stmt"/>
        <line num="37" count="36" type="stmt"/>
        <line num="38" count="76" type="stmt"/>
        <line num="45" count="36" type="stmt"/>
        <line num="58" count="0" type="stmt"/>
        <line num="64" count="19" type="stmt"/>
        <line num="66" count="19" type="cond" truecount="0" falsecount="1"/>
        <line num="67" count="0" type="stmt"/>
        <line num="70" count="19" type="cond" truecount="1" falsecount="0"/>
        <line num="71" count="1" type="stmt"/>
        <line num="75" count="18" type="stmt"/>
        <line num="78" count="18" type="stmt"/>
        <line num="79" count="18" type="stmt"/>
        <line num="80" count="18" type="stmt"/>
        <line num="82" count="18" type="stmt"/>
        <line num="83" count="18" type="stmt"/>
        <line num="87" count="0" type="stmt"/>
        <line num="88" count="0" type="stmt"/>
        <line num="89" count="0" type="stmt"/>
        <line num="90" count="0" type="stmt"/>
        <line num="91" count="0" type="stmt"/>
        <line num="95" count="0" type="stmt"/>
        <line num="99" count="0" type="stmt"/>
        <line num="101" count="0" type="cond" truecount="0" falsecount="1"/>
        <line num="102" count="0" type="stmt"/>
        <line num="105" count="0" type="stmt"/>
        <line num="106" count="0" type="stmt"/>
        <line num="108" count="0" type="stmt"/>
        <line num="109" count="0" type="stmt"/>
        <line num="110" count="0" type="stmt"/>
        <line num="112" count="0" type="stmt"/>
        <line num="113" count="0" type="stmt"/>
        <line num="116" count="0" type="stmt"/>
        <line num="117" count="0" type="cond" truecount="0" falsecount="1"/>
        <line num="118" count="0" type="stmt"/>
        <line num="119" count="0" type="stmt"/>
        <line num="122" count="0" type="cond" truecount="0" falsecount="1"/>
        <line num="123" count="0" type="stmt"/>
        <line num="124" count="0" type="stmt"/>
        <line num="133" count="17" type="cond" truecount="0" falsecount="1"/>
        <line num="134" count="0" type="stmt"/>
        <line num="136" count="0" type="stmt"/>
        <line num="139" count="17" type="stmt"/>
        <line num="140" count="17" type="cond" truecount="1" falsecount="0"/>
        <line num="141" count="17" type="stmt"/>
        <line num="142" count="17" type="stmt"/>
        <line num="143" count="17" type="stmt"/>
        <line num="146" count="0" type="stmt"/>
        <line num="147" count="0" type="stmt"/>
        <line num="149" count="0" type="stmt"/>
        <line num="151" count="0" type="stmt"/>
        <line num="156" count="10" type="cond" truecount="1" falsecount="0"/>
        <line num="157" count="10" type="stmt"/>
        <line num="160" count="0" type="cond" truecount="0" falsecount="3"/>
        <line num="161" count="0" type="stmt"/>
        <line num="164" count="0" type="stmt"/>
        <line num="170" count="0" type="stmt"/>
        <line num="171" count="0" type="stmt"/>
        <line num="174" count="0" type="cond" truecount="0" falsecount="1"/>
        <line num="175" count="0" type="stmt"/>
        <line num="176" count="0" type="stmt"/>
        <line num="177" count="0" type="stmt"/>
        <line num="182" count="0" type="stmt"/>
        <line num="185" count="0" type="stmt"/>
        <line num="188" count="0" type="stmt"/>
        <line num="189" count="0" type="cond" truecount="0" falsecount="1"/>
        <line num="190" count="0" type="stmt"/>
        <line num="192" count="0" type="stmt"/>
        <line num="196" count="0" type="stmt"/>
        <line num="199" count="0" type="cond" truecount="0" falsecount="2"/>
        <line num="201" count="0" type="stmt"/>
        <line num="202" count="0" type="stmt"/>
        <line num="205" count="0" type="stmt"/>
        <line num="207" count="0" type="stmt"/>
        <line num="211" count="0" type="stmt"/>
        <line num="212" count="0" type="stmt"/>
        <line num="213" count="0" type="stmt"/>
        <line num="214" count="0" type="stmt"/>
        <line num="215" count="0" type="stmt"/>
        <line num="218" count="0" type="stmt"/>
        <line num="219" count="0" type="stmt"/>
        <line num="221" count="0" type="stmt"/>
        <line num="225" count="0" type="cond" truecount="0" falsecount="1"/>
        <line num="226" count="0" type="stmt"/>
        <line num="229" count="0" type="cond" truecount="0" falsecount="1"/>
        <line num="230" count="0" type="stmt"/>
        <line num="233" count="0" type="stmt"/>
        <line num="234" count="0" type="cond" truecount="0" falsecount="1"/>
        <line num="236" count="0" type="stmt"/>
        <line num="239" count="0" type="cond" truecount="0" falsecount="1"/>
        <line num="240" count="0" type="stmt"/>
        <line num="244" count="0" type="stmt"/>
        <line num="250" count="0" type="stmt"/>
        <line num="253" count="0" type="cond" truecount="0" falsecount="1"/>
        <line num="254" count="0" type="stmt"/>
        <line num="262" count="0" type="stmt"/>
        <line num="266" count="0" type="stmt"/>
        <line num="268" count="0" type="stmt"/>
        <line num="269" count="0" type="cond" truecount="0" falsecount="1"/>
        <line num="270" count="0" type="stmt"/>
        <line num="271" count="0" type="cond" truecount="0" falsecount="1"/>
        <line num="272" count="0" type="stmt"/>
        <line num="277" count="0" type="stmt"/>
        <line num="278" count="0" type="stmt"/>
        <line num="282" count="0" type="stmt"/>
        <line num="284" count="0" type="stmt"/>
        <line num="285" count="0" type="cond" truecount="0" falsecount="1"/>
        <line num="287" count="0" type="stmt"/>
        <line num="288" count="0" type="stmt"/>
        <line num="293" count="0" type="cond" truecount="0" falsecount="1"/>
        <line num="294" count="0" type="stmt"/>
        <line num="298" count="0" type="cond" truecount="0" falsecount="4"/>
        <line num="300" count="0" type="stmt"/>
        <line num="301" count="0" type="stmt"/>
        <line num="304" count="0" type="stmt"/>
        <line num="306" count="0" type="stmt"/>
        <line num="313" count="0" type="stmt"/>
        <line num="315" count="0" type="cond" truecount="0" falsecount="2"/>
        <line num="316" count="0" type="stmt"/>
        <line num="317" count="0" type="stmt"/>
        <line num="318" count="0" type="stmt"/>
        <line num="319" count="0" type="stmt"/>
        <line num="320" count="0" type="stmt"/>
        <line num="321" count="0" type="stmt"/>
        <line num="322" count="0" type="stmt"/>
        <line num="323" count="0" type="stmt"/>
        <line num="325" count="0" type="stmt"/>
        <line num="326" count="0" type="stmt"/>
        <line num="332" count="17" type="stmt"/>
        <line num="333" count="17" type="stmt"/>
        <line num="336" count="17" type="stmt"/>
        <line num="337" count="51" type="stmt"/>
        <line num="340" count="34" type="stmt"/>
        <line num="343" count="17" type="stmt"/>
        <line num="344" count="17" type="stmt"/>
        <line num="345" count="51" type="cond" truecount="2" falsecount="1"/>
        <line num="346" count="0" type="stmt"/>
        <line num="348" count="51" type="stmt"/>
        <line num="350" count="17" type="stmt"/>
        <line num="357" count="59" type="stmt"/>
        <line num="362" count="37" type="cond" truecount="0" falsecount="1"/>
        <line num="363" count="0" type="stmt"/>
        <line num="364" count="0" type="stmt"/>
      </file>
      <file name="roomManager.ts" path="/home/kunon/apps/ricochet_robots/server/src/services/roomManager.ts">
        <metrics statements="68" coveredstatements="65" conditionals="24" coveredconditionals="20" methods="10" coveredmethods="10"/>
        <line num="3" count="1" type="stmt"/>
        <line num="4" count="1" type="stmt"/>
        <line num="5" count="1" type="stmt"/>
        <line num="10" count="1" type="stmt"/>
        <line num="14" count="18" type="stmt"/>
        <line num="18" count="15" type="stmt"/>
        <line num="20" count="15" type="stmt"/>
        <line num="21" count="15" type="stmt"/>
        <line num="24" count="15" type="stmt"/>
        <line num="26" count="15" type="stmt"/>
        <line num="51" count="15" type="stmt"/>
        <line num="52" count="15" type="stmt"/>
        <line num="66" count="15" type="stmt"/>
        <line num="69" count="15" type="stmt"/>
        <line num="71" count="15" type="stmt"/>
        <line num="76" count="5" type="stmt"/>
        <line num="77" count="5" type="cond" truecount="1" falsecount="0"/>
        <line num="78" count="1" type="stmt"/>
        <line num="81" count="4" type="cond" truecount="3" falsecount="0"/>
        <line num="82" count="1" type="stmt"/>
        <line num="85" count="3" type="cond" truecount="1" falsecount="0"/>
        <line num="86" count="1" type="stmt"/>
        <line num="89" count="2" type="cond" truecount="0" falsecount="1"/>
        <line num="90" count="0" type="stmt"/>
        <line num="94" count="2" type="stmt"/>
        <line num="95" count="2" type="stmt"/>
        <line num="96" count="2" type="stmt"/>
        <line num="97" count="2" type="stmt"/>
        <line num="99" count="2" type="stmt"/>
        <line num="100" count="2" type="stmt"/>
        <line num="101" count="2" type="stmt"/>
        <line num="105" count="3" type="stmt"/>
        <line num="106" count="3" type="cond" truecount="0" falsecount="1"/>
        <line num="107" count="0" type="stmt"/>
        <line num="110" count="3" type="stmt"/>
        <line num="111" count="3" type="cond" truecount="1" falsecount="0"/>
        <line num="112" count="1" type="stmt"/>
        <line num="115" count="2" type="stmt"/>
        <line num="116" count="2" type="stmt"/>
        <line num="119" count="2" type="stmt"/>
        <line num="122" count="2" type="cond" truecount="2" falsecount="0"/>
        <line num="123" count="1" type="stmt"/>
        <line num="126" count="1" type="cond" truecount="1" falsecount="0"/>
        <line num="127" count="1" type="stmt"/>
        <line num="128" count="1" type="cond" truecount="1" falsecount="0"/>
        <line num="129" count="1" type="stmt"/>
        <line num="130" count="1" type="stmt"/>
        <line num="135" count="2" type="stmt"/>
        <line num="139" count="2" type="stmt"/>
        <line num="151" count="6" type="stmt"/>
        <line num="155" count="3" type="stmt"/>
        <line num="156" count="3" type="cond" truecount="1" falsecount="0"/>
        <line num="158" count="1" type="stmt"/>
        <line num="159" count="1" type="stmt"/>
        <line num="163" count="2" type="stmt"/>
        <line num="164" count="2" type="cond" truecount="1" falsecount="0"/>
        <line num="166" count="1" type="stmt"/>
        <line num="167" count="1" type="stmt"/>
        <line num="171" count="1" type="stmt"/>
        <line num="172" count="1" type="cond" truecount="0" falsecount="1"/>
        <line num="173" count="0" type="stmt"/>
        <line num="175" count="1" type="stmt"/>
        <line num="180" count="2" type="stmt"/>
        <line num="181" count="2" type="stmt"/>
        <line num="183" count="2" type="stmt"/>
        <line num="184" count="2" type="cond" truecount="3" falsecount="0"/>
        <line num="185" count="1" type="stmt"/>
        <line num="186" count="1" type="stmt"/>
      </file>
    </package>
    <package name="types">
      <metrics statements="17" coveredstatements="17" conditionals="6" coveredconditionals="6" methods="3" coveredmethods="3"/>
      <file name="game.ts" path="/home/kunon/apps/ricochet_robots/server/src/types/game.ts">
        <metrics statements="17" coveredstatements="17" conditionals="6" coveredconditionals="6" methods="3" coveredmethods="3"/>
        <line num="8" count="2" type="cond" truecount="2" falsecount="0"/>
        <line num="9" count="2" type="stmt"/>
        <line num="10" count="2" type="stmt"/>
        <line num="11" count="2" type="stmt"/>
        <line num="12" count="2" type="stmt"/>
        <line num="18" count="2" type="cond" truecount="2" falsecount="0"/>
        <line num="19" count="2" type="stmt"/>
        <line num="20" count="2" type="stmt"/>
        <line num="21" count="2" type="stmt"/>
        <line num="22" count="2" type="stmt"/>
        <line num="23" count="2" type="stmt"/>
        <line num="26" count="2" type="cond" truecount="2" falsecount="0"/>
        <line num="27" count="2" type="stmt"/>
        <line num="28" count="2" type="stmt"/>
        <line num="29" count="2" type="stmt"/>
        <line num="30" count="2" type="stmt"/>
        <line num="83" count="2" type="stmt"/>
      </file>
    </package>
    <package name="utils">
      <metrics statements="4" coveredstatements="4" conditionals="0" coveredconditionals="0" methods="0" coveredmethods="0"/>
      <file name="constants.ts" path="/home/kunon/apps/ricochet_robots/server/src/utils/constants.ts">
        <metrics statements="4" coveredstatements="4" conditionals="0" coveredconditionals="0" methods="0" coveredmethods="0"/>
        <line num="1" count="2" type="stmt"/>
        <line num="5" count="2" type="stmt"/>
        <line num="15" count="2" type="stmt"/>
        <line num="25" count="2" type="stmt"/>
      </file>
    </package>
  </project>
</coverage>

================
File: server/src/services/roomManager.ts
================
import { Room, RoomOptions, RoomSummary } from '../types/room'; // GameStatus を削除
import { Player } from '../types/player';
import { v4 as uuidv4 } from 'uuid';
import { GameManager } from './gameManager';
import { DEFAULT_GAME_RULES, GamePhase, Position, TargetSymbol, RobotColor } from '../types/game'; // Import necessary types

// Define TargetPositions type locally or import if defined elsewhere
type TargetPositions = Map<string, Position>;

export class RoomManager {
  private rooms: Map<string, Room>;

  constructor() {
    this.rooms = new Map();
  }

  createRoom(hostPlayer: Player, options: RoomOptions): Room {
    const roomId = uuidv4();
    // ホストプレイヤーのisHostとroomIdを設定
    hostPlayer.isHost = true;
    hostPlayer.roomId = roomId; // roomIdも設定
    // GameManager を先にインスタンス化
    // TODO: Implement server-side BoardLoader to get dynamic patterns
    const boardPatternIds = ['A1', 'B2', 'C3', 'D3']; // Placeholder: Use fixed patterns for now
    // TODO: Replace this placeholder with actual target positions derived from board generation
    const targetPositions: TargetPositions = new Map<string, Position>([
        // Vortex (color null)
        [`${TargetSymbol.VORTEX}-null`, { x: 7, y: 7 }], // Center
        // Red Targets
        [`${TargetSymbol.GEAR}-${RobotColor.RED}`, { x: 0, y: 5 }],
        [`${TargetSymbol.MOON}-${RobotColor.RED}`, { x: 5, y: 0 }],
        [`${TargetSymbol.PLANET}-${RobotColor.RED}`, { x: 10, y: 15 }],
        [`${TargetSymbol.STAR}-${RobotColor.RED}`, { x: 15, y: 10 }],
        // Blue Targets
        [`${TargetSymbol.GEAR}-${RobotColor.BLUE}`, { x: 1, y: 10 }],
        [`${TargetSymbol.MOON}-${RobotColor.BLUE}`, { x: 6, y: 5 }],
        [`${TargetSymbol.PLANET}-${RobotColor.BLUE}`, { x: 11, y: 1 }],
        [`${TargetSymbol.STAR}-${RobotColor.BLUE}`, { x: 14, y: 6 }],
        // Green Targets
        [`${TargetSymbol.GEAR}-${RobotColor.GREEN}`, { x: 2, y: 15 }],
        [`${TargetSymbol.MOON}-${RobotColor.GREEN}`, { x: 7, y: 11 }],
        [`${TargetSymbol.PLANET}-${RobotColor.GREEN}`, { x: 12, y: 7 }],
        [`${TargetSymbol.STAR}-${RobotColor.GREEN}`, { x: 13, y: 12 }],
        // Yellow Targets
        [`${TargetSymbol.GEAR}-${RobotColor.YELLOW}`, { x: 3, y: 3 }],
        [`${TargetSymbol.MOON}-${RobotColor.YELLOW}`, { x: 8, y: 8 }],
        [`${TargetSymbol.PLANET}-${RobotColor.YELLOW}`, { x: 13, y: 13 }],
        [`${TargetSymbol.STAR}-${RobotColor.YELLOW}`, { x: 15, y: 2 }],
    ]);

    const gameManager = new GameManager([hostPlayer], boardPatternIds, targetPositions, DEFAULT_GAME_RULES);
    const room: Room = {
      id: roomId,
      name: options.name,
      password: options.password || null,
      hostId: hostPlayer.id,
      players: new Map([[hostPlayer.id, hostPlayer]]),
      gameManager: gameManager, // gameManager を設定
      maxPlayers: options.maxPlayers || 8,
      // GameManager を初期化し、その状態を gameState に設定
      gameState: null, // まず null で初期化
      created: new Date(),
      lastActivity: new Date()
    };

    this.rooms.set(roomId, room);

    // gameState も gameManager から取得して設定
    room.gameState = gameManager.getGameState();

    return room;
  }

  // 第一引数を Player オブジェクトに変更
  joinRoom(player: Player, roomId: string, password?: string): boolean {
    const room = this.rooms.get(roomId);
    if (!room) {
      throw new Error('Room not found');
    }

    if (room.password && room.password !== password) {
      throw new Error('Invalid password');
    }

    if (room.players.size >= room.maxPlayers) {
      throw new Error('Room is full');
    }

    if (room.players.has(player.id)) {
      throw new Error('Player already in room');
    }

    // 渡された Player オブジェクトを使用し、roomId と isHost を設定
    player.roomId = roomId;
    player.isHost = false; // 参加者はホストではない
    player.connected = true; // 接続状態を更新
    player.lastConnected = new Date(); // 最終接続時刻を更新

    room.players.set(player.id, player);
    room.lastActivity = new Date();
    return true;
  }

  leaveRoom(playerId: string, roomId: string): boolean {
    const room = this.rooms.get(roomId);
    if (!room) {
      throw new Error('Room not found');
    }

    const player = room.players.get(playerId); // 退出するプレイヤーを取得
    if (!player) {
      throw new Error('Player not in room');
    }

    room.players.delete(playerId);
    room.lastActivity = new Date();

    // Player オブジェクトの roomId をリセット
    player.roomId = null;

    // もし部屋が空になったら削除
    if (room.players.size === 0) {
      this.rooms.delete(roomId);
    }
    // もしホストが退出したら、最も古いプレイヤーを新しいホストにする
    else if (playerId === room.hostId) {
      const newHost = Array.from(room.players.values())[0];
      if (newHost) { // プレイヤーが残っている場合のみ
         room.hostId = newHost.id;
         newHost.isHost = true;
         // 新ホスト情報を他のプレイヤーに通知するイベントを発行しても良い
      }
    }

    return true;
  }

  getRoomSummaries(): RoomSummary[] {
    return Array.from(this.rooms.values()).map(room => ({
      id: room.id,
      name: room.name,
      hasPassword: !!room.password,
      playerCount: room.players.size,
      maxPlayers: room.maxPlayers,
      // gameState が null の可能性を考慮し、 ?. と ?? を使用
      status: room.gameState?.phase ?? GamePhase.WAITING
    }));
  }

  getRoom(roomId: string): Room | undefined {
    return this.rooms.get(roomId);
  }

  updatePlayerConnection(playerId: string, roomId: string, connected: boolean): void {
    const room = this.rooms.get(roomId);
    if (!room) {
      // ルームが存在しない場合は何もしないか、エラーログを出す
      console.warn(`updatePlayerConnection: Room ${roomId} not found for player ${playerId}`);
      return;
      // throw new Error('Room not found');
    }

    const player = room.players.get(playerId);
    if (!player) {
       // プレイヤーが存在しない場合は何もしないか、エラーログを出す
       console.warn(`updatePlayerConnection: Player ${playerId} not found in room ${roomId}`);
       return;
      // throw new Error('Player not found');
    }

    player.connected = connected;
    if (connected) {
        player.lastConnected = new Date(); // 再接続時に最終接続時刻を更新
    }
    room.lastActivity = new Date(); // ルームのアクティビティも更新
  }

  // 非アクティブなルームのクリーンアップ（30分以上アクティビティがないルーム）
  cleanupInactiveRooms(): void {
    const thirtyMinutesAgo = new Date(Date.now() - 30 * 60 * 1000);
    for (const [roomId, room] of this.rooms.entries()) {
      // プレイヤーが誰も接続していない、かつ最終アクティビティが古いルームを削除
      const allDisconnected = Array.from(room.players.values()).every(p => !p.connected);
      if (allDisconnected && room.lastActivity < thirtyMinutesAgo) {
        console.log(`Cleaning up inactive room: ${roomId}`);
        this.rooms.delete(roomId);
      }
    }
  }
}

================
File: src/types/socket.ts
================
import { Socket } from 'socket.io-client';
import { Player } from './player';
import { Room, RoomSummary } from './room'; // RoomSummaryを追加
import { MultiplayerGameState } from './game'; // Import from types/game instead of stores/gameStore
import { RobotColor, Position } from './game'; // RobotColor, Positionをインポート

export interface ServerToClientEvents {
  registered: (player: Player) => void; // Rename from playerRegistered
  roomCreated: (room: Room) => void;
  roomJoined: (room: Room) => void;
  roomLeft: (payload: { roomId: string; updatedRoom: Room }) => void; // サーバーの実装に合わせる
  roomUpdated: (room: Room) => void;
  roomListUpdated: (rooms: RoomSummary[]) => void; // ルームリスト更新イベント (RoomSummaryを使用) - イベント名を修正
  error: (error: { message: string }) => void;
  // --- ゲームイベントを追加 ---
  gameStarted: (initialGameState: MultiplayerGameState) => void;
  gameStateUpdated: (gameState: Partial<MultiplayerGameState>) => void; // 部分更新を許容
  declarationMade: (payload: { playerId: string; moves: number | null }) => void; // 宣言内容を通知
  turnChanged: (payload: { currentPlayerTurn: string | null }) => void; // 手番プレイヤーの変更を通知
  solutionAttemptResult: (payload: { success: boolean; scores: Record<string, number>; nextPlayerId?: string }) => void; // 解法試行の結果 (スコア全体を返す)
  gameOver: (payload: { winner: Player | null; scores: Record<string, number> }) => void; // ゲーム終了と勝者、最終スコア
  // --- ここまで ---
}

export interface ClientToServerEvents {
  register: (name: string) => void;
  createRoom: (options: { name: string; password?: string }) => void;
  joinRoom: (payload: { roomId: string; password?: string }) => void; // payloadオブジェクトに変更
  leaveRoom: (payload: { roomId: string }) => void; // payloadオブジェクトに変更
  getAvailableRooms: () => void; // ルームリスト取得要求
  // --- ゲームイベントを追加 ---
  startGame: (payload: { roomId: string }) => void; // payloadオブジェクトに変更
  declareMoves: (payload: { roomId: string; playerId: string; moves: number }) => void; // playerId を追加
  moveRobot: (payload: { roomId: string; robotColor: RobotColor; path: Position[] }) => void; // payloadオブジェクトに変更
  drawCard: (payload: { roomId: string; playerId: string }) => void; // playerId を追加
  // --- ここまで ---
}

export type GameSocket = Socket<ServerToClientEvents, ClientToServerEvents>;

================
File: project_desc/repo/repository.txt
================
This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)

Additional Info:
----------------

================================================================
Directory Structure
================================================================
public/
  vite.svg
src/
  assets/
    boards.json
    react.svg
  components/
    GameBoard/
      BoardCell.tsx
      GameBoard.tsx
      Robot.tsx
    DeclarationCard.tsx
    GameInfo.tsx
  hooks/
    useGameState.ts
  pages/
    BoardTestPage.tsx
    CreateRoomPage.tsx
    GamePage.tsx
    JoinRoomPage.tsx
    OnlinePage.tsx
    SinglePlayerPage.tsx
    TitlePage.tsx
  types/
    board.ts
    game.ts
  utils/
    boardGenerator.ts
    boardLoader.ts
    boardRotation.ts
    boardValidator.ts
    cardGenerator.ts
    constants.ts
    robotMovement.ts
  App.tsx
  index.css
  main.tsx
  vite-env.d.ts
.env.development
.gitignore
eslint.config.js
index.html
online-implementation-plan.md
package.json
postcss.config.js
README.md
requirements.md
tailwind.config.js
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts

================================================================
Files
================================================================

### project_desc/definition.md

* Short description: Defines the objectives, system requirements (tech stack, functional, non-functional), UI, and development phases for the multiplayer mode of the Ricochet Robots game[cite: 17, 18].

### project_desc/requirements.md

* Short description: Outlines the requirements for the browser-based Ricochet Robots game, including system architecture, technology stack (React, TypeScript, Node.js, Socket.io), functional requirements (title screen, online play, game mechanics), extensibility considerations (CPU mode), and development phases[cite: 19].

### project_desc/roadmap.md

* Short description: Development roadmap for the multiplayer mode, outlining phases (Basic Implementation, Game Logic, UI/UX, Extra Features), weekly tasks, responsibilities, milestones, priorities, and risks[cite: 977, 978, 979, 980, 981, 982].

### project_desc/repo/repository.txt

* Short description: A merged representation of the entire codebase, generated by Repomix for AI consumption[cite: 541, 542, 543, 544, 545, 546, 547, 548, 549]. Includes file summary, usage guidelines, directory structure, and concatenated file contents[cite: 542, 544, 549].

### public/vite.svg

* Short description: This is an SVG file for the Vite logo[cite: 20, 551].

### server/coverage/lcov-report/base.css

* Short description: Provides base CSS styling for the LCOV code coverage report generated by Istanbul, including layout, typography, tables, and coverage indicators[cite: 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 757].

### server/coverage/lcov-report/block-navigation.js

* short description: JavaScript for the LCOV report enabling keyboard navigation ('n', 'j', 'b', 'p', 'k') between uncovered code blocks or low-coverage files[cite: 55, 56, 66, 759].
* init (IIFE)
    * short description: Initializes keyboard navigation, queries elements, sets up listeners, and returns the `jump` function[cite: 760, 761].
    * input / output: None / `jump` function[cite: 761].
* toggleClass (Inner function)
    * short description: Adds/removes the 'highlighted' class from coverage elements[cite: 57, 58, 762].
    * input / output: `index` (number) / `void`[cite: 57, 763].
* makeCurrent (Inner function)
    * short description: Highlights the element at the given index and scrolls it into view[cite: 59, 60, 764].
    * input / output: `index` (number) / `void`[cite: 59, 765].
* goToPrevious (Inner function)
    * short description: Calculates the index of the previous coverage element and jumps to it[cite: 61, 62, 63, 766].
    * input / output: None / `void`[cite: 61, 767].
* goToNext (Inner function)
    * short description: Calculates the index of the next coverage element and jumps to it[cite: 64, 65, 768].
    * input / output: None / `void`[cite: 64, 769].
* jump (Returned function)
    * short description: Handles keydown events, triggers navigation if appropriate keys are pressed and search input is not focused[cite: 66, 67, 68, 770].
    * input / output: `event` (KeyboardEvent) / `void`[cite: 66, 771].

### server/coverage/lcov-report/prettify.css

* Short description: CSS for syntax highlighting in the LCOV report using "prettify" conventions, defining colors for code elements[cite: 69, 775, 776].

### server/coverage/lcov-report/prettify.js

* Short description: Google Code Prettify library for syntax highlighting in the LCOV report, parsing code and applying CSS classes[cite: 69, 70, 71, 777, 778]. Includes language handlers for various code types[cite: 449, 450, 451].

### server/coverage/lcov-report/roomManager.ts.html

* Short description: HTML file showing the detailed code coverage report for the `server/src/services/roomManager.ts` file, highlighting covered/uncovered lines, statements, and branches[cite: 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 112, 113, 779, 780, 781].

### server/coverage/lcov-report/sorter.js

* Short description: JavaScript for the LCOV report adding sort functionality to coverage summary table columns and a search/filter box[cite: 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 782].

### server/coverage/lcov-report/services/gameManager.ts.html

* Short description: HTML code coverage report for `server/src/services/gameManager.ts`, showing line/branch/function coverage details[cite: 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 1001, 1062, 1063].

### server/coverage/lcov-report/services/index.html

* Short description: HTML index page for the code coverage report of the `services` directory, summarizing coverage statistics for files within it (e.g., `gameManager.ts`, `roomManager.ts`)[cite: 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072].

### server/coverage/lcov-report/services/roomManager.ts.html

* Short description: HTML code coverage report for `server/src/services/roomManager.ts`[cite: 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1126, 1127].

### server/coverage/lcov-report/types/game.ts.html

* Short description: HTML code coverage report for `server/src/types/game.ts`[cite: 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1148, 1149, 1150].

### server/coverage/lcov-report/types/index.html

* Short description: HTML index page for the code coverage report of the `types` directory, summarizing coverage for files within it (e.g., `game.ts`)[cite: 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159].

### server/coverage/coverage-final.json

* Short description: Raw, detailed code coverage data in JSON format generated by Istanbul, used by reporters like LCOV[cite: 785, 786, 1160]. Contains metrics for `gameManager.ts`, `roomManager.ts`, and `types/game.ts`[cite: 1160].

### server/coverage/lcov.info

* Short description: Code coverage data in LCOV text format, suitable for reporting tools like Coveralls or Codecov[cite: 787, 788, 1160].

### server/.env.development

* Short description: Environment variables for the server's development environment, setting `PORT`, `HOST`, `NODE_ENV`, and `CORS_ORIGIN`[cite: 155, 819, 820].

### server/jest.config.js

* Short description: Configuration file for Jest testing framework, specifying preset (`ts-jest`), environment (`node`), test file locations, and code coverage settings[cite: 155, 821, 822].

### server/package.json

* Short description: Node.js server project metadata, scripts, dependencies (`dotenv`, `express`, `socket.io`, `uuid`, `winston`), and devDependencies[cite: 261, 823].

### server/tsconfig.json

* Short description: TypeScript configuration for the server project, setting compiler options (target, module, directories, strict checking, source maps) and including/excluding files[cite: 156, 824, 825, 826].

### server/src/services/cardDeck.ts

* CardDeck (Class)
    * short description: Manages the deck of target cards for the game[cite: 537, 1776].
    * constructor
        * short description: Initializes the card deck using a map of target positions. Generates and shuffles cards[cite: 538, 539, 1776, 1777].
        * input / output: Input: `targetPositions: Map<string, Position>` / Output: void[cite: 538, 1777].
    * generateCards (private)
        * short description: Generates the initial set of server-side cards (normal + vortex), ensuring target positions exist[cite: 539, 540, 541, 542, 543, 544, 545, 1777, 1778].
        * input / output: Input: None / Output: `ServerCard[]`[cite: 539, 1778].
    * getTargetPosition (private)
        * short description: Retrieves the board position for a given card's symbol and color (or null for vortex)[cite: 546, 547, 548, 1778, 1779].
        * input / output: Input: `color: RobotColor | null`, `symbol: TargetSymbol` / Output: `Position | null`[cite: 546, 1779, 1780].
    * shuffle (private)
        * short description: Randomizes the order of cards in the deck using Fisher-Yates algorithm[cite: 549, 550, 1780, 1781].
        * input / output: Input: None / Output: void[cite: 549, 1781].
    * drawNext
        * short description: Draws the next card from the deck, finds its position, and returns it. Skips cards if target position is not found[cite: 551, 552, 553, 554, 555, 556, 1781, 1782].
        * input / output: Input: None / Output: `Card | null`[cite: 551, 1782, 1783].
    * getRemaining
        * short description: Returns the number of cards remaining in the deck[cite: 556, 1783, 1784].
        * input / output: Input: None / Output: number[cite: 556, 1784].
    * getTotalCards
        * short description: Returns the total number of cards initially generated for the deck[cite: 557, 1784, 1785].
        * input / output: Input: None / Output: number[cite: 557, 1785].

### server/src/services/gameManager.ts

* GameManager (Class)
    * short description: Manages the state and logic of a multiplayer Ricochet Robots game instance, extends EventEmitter[cite: 868, 1611, 1426]. Uses `Record` internally for state properties[cite: 969, 972].
    * constructor
        * short description: Initializes game with players, board pattern IDs, target positions, and rules. Creates `CardDeck`. Sets initial game state[cite: 868, 869, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1427, 1428, 1429, 1430, 1431, 1440, 1788, 1789].
        * input / output: `players: Player[]`, `boardPatternIds: string[]`, `targetPositions: TargetPositions`, `rules: GameRules` / `void`[cite: 1613, 1440, 1789].
    * startGame
        * short description: Starts the game if phase is WAITING and players >= 2. Sets initial robot positions and phase to WAITING. Emits update[cite: 870, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1432, 1433, 1434, 1435].
        * input / output: `players: Player[]` / `void`[cite: 870, 1620, 1423, 1435]. Throws if conditions not met[cite: 871, 1621, 1622, 1432, 1433].
    * handleDrawCard
        * short description: Handles a request to draw the first card if in WAITING phase. Draws card, updates state, and starts declaration phase[cite: 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643].
        * input / output: `playerId: string` / `void`[cite: 1636].
    * declareMoves
        * short description: Handles player move declarations during the DECLARATION phase. Emits update[cite: 872, 1643, 1644, 1645, 1646, 1647, 1443, 1444, 1445, 1446].
        * input / output: `playerId: string`, `moves: number` / `void`[cite: 872, 1643]. Throws if invalid phase or moves[cite: 873, 1643, 1644, 1443, 1444].
    * moveRobot
        * short description: Handles robot movement attempts during the  PLAYING phase. Records move, checks goal, emits update[cite: 873, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1456, 1457, 1458, 1459, 1460, 1461]. Checks for goal achievement[cite: 1461, 1462].
        * input / output: `playerId: string`, `robotColor: RobotColor`, `positions: Position[]` / `void`[cite: 873, 874, 1659]. Throws if invalid phase/turn/moves[cite: 1456, 1457, 1459].
    * getGameState
        * short description: Returns a deep copy (via JSON stringify/parse) of the current game state[cite: 874, 968, 969, 1688, 1689, 1485].
        * input / output: None / `MultiplayerGameState`[cite: 875, 969, 1688].
    * endDeclarationPhase (private)
        * short description: Sorts declarations, sets `declarationOrder`, sets `currentPlayer`, and starts the solution phase or proceeds to the next round. Emits update[cite: 892, 893, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1447, 1448, 1449, 1450, 1451, 1452].
        * input / output: None / `void`[cite: 893, 894, 1648].
    * failCurrentSolution (private)
        * short description: Removes current player from `declarationOrder`, moves to the next player or next round. Emits update[cite: 894, 895, 896, 908, 909, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1468, 1469, 1470, 1471, 1472, 1473, 1474]. No penalty points[cite: 909].
        * input / output: None / `void`[cite: 896, 909, 1671].
    * successCurrentSolution (private)
        * short description: Awards points to the current player, proceeds to the next round. Emits update[cite: 905, 1666, 1667, 1668, 1669, 1670, 1671, 1463, 1464, 1465, 1466, 1467, 1468].
        * input / output: None / `void`[cite: 906, 1666].
    * proceedToNextRound (private, renamed from `drawNextCard`)
        * short description: Draws the next card using `CardDeck`, resets round state, starts declaration phase or ends game[cite: 910, 911, 1678, 1679, 1680, 1681, 1682, 1474, 1475, 1476, 1477, 1478].
        * input / output: None / `void`[cite: 911, 912, 1678].
    * endGame (private)
        * short description: Sets phase to FINISHED, calculates rankings, emits update, and cleans up timers[cite: 912, 913, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1479, 1480, 1481, 1482, 1483, 1484].
        * input / output: None / `void`[cite: 913, 1682].
    * cleanup (public)
        * short description: Clears any active timer interval[cite: 1486, 1690, 1691].
        * input / output: None / `void`[cite: 1690].
    * checkGoal (private)
        * short description: Checks if the current robot positions match the target card (placeholder, always returns false)[cite: 1462, 1665].
        * input / output: None / `boolean`[cite: 1665].

### server/src/services/__tests__/gameManager.test.ts

* Short description: Jest tests for `GameManager` covering initialization, declaration phase (valid/invalid declarations, sorting, timeouts), solution phase (turn transitions on failure), game end conditions (running out of cards), timer management, and score management (no penalties)[cite: 875, 876, 1371, 1372, 1373, 1374, 1375, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425].
* simulateFailedRound (Helper function)
    * short description: Helper test function to advance timers simulating a full round where all declaring players fail their solution attempts[cite: 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1281].
    * input / output: `manager: GameManager`, `players: Player[]`, `rules: GameRules` / `void`[cite: 1375].

### server/src/services/roomManager.ts

* RoomManager (Class) [cite: 378, 592, 923, 1066]
    * constructor
        * short description: Initializes with an empty room map[cite: 380, 381, 593, 1067].
        * input / output: None / `void`[cite: 792, 1067].
    * createRoom
        * short description: Creates room, sets host, generates placeholder target positions, instantiates `GameManager`, sets up 'gameStateUpdated' listener, stores room, stores initial game state[cite: 381, 382, 383, 384, 385, 386, 387, 594, 595, 596, 597, 792, 962, 963, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1437, 1441, 1791, 1792].
        * input / output: `hostPlayer: Player`, `options: RoomOptions` / `Room`[cite: 381, 594, 793, 1068, 1792].
    * joinRoom
        * short description: Adds player to room, checks password, limits, existing player. Updates player object properties[cite: 388, 389, 390, 391, 392, 393, 598, 599, 600, 601, 602, 603, 794, 921, 924, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1217, 1218, 1425].
        * input / output: `player: Player`, `roomId: string`, `password?: string` / `boolean`[cite: 388, 925, 795, 1078]. Throws errors[cite: 795, 1079, 1080, 1081, 1082, 1083].
    * leaveRoom
        * short description: Removes player. Deletes room if empty. Assigns new host if host leaves. Resets player's `roomId`[cite: 396, 397, 398, 399, 400, 401, 402, 403, 604, 605, 606, 607, 608, 796, 797, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1219, 1220, 1221].
        * input / output: `playerId: string`, `roomId: string` / `boolean`[cite: 396, 604, 798, 1086]. Throws errors[cite: 798, 1087, 1088, 1089].
    * getRoomSummaries
        * short description: Returns array of summaries for all rooms. Reads status from `gameState.phase`[cite: 404, 609, 799, 1094, 1095, 1222, 1223].
        * input / output: None / `RoomSummary[]`[cite: 404, 800, 1094].
    * getRoom
        * short description: Retrieves full details of a room by ID[cite: 405, 610, 800, 1095, 1224].
        * input / output: `roomId: string` / `Room | undefined`[cite: 405, 801, 1095].
    * updatePlayerConnection
        * short description: Updates player's `connected` status and `lastConnected` time in a room. Logs warnings if room/player not found[cite: 406, 407, 408, 409, 410, 411, 412, 413, 611, 612, 613, 614, 802, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1226, 1227].
        * input / output: `playerId: string`, `roomId: string`, `connected: boolean` / `void`[cite: 406, 803, 804, 1096].
    * cleanupInactiveRooms
        * short description: Removes rooms where all players are disconnected and last activity is old[cite: 414, 415, 416, 615, 616, 617, 805, 1103, 1104, 1105, 1106, 1228].
        * input / output: None / `void`[cite: 806, 1103].

### server/src/server.ts

* Short description: Main entry point for the Node.js WebSocket server (Socket.IO)[cite: 403, 404, 808, 1502]. Sets up Express, Socket.IO, RoomManager, session tracking (using Player objects), logging (Winston), and event handlers[cite: 405, 406, 407, 408, 409, 410, 809, 810, 811, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1529, 1547, 1548, 1549]. Emits initial room list[cite: 950, 951, 1511]. Includes intervals for connection checks and inactive room cleanup[cite: 1509, 1510].
* Event Handlers:
    * connection: Logs connection, sets up listeners, emits initial room list[cite: 410, 812, 950, 951, 1510, 1511].
    * register: Creates player, stores session, emits 'registered'[cite: 411, 813, 917, 1511]. Retrieves Player from session map[cite: 918, 1511].
    * createRoom: Uses `RoomManager`, joins socket, listens for 'gameStateUpdated' from GameManager instance, emits 'roomCreated', updates list[cite: 414, 415, 814, 918, 919, 920, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1437]. Retrieves Player from session map[cite: 918, 1513].
    * joinRoom: Uses `RoomManager`, joins socket, notifies room, emits 'roomJoined' (with full room data), emits 'gameStateUpdated' if game ongoing, updates list[cite: 417, 418, 815, 921, 922, 923, 1521, 1522, 1523, 1524, 1525, 1526, 1432, 1433]. Retrieves Player from session map[cite: 921, 1521].
    * leaveRoom: Uses `RoomManager`, leaves socket, notifies room, updates list[cite: 419, 816, 1527, 1528].
    * disconnect: Updates player connection status via `RoomManager`, notifies room, removes session[cite: 420, 421, 817, 1529, 1530, 1531, 1532].
    * ping: Updates `lastConnected`, emits 'pong'[cite: 422, 818, 1532].
    * startGame: Verifies host, gets current players, calls `gameManager.startGame`, emits 'gameStarted'[cite: 965, 966, 967, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1424].
    * drawCard: Verifies player/room, calls `gameManager.handleDrawCard`[cite: 1540, 1541, 1542, 1543].
    * declareMoves: Verifies player/room, calls `gameManager.declareMoves`[cite: 1544, 1545, 1546].

### server/src/types/game.ts

* Short description: Defines TypeScript types for server-side multiplayer game state: `GamePhase`, `Position`, `RobotColor`, `TargetSymbol`, `Card` (color nullable), `Declaration`, `PlayerGameState`, `MultiplayerGameState` (using `Record` instead of `Map`, added `boardPatternIds`), `GameRules`, `DEFAULT_GAME_RULES`[cite: 867, 868, 869, 870, 871, 872, 891, 892, 902, 903, 904, 905, 970, 971, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1785, 1787, 1438]. Color property in Card is nullable[cite: 1785]. TargetSymbol enum added[cite: 1787]. boardPatternIds added to MultiplayerGameState[cite: 1438].

### server/src/types/player.ts

* Short description: Defines TypeScript interfaces for server-side players: `Player` (including `lastConnected`) and `PlayerStatus`[cite: 253, 254, 806, 916, 917, 1175].

### server/src/types/room.ts

* Short description: Defines TypeScript interfaces for server-side rooms: `Room` (including `gameManager`, gameState nullable), `RoomSummary` (using `GamePhase`), and `RoomOptions`[cite: 255, 256, 257, 258, 259, 260, 807, 958, 959, 960, 961, 1176]. `GameState` and `GameStatus` are removed[cite: 960]. gameState is nullable[cite: 959].

### server/src/utils/constants.ts

* Short description: Defines server-side constants: `SYMBOL_MAP` (using TargetSymbol enum), `SYMBOLS` array, `ROBOT_COLORS` array[cite: 535, 558, 559, 560, 1773, 1774, 1775].

### src/App.tsx

* App (Function Component) [cite: 539, 647]
    * short description: Sets up application routing using `react-router-dom` for Title, Single Player, Online (Create/Join/Game), and Test pages[cite: 536, 537, 538, 539, 540, 541, 647, 648, 1250].
    * input / output: None / JSX (`Router`, `Routes`, `Route`)[cite: 539, 649, 1251].

### src/assets/boards.json

* Short description: JSON file defining board patterns (A, B, C, D) including size, walls, reflectors, and targets (colors, symbols, vortex)[cite: 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 650, 651, 652, 1229, 1230].

### src/assets/react.svg

* Short description: This is an SVG file for the React logo[cite: 157, 158, 159, 160, 551, 1137].

### src/components/DeclarationCard.tsx

* DeclarationCard (Function Component) [cite: 505, 613, 1235]
    * short description: Renders a single card for declaring moves, showing number and selection/disabled state[cite: 505, 506, 613, 614, 1235].
    * input / output: `number`, `isSelected`, `isDisabled`, `onClick` function / JSX button[cite: 504, 505, 614, 615, 1236].
* ChevronLeft (Function Component) [cite: 507, 615, 1237]
    * short description: Renders a left chevron SVG icon[cite: 507, 615, 1237].
    * input / output: None / SVG JSX[cite: 507, 616, 1238].
* ChevronRight (Function Component) [cite: 508, 617, 1239]
    * short description: Renders a right chevron SVG icon[cite: 508, 617, 1239].
    * input / output: None / SVG JSX[cite: 508, 618, 1240].
* DeclarationCardList (Function Component) [cite: 509, 510, 619, 883, 1241]
    * short description: Renders a scrollable list of `DeclarationCard`s for move declaration, with navigation arrows. Handles null `selectedNumber`[cite: 509, 513, 514, 515, 517, 518, 519, 619, 620, 882, 1241, 1242]. Modified isDisabled logic[cite: 1796, 1797].
    * handlePrevClick
        * short description: Decrements start index for visible cards[cite: 511, 514, 621, 1242].
        * input / output: None / `void`[cite: 511, 621, 1243].
    * handleNextClick
        * short description: Increments start index for visible cards[cite: 512, 518, 622, 1243].
        * input / output: None / `void`[cite: 512, 623, 1244].
    * input / output: `selectedNumber: number | null`, `maxNumber`, `onSelect`, `isDisabled?`, `className` / JSX[cite: 509, 510, 624, 885, 1244, 1245, 1798].

### src/components/GameBoard/BoardCell.tsx

* BoardCell (Function Component - memoized) [cite: 398, 701, 1487, 1488, 1502, 1318]
    * short description: Renders a single board cell with background, walls, target, and reflector[cite: 701, 1488, 1491, 1493, 1496, 1500, 1501, 1318].
    * getWallClasses
        * short description: Determines CSS classes for cell walls[cite: 702, 1488, 1489, 1319].
        * input / output: None / `string`[cite: 703, 1320].
    * getTargetClasses
        * short description: Determines CSS classes for target styling (color/gradient/animation). Handles vortex[cite: 704, 1489, 1490, 1491, 1320, 1321].
        * input / output: None / `string`[cite: 705, 1321].
    * getReflectorClasses
        * short description: Determines CSS classes for reflector styling[cite: 706, 1491, 1492, 1493, 1322].
        * input / output: None / `string`[cite: 707, 1323].
    * renderReflector
        * short description: Renders the reflector symbol ('／' or '＼') with layered text[cite: 708, 1493, 1494, 1495, 1323].
        * input / output: None / JSX or `null`[cite: 709, 1324].
    * renderTargetSymbol
        * short description: Renders the target symbol, handles vortex animation[cite: 710, 1496, 1497, 1498, 1499, 1500, 1325].
        * input / output: None / JSX or `null`[cite: 711, 1326].
    * input / output: Props: `cell`, `x`, `y`, `size` / JSX div[cite: 712, 1487, 1327].

### src/components/GameBoard/GameBoard.tsx

* GameBoard (Function Component - memoized) [cite: 415, 713, 1504, 1505, 1519, 1328]
    * short description: Renders the game board grid with cells and robots. Handles robot selection and move initiation (keyboard/click). Manages `isMoving` state[cite: 713, 714, 1502, 1503, 1504, 1505, 1512, 1513, 1514, 1515, 1516, 1518, 1328, 1329, 1330].
    * handleKeyDown
        * short description: Handles arrow keys for robot movement[cite: 715, 1505, 1506, 1330].
        * input / output: `e: React.KeyboardEvent` / `void`[cite: 716, 1331]. Calls `handleRobotMove`[cite: 1506, 716, 1331].
    * handleRobotMove
        * short description: Calculates path via `calculatePath`, calls `onRobotMove` prop, sets `isMoving`[cite: 717, 718, 1506, 1507, 1508, 1509, 1332].
        * input / output: `color` (RobotColor), `direction` (Direction) / `void`[cite: 718, 1506, 1333]. Calls `calculatePath`, `onRobotMove`[cite: 719, 1508, 1333].
    * handleRobotClick
        * short description: Toggles robot selection state[cite: 719, 1510, 1511, 1334].
        * input / output: `color` (RobotColor) / `void`[cite: 720, 1335]. Updates `selectedRobot` state[cite: 720, 1505, 1335].
    * input / output: Props: `board`, `isPlayerTurn`, `onRobotMove` / JSX div[cite: 721, 1504, 1336].

### src/components/GameBoard/Robot.tsx

* DirectionArrow (Function Component) [cite: 304, 653, 1282]
    * short description: Renders a clickable arrow button for robot movement direction[cite: 653, 1175, 1176, 1177, 1178, 1282].
    * input / output: `direction`, `onClick`, `position` / JSX button[cite: 654, 1174, 655, 1283].
* Robot (Function Component) [cite: 308, 655, 1284]
    * short description: Renders a robot piece, handling position, color, selection, clicks, and displaying movement arrows[cite: 655, 1171, 1172, 1173, 1178, 1184, 1185, 1186, 1187, 1284].
    * getPositionStyle
        * short description: Calculates CSS style for robot position/size[cite: 656, 1178, 1179, 1180, 1285].
        * input / output: None / `CSSProperties`[cite: 657, 1286].
    * getColorStyle
        * short description: Returns Tailwind CSS classes for robot color[cite: 658, 1181, 1182, 1286].
        * input / output: None / `string`[cite: 659, 1287].
    * handleMove
        * short description: Calls `onMove` prop when an arrow is clicked[cite: 660, 1182, 1183, 1287].
        * input / output: `direction` (Direction) / `void`[cite: 661, 1288].
    * input / output: Props: `color`, `position`, `boardSize`, `isActive`, `isSelected`, `onMove`, `onClick`, `style` / JSX div[cite: 662, 1172, 1178, 663, 1288].

### src/components/GameInfo.tsx

* GameInfo (Function Component) [cite: 262, 590, 1178]
    * short description: Displays game info: score, move count, declaration, timer, current target card, remaining cards, and draw card button[cite: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 590, 591, 1178].
    * input / output: Props: `score`, `moveCount`, `declaredMoves`, `timer`, `isDeclarationPhase`, `currentCard`, `remainingCards`, `onDrawCard`, `phase` / JSX[cite: 262, 263, 264, 592, 593, 1179].

### src/components/GameResultDisplay.tsx

* GameResultDisplay (Function Component)
    * short description: Displays game results (rankings, scores) when the game phase is 'finished'[cite: 187, 188, 189, 191, 914, 1144]. Retrieves data from `useGameStore` and maps player names[cite: 188, 190, 915]. Includes a leave room button[cite: 193, 1145].
    * input / output: Props: `players: Player[]`, `onLeaveRoom: () => void` / JSX[cite: 187, 188, 915, 916, 1146].

### src/components/room/CreateRoomForm.tsx

* CreateRoomForm (Function Component)
    * short description: Form for creating a game room (name, optional password). Uses `useGameStore`'s `createRoom` action. Handles validation, errors, loading state, and success callback. Disables submit until player is registered[cite: 486, 487, 497, 498, 499, 827, 489, 493, 828, 488, 489, 491, 492, 493, 494, 495, 496, 500, 829, 830, 501, 502, 503, 935, 936, 1230, 1231, 1232].
    * handleSubmit
        * short description: Validates input, calls `createRoom`, triggers `onSuccess`[cite: 490, 492, 493, 494, 831, 1233].
        * input / output: `e: React.FormEvent` / `void`[cite: 490, 832, 1234].

### src/components/room/RoomList.tsx

* RoomList (Function Component)
    * short description: Displays a list of available game rooms, allows selection, password entry, and joining via `useGameStore`. Shows room status and lock icon. Handles errors and loading state[cite: 161, 162, 164, 172, 173, 832, 833, 834, 835, 175, 176, 177, 180, 184, 836, 1138, 1429, 1430].
    * handleJoinRoom
        * short description: Validates selection/password, calls `joinRoom` action (now void), manages isLoading state[cite: 164, 165, 166, 837, 1430, 1431].
        * input / output: `e: React.FormEvent` / `void`[cite: 164, 838, 1431].
    * getStatusText
        * short description: Converts room status enum ('waiting', etc.) to Japanese text[cite: 167, 168, 169, 170, 171, 839, 1142].
        * input / output: `status: string` / `string`[cite: 167, 840, 1143].

### src/hooks/useGameState.ts

* useGameState (Custom Hook) [cite: 474, 743, 1718, 1354]
    * short description: Manages single-player game state (board, card, phase, score, moves, declarations, timers) and provides interaction functions. Handles goal checks and animations[cite: 743, 744, 745, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1753, 745, 1729, 1731, 1354, 1355].
    * declareMoves
        * short description: Updates declared moves and max declared moves state[cite: 489, 491, 746, 747, 1736, 1737, 1738, 1739, 1355].
        * input / output: `moves` (number) / `void`[cite: 747, 1356].
    * checkGoal
        * short description: Checks if the moved robot reached the current target. Includes debug logs[cite: 492, 495, 748, 1739, 1740, 1741, 1742, 1356, 1357].
        * input / output: `robot` (Robot) / `boolean`[cite: 749, 1357].
    * drawNextCard
        * short description: Draws next card, updates state, transitions phase to 'declaration' or 'finished'[cite: 495, 496, 497, 750, 751, 1742, 1743, 1744, 1745, 1358].
        * input / output: None / `Card | null`[cite: 751, 752, 1359].
    * moveRobot
        * short description: Initiates robot move, calculates path, updates state (moves, history, score, phase), triggers animation[cite: 498, 499, 500, 501, 502, 752, 753, 754, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1360].
        * input / output: `robotColor` (RobotColor), `direction` (Direction) / `void`[cite: 754, 1745, 1361]. Updates `gameState`, `movingRobot`[cite: 755, 1361].
    * input / output: `mode` ('single' | 'multi') / `{ gameState, moveRobot, declareMoves, drawNextCard, remainingCards, totalCards }`[cite: 755, 756, 1362].

### src/index.css

* Short description: Defines base, component (e.g., `.btn`), and utility styles using Tailwind CSS directives[cite: 239, 240, 241, 242, 243, 570, 1162].

### src/main.tsx

* Short description: Main entry point for the React application, rendering the root `App` component[cite: 243, 571, 572, 1163].

### src/pages/BoardTestPage.tsx

* BoardTestPage (Function Component) [cite: 328, 625, 1195]
    * short description: Development page to load, display, rotate, select, and combine board patterns using `BoardLoader`, `GameBoard`, and rotation utils. Validates boards on load[cite: 326, 327, 328, 329, 330, 331, 332, 336, 339, 340, 348, 349, 350, 351, 352, 353, 625, 626, 331, 338, 626, 1195, 1196].
    * handleBoardSelect
        * short description: Updates state for the selected board in a quadrant[cite: 333, 343, 627, 1196].
        * input / output: `position` (keyof typeof selectedBoards), `board` (BoardPattern) / `void`[cite: 333, 628, 1197].
    * handleCreateComposite
        * short description: Creates a composite board from selected quadrants. Calls `createCompositeBoardPattern`. Updates `compositeBoard` state[cite: 334, 335, 336, 347, 629, 335, 630, 330, 336, 630, 1198, 1199].
        * input / output: None / `void`[cite: 334, 630, 1199].

### src/pages/CreateRoomPage.tsx

* CreateRoomPage (Function Component)
    * short description: Page for creating a new game room. Connects to the socket, registers player if needed, shows loading/error states, renders `CreateRoomForm`, and handles successful room creation by navigating to the game page[cite: 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954].
    * handleCreateSuccess
        * short description: Navigates to the game page using the created room's ID[cite: 945, 946, 947]. Logs errors if room data is invalid[cite: 948].
        * input / output: `room: Room` / `void`[cite: 945].

### src/pages/GamePage.tsx

* GamePage (Function Component)
    * short description: Main multiplayer game screen. Displays header (room name, leave button), player list, game board, and game info/controls panel. Retrieves state from `useGameStore` (`game`, `generatedBoard`, `currentPlayer`, etc.). Handles game actions (start, declare, move, draw card, leave). Renders `GameBoard`, `DeclarationCardList`, `GameResultDisplay` conditionally based on game phase. Shows connection/loading states[cite: 1549, 1550, 1551, 1552, 1559, 1560, 1561, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1588, 1592, 1596, 1600, 1604, 1605, 1606, 1446, 1447, 1799, 1800, 1801].
    * handleStartGame
        * short description: Calls the `startGame` action from the store[cite: 1561].
        * input / output: None / `void`[cite: 1561].
    * handleDeclareMoves
        * short description: Calls the `storeDeclareMoves` action from the store[cite: 1562].
        * input / output: `moves: number` / `void`[cite: 1562].
    * handleRobotMove
        * short description: Calculates the robot's path using `calculatePath` and the `generatedBoard`, then calls the `storeMoveRobot` action with the path[cite: 1563, 1564, 1565, 1566, 1567, 1568, 1448].
        * input / output: `robotColor: RobotColor`, `direction: Direction` / `void`[cite: 1563].
    * handleDrawCard
        * short description: Calls the `drawCard` action from the store[cite: 1568, 1795].
        * input / output: None / `void`[cite: 1568].
    * handleLeaveRoom
        * short description: Calls the `leaveRoom` action from the store and navigates back[cite: 1569].
        * input / output: None / `void`[cite: 1569].
    * getPhaseText (Helper)
        * short description: Converts `GamePhase` enum to Japanese display text[cite: 1553].
        * input / output: `phase: GamePhase` / `string`[cite: 1553].
    * getTargetColorClass (Helper)
        * short description: Returns Tailwind CSS class string for target color display[cite: 1555].
        * input / output: `color: Card['color']` / `string`[cite: 1555].

### src/pages/JoinRoomPage.tsx

* JoinRoomPage (Function Component)
    * short description: Page for joining an existing room. Connects to the socket, registers the player if needed (checks `socketId`), displays available rooms via `RoomList`, and redirects on successful join. Handles connection errors and loading states[cite: 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 945, 946, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 1246, 1428, 1429].
    * input / output: None / JSX[cite: 746].

### src/pages/OnlinePage.tsx

* OnlinePage (Function Component)
    * short description: Renders buttons to navigate to "Create Room", "Join Room", or back to the title page[cite: 195, 196, 197, 198, 558, 1147].
    * input / output: Takes no input, returns JSX elements. Uses `react-router-dom` for navigation[cite: 195, 559, 1148].

### src/pages/SinglePlayerPage.tsx

* SinglePlayerPage (Function Component) [cite: 362, 680, 1302]
    * short description: Renders single-player UI: board, info panel, declaration list. Manages layout scaling. Uses `useGameState` hook[cite: 680, 681, 1334, 1335, 1336, 1343, 1347, 1348, 1350, 681, 1336, 1339, 1342, 684, 1338, 1302, 1303].
    * getBoardScale
        * short description: Calculates board scaling factor based on window size[cite: 682, 1339, 1340, 1341, 1342, 1304].
        * input / output: None / `number`[cite: 683, 1305].
    * input / output: None / JSX[cite: 684, 1305].

### src/pages/TitlePage.tsx

* TitlePage (Function Component) [cite: 532, 631, 1248]
    * short description: Renders the title screen with buttons for Single Player, Online Play, and Board Test[cite: 533, 534, 535, 536, 631, 1248].
    * input / output: None / JSX. Uses `react-router-dom`[cite: 532, 632, 1249].

### src/services/socketService.ts

* SocketService (Class - Singleton) [cite: 495, 843, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1560, 1392]
    * getInstance (static public)
        * short description: Provides singleton access[cite: 497, 844, 1525, 1392].
        * input / output: None / `SocketService` instance[cite: 844, 1393].
    * connect
        * short description: Establishes WebSocket connection, handles events, retries. Returns socket ID[cite: 498, 499, 845, 846, 847, 937, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1393, 1394].
        * input / output: None / `Promise<string>`[cite: 847, 938, 1395].
    * disconnect
        * short description: Disconnects socket, clears reference[cite: 500, 501, 848, 1531, 1532, 1395].
        * input / output: None / `void`[cite: 849, 1396].
    * emit (private helper)
        * short description: Helper to emit events if connected[cite: 1532, 1533, 1534, 1396].
        * input / output: `event`, `...args` / `void`[cite: 1397].
    * registerPlayer
        * short description: Emits 'register' event[cite: 502, 849, 1534, 1535, 1397].
        * input / output: `name: string` / `void`[cite: 850, 1398].
    * createRoom
        * short description: Emits 'createRoom' event and returns Promise for the created room with timeout[cite: 503, 850, 1535, 1536, 1537, 1538, 1398].
        * input / output: `options: { name: string; password?: string }` / `Promise<Room>`[cite: 851, 1535, 1399].
    * joinRoom
        * short description: Emits 'joinRoom' event (now a void function)[cite: 504, 852, 1538, 1539, 1400, 1424, 1425].
        * input / output: `roomId: string`, `password?: string` / `void`[cite: 853, 1401, 1425].
    * leaveRoom
        * short description: Emits 'leaveRoom' event[cite: 505, 854, 1539, 1540, 1402].
        * input / output: `roomId: string` / `void`[cite: 855, 1403].
    * getAvailableRooms
        * short description: Emits 'getAvailableRooms' event[cite: 1540, 1541, 1403].
        * input / output: None / `void`[cite: 1404].
    * startGame
        * short description: Emits 'startGame' event[cite: 888, 1541, 1542, 1404].
        * input / output: `roomId: string` / `void`[cite: 1405].
    * declareMoves
        * short description: Emits 'declareMoves' event[cite: 888, 1542, 1543, 1405].
        * input / output: `roomId: string`, `moves: number` / `void`[cite: 1406].
    * moveRobot
        * short description: Emits 'moveRobot' event[cite: 888, 1543, 1544, 1407].
        * input / output: `roomId: string`, `robotColor: RobotColor`, `path: Position[]` / `void`[cite: 1408].
    * drawCard
        * short description: Added method to emit the 'drawCard' event to the server[cite: 1793].
        * input / output: Input: `roomId: string` / Output: `void`[cite: 1794].
    * registerEventListener (private helper)
        * short description: Registers a callback for a server event, removing existing listener first[cite: 1544, 1545, 1546, 1409].
        * input / output: `event`, `callback` / `void`[cite: 1410].
    * onRegistered / onRoomCreated / onRoomJoined / onRoomLeft / onRoomUpdated / onRoomListUpdated / onError / onGameStarted / onGameStateUpdated / onDeclarationMade / onTurnChanged / onSolutionAttemptResult / onGameOver
        * short description: Methods to register callbacks for specific server events. `onRoomListUpdated` replaces `onAvailableRoomsUpdated`[cite: 506, 507, 508, 509, 510, 511, 855, 856, 889, 954, 955, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1410, 954, 955].
        * input / output: `callback: (data: any) => void` / `void`[cite: 856, 1411].
    * removeAllListeners
        * short description: Removes all registered event listeners[cite: 512, 857, 1559, 1560, 1412].
        * input / output: None / `void`[cite: 858, 1413].

### src/services/__tests__/socketService.test.ts

* Short description: Contains Vitest unit tests for the `SocketService` class. Mocks `socket.io-client` and tests the singleton pattern, connection logic, room operations (`createRoom`, `joinRoom`, `leaveRoom`), event handler registration, and the disconnect method[cite: 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 841, 200, 478, 480, 206, 481, 483, 484, 485, 210, 211, 212, 486, 487, 488, 489, 213, 214, 215, 490, 491, 492, 216, 493, 1149, 1150, 1391].

### src/stores/gameStore.ts

* useGameStore (Zustand Hook/Store)
    * short description: Manages global client state (connection, player, room, game list, multiplayer game state, generatedBoard, socketId) using Zustand. Provides actions interacting with `SocketService`. Handles socket events to update state. Includes `isMultiplayerGameState` type guard[cite: 513, 517, 858, 862, 1663, 1664, 1665, 860, 863, 1670, 1671, 1672, 1673, 1674, 1675, 861, 927, 929, 931, 956, 957, 1676, 1677, 1678, 1679, 1680, 1683, 1685, 1686, 1687, 1690, 1691, 1692, 930, 932, 933, 1665, 1666, 1667, 938, 939, 940, 941, 942, 1668, 1669, 1701, 1413, 1414, 1415, 1416].
    * State: `isConnected`, `isConnecting`, `connectionError`, `currentPlayer`, `currentRoom`, `availableRooms`, `socketId`, `game`, `generatedBoard`[cite: 859, 862, 939, 1667, 1668, 1669, 1670, 1701, 1417].
    * Actions: `connect`[cite: 940, 956, 1675, 1676], `disconnect`[cite: 941, 942, 1676], `registerPlayer`[cite: 1676, 1697], `createRoom` (async, returns Promise<Room>)[cite: 1671, 1697, 1698, 1699, 1700, 1701, 1702], `joinRoom` (void)[cite: 1702, 1703, 1426, 1427], `leaveRoom`[cite: 1703, 1704, 1705], `setConnectionError`[cite: 1705, 1706], `startGame`[cite: 947, 948, 1706, 1707, 1708, 1709], `declareMoves` (checks connection)[cite: 1709, 1710, 1711, 1712, 1713, 1801, 1802], `moveRobot`[cite: 1713, 1714, 1715, 1716, 1717], `drawCard`[cite: 1706, 1794, 1795].

### src/types/board.ts

* Short description: Defines TypeScript types for board patterns: `WallDirection`, `ReflectorDirection`, `TargetSymbol`, `TargetColor`, `BaseBoardPattern`, `RawBoardPattern`, `BoardPattern`, `RawBoardSet`, `WallPosition`, `ReflectorPosition`, `TargetPosition`, `BoardCollection`. Includes type guards `isValidBoardPattern`, `isValidBoardCollection`[cite: 663, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 664, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1289, 1290].

### src/types/game.ts

* Short description: Defines core game logic types: `Position`, `RobotColor`, `GameMode`, `Robot`, `Reflector`, `CellType`, `Cell`, `Board`, `Card`, `GamePhase`, `SinglePlayerState`, `GameState`, `Direction`. Also includes `MultiplayerGameState` aligned with server (using `Record`, added `boardPatternIds`). Imports `Player`[cite: 429, 430, 431, 432, 433, 434, 442, 444, 445, 446, 448, 451, 452, 722, 1627, 1628, 1629, 1630, 1631, 1632, 1640, 1641, 1642, 1643, 1644, 1646, 1647, 1649, 1650, 972, 973, 1651, 1654, 1655, 1656, 1657, 1658, 1659, 1442, 973, 1627, 1337, 1338, 1339].

### src/types/player.ts

* Short description: Defines TypeScript interfaces and types for players on the client-side: `Player`, `PlayerSession`, `PlayerStatus` (*Note: May differ from server-side definition*)[cite: 217, 218, 219, 863, 864, 1151, 1152, 1419].

### src/types/room.ts

* Short description: Defines TypeScript interfaces and types for game rooms on the client-side: `Room`, `GameState`, `GameStatus`, `RoomSummary`, `RoomOptions` (*Note: May differ from server-side definition*)[cite: 219, 220, 221, 222, 223, 224, 225, 864, 865, 1152, 1153, 1420].

### src/types/socket.ts

* Short description: Defines TypeScript interfaces for Socket.IO events (`ServerToClientEvents`, `ClientToServerEvents`) and `GameSocket` type. Includes game-related events. `roomListUpdated` replaces `availableRoomsUpdated`. Added 'drawCard' to ClientToServerEvents[cite: 540, 541, 542, 543, 865, 866, 867, 952, 953, 976, 977, 1519, 1520, 1521, 1522, 1523, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 886, 952, 953, 1792, 1421, 1422].

### src/utils/boardGenerator.ts

* createEmptyCell
    * short description: Creates a default, empty `Cell` object[cite: 454, 723, 1561, 1339].
    * input / output: None / `Cell`[cite: 724, 1340].
* getTargetSymbol
    * short description: Converts `TargetSymbol` enum to display character using `SYMBOL_MAP`[cite: 455, 725, 1562, 1563, 1340].
    * input / output: `symbol` (TargetSymbol) / `string`[cite: 726, 1341].
* createEmptyBoard
    * short description: Creates a `Board` object of given size, filled with empty cells[cite: 456, 727, 1563, 1341].
    * input / output: `size` (number) / `Board`[cite: 728, 1342].
* placeWalls
    * short description: Modifies board by setting wall properties based on `BoardPattern`, including adjacent cells[cite: 457, 729, 730, 1564, 1565, 1566, 1342].
    * input / output: `board` (Board), `pattern` (BoardPattern) / `void`[cite: 730, 731, 1343].
* placeReflectors
    * short description: Modifies board by adding reflector properties based on `BoardPattern`[cite: 460, 731, 1567, 1568, 1344].
    * input / output: `board` (Board), `pattern` (BoardPattern) / `void`[cite: 732, 1345].
* placeTargets
    * short description: Modifies board by setting target properties based on `BoardPattern`[cite: 461, 733, 1568, 1569, 1346].
    * input / output: `board` (Board), `pattern` (BoardPattern) / `void`[cite: 734, 1347].
* isCenterArea
    * short description: Checks if coordinates are in the central 2x2 area (16x16 assumed)[cite: 462, 735, 1569, 1570, 1348].
    * input / output: `x` (number), `y` (number) / `boolean`[cite: 736, 1349].
* getRandomEmptyPosition
    * short description: Finds a random valid starting position (empty, not target, not center)[cite: 463, 737, 738, 1570, 1571, 1572, 1573, 1574, 1350].
    * input / output: `board` (Board), `occupiedPositions` (Position[]), `maxAttempts` (number) / `Position`[cite: 738, 1351].
* placeRobots
    * short description: Modifies board by adding robots at random valid positions[cite: 467, 739, 1574, 1575, 1576, 1352].
    * input / output: `board` (Board) / `void`[cite: 740, 1353].
* generateBoardFromPattern
    * short description: Creates a complete `Board` from a `BoardPattern` by placing walls, reflectors, targets, and robots[cite: 469, 741, 1576, 1577, 1353].
    * input / output: `pattern` (BoardPattern) / `Board`[cite: 742, 1354].

### src/utils/boardLoader.ts

* BoardLoader (Class - Singleton) [cite: 376, 685, 1351, 1306]
    * constructor (private)
        * short description: Loads raw board data from JSON[cite: 377, 685, 1352, 1353, 1306].
        * input / output: None / `void`[cite: 686, 1307].
    * getInstance (static public)
        * short description: Singleton pattern implementation[cite: 378, 687, 1353, 1354, 1307].
        * input / output: None / `BoardLoader` instance[cite: 688, 1308].
    * getPatternKey (private)
        * short description: Generates JSON key string (e.g., 'boards\_A')[cite: 379, 689, 1354, 1355, 1308].
        * input / output: `pattern` (string) / `keyof RawBoardSet`[cite: 690, 1309].
    * getBoardSetByPattern (public)
        * short description: Retrieves, transforms (adds string ID), and validates boards for a pattern. Filters invalid boards[cite: 380, 382, 691, 1355, 1356, 1357, 1358, 692, 1358, 1310, 1311].
        * input / output: `pattern` (string) / `BoardPattern[]`[cite: 692, 1311].
    * getBoardById (public)
        * short description: Retrieves and validates a specific board by ID string. Expects format 'board\_XN'[cite: 383, 387, 693, 1359, 1360, 1361, 1362, 1363, 1312, 1445].
        * input / output: `boardId` (string) / `BoardPattern | undefined`[cite: 694, 1313].
    * getRandomGameBoards (public)
        * short description: Selects one random board from each set (A, B, C, D)[cite: 388, 695, 1363, 1364, 1365, 1314].
        * input / output: None / `BoardPattern[]`[cite: 696, 1315].
    * debugPrintState (public)
        * short description: Logs loaded board data state for debugging[cite: 390, 697, 1365, 1366, 1315].
        * input / output: None / `void`[cite: 698, 1316].
    * validateAllBoards (public)
        * short description: Validates all loaded board patterns[cite: 392, 699, 1367, 1368, 1369, 1370, 1371, 1316].
        * input / output: None / `{ valid: boolean; errors: string[] }`[cite: 700, 1317].

### src/utils/boardRotation.ts

* rotateWallDirection
    * short description: Calculates new wall direction after board rotation[cite: 354, 355, 633, 1200].
    * input / output: `direction` (WallDirection), `rotation` (number) / `WallDirection`[cite: 354, 634, 1201].
* rotateReflectorDirection
    * short description: Calculates new reflector orientation after rotation (changes only for 90/270 deg)[cite: 356, 357, 635, 1202].
    * input / output: `direction` (ReflectorDirection), `rotation` (number) / `ReflectorDirection`[cite: 356, 636, 1203].
* rotatePosition
    * short description: Calculates new (x, y) coordinates after rotation[cite: 358, 359, 360, 361, 637, 1204].
    * input / output: `x`, `y`, `size`, `rotation` (all number) / `[number, number]`[cite: 358, 638, 639, 1205].
* rotateBoard
    * short description: Rotates an entire `BoardPattern` (walls, reflectors, targets)[cite: 362, 363, 364, 365, 366, 367, 639, 1206].
    * input / output: `board` (BoardPattern), `rotation` (number) / `BoardPattern`[cite: 362, 640, 1207].
* createCompositeBoardPattern
    * short description: Combines four 8x8 `BoardPattern`s into one 16x16 pattern with rotations/transformations[cite: 367, 368, 369, 370, 377, 378, 641, 1208, 1426].
    * transformCoordinates (Helper)
        * short description: Converts 8x8 coordinates to 16x16 based on quadrant[cite: 370, 371, 372, 373, 642, 1209].
        * input / output: `x`, `y`, `quadrant` / `[number, number]`[cite: 370, 643, 1210].
    * transformElements (Helper)
        * short description: Applies coordinate transformation to an array of elements[cite: 374, 375, 376, 644, 1211].
        * input / output: `elements` array, `quadrant` / new array[cite: 374, 645, 1212].
    * input / output: `topLeft`, `topRight`, `bottomLeft`, `bottomRight` (all BoardPattern) / `BoardPattern`[cite: 367, 646, 1213].

### src/utils/boardValidator.ts

* BoardValidator (Class) [cite: 225, 560, 1153]
    * isValidPosition (static private)
        * short description: Checks if (x, y) coordinates are within board bounds[cite: 225, 560, 1153].
        * input / output: `x` (number), `y` (number), `size` (number) / `boolean`[cite: 225, 561, 1154].
    * isValidTargetColor (static private)
        * short description: Checks if a target color is valid, considering vortex targets[cite: 226, 227, 228, 562, 1155].
        * input / output: `color` (TargetColor), `isVortex` (boolean) / `boolean`[cite: 226, 563, 1156].
    * validateBoard (static public)
        * short description: Validates a single board pattern (size, walls, reflectors, targets). Logs warnings[cite: 228, 229, 230, 231, 232, 233, 234, 564, 228, 229, 230, 231, 232, 233, 566, 1157, 1159].
        * input / output: `board` (BoardPattern | RawBoardPattern) / `boolean`[cite: 228, 565, 1158].
    * validateBoardSet (static public)
        * short description: Validates an array of board patterns. Logs errors[cite: 235, 236, 237, 567, 237, 569, 1159, 1160].
        * input / output: `pattern` (string), `boards` (BoardPattern[] | RawBoardPattern[]) / `{ valid: boolean; errors: string[] }`[cite: 235, 238, 239, 568, 569, 1160, 1161].

### src/utils/constants.ts

* Short description: Defines constant mappings and arrays: `SYMBOL_MAP` (symbol name to character), `SYMBOLS` (array of symbol names), `ROBOT_COLORS`[cite: 276, 277, 601, 1180].

### src/utils/robotMovement.ts

* calculateReflection
    * short description: Calculates new robot direction after hitting a reflector[cite: 280, 281, 282, 602, 1181].
    * input / output: `direction` (Direction), `reflectorDirection` ('／' | '＼') / `Direction`[cite: 281, 603, 1182].
* getNextPosition
    * short description: Calculates the next grid position based on current position and direction[cite: 282, 283, 604, 1183].
    * input / output: `position` (Position), `direction` (Direction) / `Position`[cite: 283, 605, 1184].
* hasCollision
    * short description: Checks for collisions with boundaries, other robots, or walls[cite: 284, 285, 286, 287, 288, 289, 606, 1185].
    * input / output: `board` (Board), `position` (Position), `nextPosition` (Position), `direction` (Direction) / `boolean`[cite: 284, 607, 1186].
* calculatePath
    * short description: Calculates the full path a robot takes in a direction until an obstacle or reflection[cite: 289, 290, 291, 292, 293, 294, 295, 296, 297, 608, 1187].
    * input / output: `board` (Board), `robot` (Robot), `initialDirection` (Direction) / `Position[]`[cite: 289, 609, 610, 1188].
* calculateFinalPosition
    * short description: Calculates only the final stopping position of a robot's move[cite: 298, 299, 611, 1189].
    * input / output: `board` (Board), `robot` (Robot), `direction` (Direction) / `Position`[cite: 298, 612, 1190].

### src/vite-env.d.ts

* Short description: TypeScript declaration file for Vite client types[cite: 243, 573, 1164].

### .env.development

* Short description: Environment variable for the frontend development build, setting the `VITE_SOCKET_URL`[cite: 299, 574, 1191].

### .gitignore

* Short description: Specifies files and directories for Git to ignore (logs, `node_modules`, build outputs, editor files)[cite: 244, 575, 1165].

### eslint.config.js

* Short description: ESLint configuration, setting up rules, plugins (react-hooks, react-refresh), language options, and ignoring `dist`[cite: 244, 245, 576, 1166].

### index.html

* Short description: Main HTML file, includes the root div for the React app and loads the main JavaScript module[cite: 245, 577, 578, 1167].

### package.json

* Short description: Frontend project metadata, scripts (dev, build, lint, preview), dependencies (React, zustand, socket.io-client), and devDependencies (Vite, TypeScript, ESLint, Tailwind)[cite: 299, 300, 579, 1192].

### postcss.config.js

* Short description: PostCSS configuration, specifying plugins like `tailwindcss/nesting`, `tailwindcss`, and `autoprefixer`[cite: 246, 580, 1168].

### README.md

* Short description: Introduction to the Vite + React + TypeScript template, suggesting ESLint configuration expansion[cite: 247, 248, 581, 1169].

### tailwind.config.js

* Short description: Tailwind CSS configuration, specifying content files, theme extensions (colors), and plugins[cite: 249, 250, 583, 1170].

### tsconfig.app.json

* Short description: TypeScript configuration for the application source (`src`), setting compiler options (target, libs, module, JSX) and strict linting rules[cite: 251, 584, 585, 1171].

### tsconfig.json

* Short description: Root TypeScript configuration, referencing `tsconfig.app.json` and `tsconfig.node.json` for a composite project[cite: 251, 586, 1172].

### tsconfig.node.json

* Short description: TypeScript configuration for Node.js files (like `vite.config.ts`), setting Node-suitable compiler options and strict linting[cite: 252, 587, 588, 1173].

### vite.config.ts

* Short description: Vite configuration file, using the `@vitejs/plugin-react` plugin[cite: 252, 589, 1174].


================================================================
End of Codebase
================================================================

================
File: server/src/types/game.ts
================
import { Player } from './player';

export interface Position {
  x: number;
  y: number;
}

export enum RobotColor {
  RED = 'red',
  BLUE = 'blue',
  GREEN = 'green',
  YELLOW = 'yellow',
  // Add a generic color for the vortex target, if applicable server-side
  // COLORS = 'colors' // Example, adjust if needed
}

// Define TargetSymbol enum based on client-side src/types/board.ts
export enum TargetSymbol {
  GEAR = 'gear',
  MOON = 'moon',
  PLANET = 'planet',
  STAR = 'star',
  VORTEX = 'vortex',
}

export enum GamePhase {
  WAITING = 'waiting', // Waiting for players to join/ready
  DECLARATION = 'declaration',
  SOLUTION = 'solution',
  FINISHED = 'finished'
}

export interface Card {
  // Allow null for color to represent vortex or multi-color targets
  color: RobotColor | null;
  symbol: TargetSymbol; // Use the TargetSymbol enum
  position: Position;
}

export interface Declaration {
  playerId: string;
  moves: number;
  timestamp: number;
}

export interface PlayerGameState {
  score: number;
  declarations: Declaration[];
  isReady: boolean;
}

export interface MultiplayerGameState {
  phase: GamePhase;
  currentCard?: Card;
  remainingCards: number;
  totalCards: number;
  declarations: Record<string, Declaration>; // Changed from Map
  currentPlayer?: string;
  playerStates: Record<string, PlayerGameState>; // Changed from Map
  timer: number;
  timerStartedAt: number;
  declarationOrder?: string[]; // Added: Order of players eligible to present solution
  robotPositions: Record<RobotColor, Position>; // Changed from Map
  moveHistory: {
    robotColor: RobotColor;
    positions: Position[];
    timestamp: number;
  }[];
  rankings?: { playerId: string; score: number; rank: number }[]; // Added for final rankings
  boardPatternIds: string[]; // Added: IDs of the board patterns used (e.g., ['A1', 'B2', 'C3', 'D4'])
  currentAttemptMoves: number; // Added: Number of moves made in the current solution attempt
}

export interface GameRules {
  maxPlayers: number;
  declarationTimeLimit: number;
  solutionTimeLimit: number;
  minMoves: number;
  maxMoves: number;
  successPoints: number;
  penaltyPoints: number;
}

export const DEFAULT_GAME_RULES: GameRules = {
  maxPlayers: 6,
  declarationTimeLimit: 30,  // seconds
  solutionTimeLimit: 60,     // seconds
  minMoves: 1,
  maxMoves: 30,
  successPoints: 1,
  penaltyPoints: -1
};

================
File: src/services/socketService.ts
================
import { io } from 'socket.io-client';
import { GameSocket, ServerToClientEvents, ClientToServerEvents } from '../types/socket'; // 型をインポート
import { Player } from '../types/player'; // Playerをインポート
import { Room, RoomSummary } from '../types/room'; // Room, RoomSummaryをインポート
import { MultiplayerGameState } from '../types/game'; // Import from types/game instead of stores/gameStore
import { RobotColor, Position } from '../types/game'; // RobotColor, Positionをインポート

class SocketService {
  private static instance: SocketService;
  private socket: GameSocket | null = null;
  private reconnectAttempts = 0;
  private readonly maxReconnectAttempts = 5;

  private constructor() {}

  public static getInstance(): SocketService {
    if (!SocketService.instance) {
      SocketService.instance = new SocketService();
    }
    return SocketService.instance;
  }

  public connect(): Promise<string> { // Return string (socket ID)
    return new Promise((resolve, reject) => {
      if (this.socket?.connected && this.socket.id) { // 接続済みかつIDがあれば即解決
        resolve(this.socket.id);
        return;
      }
      try {
        // VITE_WS_URL を VITE_SOCKET_URL に修正 (環境変数名合わせ)
        this.socket = io(import.meta.env.VITE_SOCKET_URL, {
          reconnectionAttempts: this.maxReconnectAttempts,
          reconnectionDelay: 1000,
          autoConnect: true,
          transports: ['websocket'], // websocketを優先
        });

        this.socket.on('connect', () => {
          console.log('Socket connected:', this.socket?.id);
          this.reconnectAttempts = 0;
          resolve(this.socket?.id || ''); // Resolve with ID (fallback to empty string)
        });

        this.socket.on('connect_error', (error) => {
          console.error('Connection error:', error);
          this.reconnectAttempts++;
          if (this.reconnectAttempts >= this.maxReconnectAttempts) {
            this.disconnect(); // 切断処理を呼ぶ
            reject(new Error('Maximum reconnection attempts reached'));
          }
        });

        this.socket.on('disconnect', (reason) => {
          console.log('Socket disconnected:', reason);
          // 手動切断以外の場合の処理 (必要なら)
          if (reason !== 'io client disconnect') {
             // 例: set({ isConnected: false }); など
          }
        });

      } catch (error) {
        console.error('Socket initialization error:', error);
        reject(error);
      }
    });
  }

  public disconnect(): void {
    if (this.socket) {
      this.socket.disconnect();
      this.socket = null;
      console.log('Socket manually disconnected'); // ログ追加
    }
  }
// --- Helper for emitting events ---
private emit<Event extends keyof ClientToServerEvents>(
  event: Event,
  ...args: Parameters<ClientToServerEvents[Event]> // Use rest parameters for args
): void {
  if (this.socket?.connected) {
    // Spread the arguments for the emit call
    (this.socket.emit as (event: Event, ...args: Parameters<ClientToServerEvents[Event]>) => void)(event, ...args);
  } else {
    console.error(`Socket not connected. Cannot emit event: ${event}`);
    // TODO: Handle offline scenario? Queue events?
  }
}


// --- Player and Room Actions ---
  public registerPlayer(name: string): void {
    this.emit('register', name);
  }

  // Promise を返すように変更
  public createRoom(options: { name: string; password?: string }): Promise<Room> {
    return new Promise((resolve, reject) => {
      if (!this.socket) {
        return reject(new Error('Socket not connected'));
      }

      // タイムアウト処理
      const timeout = setTimeout(() => {
        // リスナーを削除
        this.socket?.off('roomCreated');
        this.socket?.off('error');
        reject(new Error('Room creation timed out'));
      }, 10000); // 10秒タイムアウト

      // 一時的なリスナーを設定
      this.socket.once('roomCreated', (room: Room) => {
        clearTimeout(timeout);
        this.socket?.off('error'); // エラーリスナーも削除
        resolve(room);
      });

      this.socket.once('error', (error: { message: string }) => {
        clearTimeout(timeout);
        this.socket?.off('roomCreated'); // roomCreatedリスナーも削除
        // エラーメッセージにイベントの種類を追加するとデバッグしやすい
        reject(new Error(`Room creation failed: ${error.message}`));
      });

      this.emit('createRoom', options);
    });
  }

// 元の void 関数に戻す
public joinRoom(roomId: string, password?: string): void {
  this.emit('joinRoom', { roomId, password }); // payloadオブジェクトに変更
}

public leaveRoom(roomId: string): void {
    this.emit('leaveRoom', { roomId }); // payloadオブジェクトに変更
  }

  public getAvailableRooms(): void { // 追加
    this.emit('getAvailableRooms'); // 引数なしで呼び出す
  }

  // --- Game Actions ---
  public startGame(roomId: string): void { // 追加
    this.emit('startGame', { roomId });
  }

  public declareMoves(roomId: string, playerId: string, moves: number): void { // playerId を引数に追加
    this.emit('declareMoves', { roomId, playerId, moves }); // playerId をペイロードに追加
  }

  public moveRobot(roomId: string, robotColor: RobotColor, path: Position[]): void { // 追加
    this.emit('moveRobot', { roomId, robotColor, path });
  }

  public drawCard(roomId: string, playerId: string): void { // playerId を引数に追加
    this.emit('drawCard', { roomId, playerId }); // playerId をペイロードに追加
  }

  // --- Event Listeners ---
  private registerEventListener<Event extends keyof ServerToClientEvents>(
    event: Event,
    callback: ServerToClientEvents[Event]
  ): void {
    this.socket?.off(event); // Remove existing listener first
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    this.socket?.on(event, callback as any); // Cast callback to any to bypass complex type issue
  }

  // --- Room Event Listeners ---
  public onRegistered(callback: ServerToClientEvents['registered']): void { // Rename method and update event name/type
    this.registerEventListener('registered', callback);
  }

  public onRoomCreated(callback: ServerToClientEvents['roomCreated']): void {
    this.registerEventListener('roomCreated', callback);
  }

  public onRoomJoined(callback: ServerToClientEvents['roomJoined']): void {
    this.registerEventListener('roomJoined', callback);
  }

  public onRoomLeft(callback: ServerToClientEvents['roomLeft']): void { // 型を更新
    this.registerEventListener('roomLeft', callback);
  }

  public onRoomUpdated(callback: ServerToClientEvents['roomUpdated']): void {
    this.registerEventListener('roomUpdated', callback);
  }

  public onRoomListUpdated(callback: ServerToClientEvents['roomListUpdated']): void { // メソッド名とイベント名を修正
    this.registerEventListener('roomListUpdated', callback);
  }

  public onError(callback: ServerToClientEvents['error']): void {
    this.registerEventListener('error', callback);
  }

  // --- Game Event Listeners ---
  public onGameStarted(callback: ServerToClientEvents['gameStarted']): void { // 追加
    this.registerEventListener('gameStarted', callback);
  }

  public onGameStateUpdated(callback: ServerToClientEvents['gameStateUpdated']): void { // 追加
    this.registerEventListener('gameStateUpdated', callback);
  }

  public onDeclarationMade(callback: ServerToClientEvents['declarationMade']): void { // 追加
    this.registerEventListener('declarationMade', callback);
  }

  public onTurnChanged(callback: ServerToClientEvents['turnChanged']): void { // 追加
    this.registerEventListener('turnChanged', callback);
  }

  public onSolutionAttemptResult(callback: ServerToClientEvents['solutionAttemptResult']): void { // 追加
    this.registerEventListener('solutionAttemptResult', callback);
  }

  public onGameOver(callback: ServerToClientEvents['gameOver']): void { // 追加
    this.registerEventListener('gameOver', callback);
  }
  // --- ここまで ---

  public removeAllListeners(): void {
    if (this.socket) {
      // 特定のイベントリスナーのみ削除するか、offAny()を使うか検討
      // ここでは一旦 offAny() を維持
      this.socket.offAny();
    }
  }
}

export default SocketService;

================
File: server/src/services/gameManager.ts
================
import { EventEmitter } from 'events';
import { Card, Declaration, GamePhase, GameRules, MultiplayerGameState, PlayerGameState, Position, RobotColor, DEFAULT_GAME_RULES, TargetSymbol } from '../types/game';
import { Player } from '../types/player';
import { CardDeck } from './cardDeck'; // Import CardDeck
import { ROBOT_COLORS } from '../utils/constants'; // Import ROBOT_COLORS

// Define TargetPositions type locally or import if defined elsewhere
type TargetPositions = Map<string, Position>;
// 仮のロボット初期位置 (本来はボード生成時に決定)
const INITIAL_ROBOT_POSITIONS: Record<RobotColor, Position> = {
  [RobotColor.RED]: { x: 1, y: 1 },
  [RobotColor.BLUE]: { x: 14, y: 1 },
  [RobotColor.GREEN]: { x: 1, y: 14 },
  [RobotColor.YELLOW]: { x: 14, y: 14 },
};

export class GameManager extends EventEmitter { // EventEmitter を継承
  private gameState: MultiplayerGameState;
  private cardDeck: CardDeck; // Add cardDeck property
  private rules: GameRules;
  private players: Player[];
  private timerInterval?: NodeJS.Timeout;
  private boardPatternIds: string[];
  private targetPositions: TargetPositions; // Add targetPositions property
  // private penaltyApplied: Set<string>; // No longer needed with the new rule

  constructor(players: Player[], boardPatternIds: string[], targetPositions: TargetPositions, rules: GameRules = DEFAULT_GAME_RULES) {
    super();
    this.rules = rules;
    this.players = players;
    this.boardPatternIds = boardPatternIds;
    this.targetPositions = targetPositions; // Store targetPositions
    this.cardDeck = new CardDeck(this.targetPositions); // Use stored targetPositions
    this.gameState = this.initializeGameState();
  }

  private initializeGameState(): MultiplayerGameState {
    const playerStates: Record<string, PlayerGameState> = {}; // Initialize as empty object
    this.players.forEach(player => {
      playerStates[player.id] = { // Use object assignment
        score: 0,
        declarations: [],
        isReady: false
      };
    });

    return {
      phase: GamePhase.WAITING, // Start in WAITING phase
      currentCard: undefined, // No card initially
      remainingCards: this.cardDeck.getRemaining(), // Get from cardDeck
      totalCards: this.cardDeck.getTotalCards(), // Get from cardDeck
      declarations: {}, // Initialize as empty object
      playerStates,
      timer: 0,
      timerStartedAt: Date.now(), // Initialize with a value
      robotPositions: { ...INITIAL_ROBOT_POSITIONS }, // Use initial positions defined above
      moveHistory: [],
      boardPatternIds: this.boardPatternIds,
      currentAttemptMoves: 0 // Initialize currentAttemptMoves
    };
    console.log(`Card deck initialized with ${this.gameState.totalCards} cards.`);
  }

  // Add players parameter to startGame
  public startGame(players: Player[]): void {
    // Update internal players list
    this.players = players;

    if (this.gameState.phase !== GamePhase.WAITING) {
      throw new Error('Game has already started');
    }

    if (this.players.length < 2) {
      throw new Error('Not enough players');
    }

    // Set initial robot positions
    this.gameState.robotPositions = { ...INITIAL_ROBOT_POSITIONS };

    // Set phase to WAITING, don't draw card yet
    this.gameState.phase = GamePhase.WAITING;
    this.gameState.currentCard = undefined; // Ensure no card is set initially
    this.gameState.remainingCards = this.cardDeck.getRemaining(); // Update remaining cards count

    console.log("Game started. Phase set to WAITING.");
    this.emit('gameStateUpdated', this.getGameState()); // Emit the initial state for WAITING
  }

  private startDeclarationPhase(): void {
    this.cleanup(); // Clear any existing timers
    this.gameState.phase = GamePhase.DECLARATION;
    this.gameState.declarations = {}; // Use object assignment
    this.gameState.timer = this.rules.declarationTimeLimit;
    this.gameState.timerStartedAt = Date.now();
    // this.penaltyApplied.clear(); // No longer needed

    // Timer is now started in declareMoves when the first declaration is made
    this.emit('gameStateUpdated', this.getGameState()); // 状態更新を通知
  }

  private startTimer(callback: () => void, duration: number): void {
    console.log(`[GameManager] Entering startTimer. Duration: ${duration}`); // Add log
    this.cleanup(); // Ensure no duplicate timers

    if (this.gameState.phase === GamePhase.FINISHED) {
      return; // Don't start timers if game is finished
    }

    this.gameState.timer = duration;
    this.gameState.timerStartedAt = Date.now();

    this.timerInterval = setInterval(() => {
      try {
        const currentTime = Date.now();
        const startTime = this.gameState.timerStartedAt;
        // Calculate elapsed time in seconds
        const elapsed = Math.floor((currentTime - startTime) / 1000);
        const remaining = Math.max(0, duration - elapsed);

        // Update timer only if it changed to avoid unnecessary updates
        const timerChanged = this.gameState.timer !== remaining;
        if (timerChanged) {
          this.gameState.timer = remaining;
          this.emit('gameStateUpdated', this.getGameState()); // タイマー更新も通知
        }

        // Add detailed logging inside the interval
        // console.log(`[Timer Tick] Duration: ${duration}, Elapsed: ${elapsed}, Remaining: ${remaining}, StartTime: ${startTime}, CurrentTime: ${currentTime}`);
        if (remaining === 0) {
          console.log(`[Timer End] Timer reached 0. Duration: ${duration}, Elapsed: ${elapsed}. Calling callback.`); // Log before calling callback
          this.cleanup(); // Clear interval when timer reaches 0
          callback(); // Execute the callback (e.g., end phase) - callback内でemitされる
        }
      } catch (error) {
        console.error("Error inside timer interval callback:", error);
        this.cleanup(); // Stop the timer on error to prevent repeated errors
        // Optionally, you might want to force the game into an error state or end it
        // this.endGame(); // Example: End the game on timer error
      }
    }, 1000); // Check every second
  }

  // New method to handle the explicit card draw request
  public handleDrawCard(playerId: string): void {
    console.log(`[GameManager] Entering handleDrawCard for player ${playerId}.`); // Add log
    // Only allow drawing if in the correct phase and maybe only by the host? (Decide on rule)
    // For now, allow any player to trigger the first draw if in WAITING phase.
    if (this.gameState.phase !== GamePhase.WAITING) {
      console.warn(`Player ${playerId} attempted to draw card in incorrect phase: ${this.gameState.phase}`);
      // Optionally throw an error or just ignore
      return;
    }

    const card = this.cardDeck.drawNext();
    if (!card) {
      console.error("Failed to draw the first card even when requested.");
      this.endGame(); // End game if no cards
      return;
    }

    this.gameState.currentCard = card;
    this.gameState.remainingCards = this.cardDeck.getRemaining();

    console.log(`Card drawn by ${playerId}. Starting declaration phase.`);
    // Now start the declaration phase
    this.startDeclarationPhase();
    // gameStateUpdated is emitted within startDeclarationPhase
  }

  public declareMoves(playerId: string, moves: number): void {
    console.log(`[GameManager] Entering declareMoves for player ${playerId} with ${moves} moves.`); // Add log
    if (this.gameState.phase !== GamePhase.DECLARATION) {
      throw new Error('Not in declaration phase');
    }

    if (moves < this.rules.minMoves || moves > this.rules.maxMoves) {
      throw new Error(`Moves must be between ${this.rules.minMoves} and ${this.rules.maxMoves}`);
    }

    const declaration: Declaration = {
      playerId,
      moves,
      timestamp: Date.now()
    };

    this.gameState.declarations[playerId] = declaration; // Use object assignment
    this.emit('gameStateUpdated', this.getGameState()); // 宣言追加を通知

    // Start the declaration timer only when the *first* player makes a declaration
    if (Object.keys(this.gameState.declarations).length === 1) {
      console.log("First declaration received. Starting declaration timer.");
      this.startTimer(() => {
        this.endDeclarationPhase();
      }, this.rules.declarationTimeLimit);
    }
  }
  private endDeclarationPhase(): void {
    console.log(`[GameManager] Entering endDeclarationPhase for room.`); // Add log
    this.cleanup(); // Clear declaration timer

    // 1. Collect valid declarations
    const validDeclarations = Object.values(this.gameState.declarations); // Use Object.values

    // 2. Sort declarations: ascending moves, then ascending timestamp
    validDeclarations.sort((a, b) => {
      if (a.moves !== b.moves) {
        return a.moves - b.moves;
      }
      return a.timestamp - b.timestamp;
    });

    // 3. Set the declaration order
    this.gameState.declarationOrder = validDeclarations.map(d => d.playerId);

    // 4. Determine the next player and always transition to Solution Phase
    if (this.gameState.declarationOrder.length > 0) {
      // If there are valid declarations, set the first player as current
      this.gameState.currentPlayer = this.gameState.declarationOrder[0];
    } else {
      // If no one made a valid declaration, currentPlayer remains undefined
      this.gameState.currentPlayer = undefined;
    }
    this.startSolutionPhase(); // Always start solution phase

    // gameStateUpdated is emitted within startSolutionPhase
  }

  private startSolutionPhase(): void {
    console.log(`[GameManager] Entering startSolutionPhase for room.`); // Add log
    this.cleanup(); // Clear any previous timers
    this.gameState.phase = GamePhase.SOLUTION;
    this.gameState.moveHistory = []; // Clear move history for the new attempt
    this.gameState.currentAttemptMoves = 0; // Reset attempt moves for the new solution phase
    this.gameState.timer = this.rules.solutionTimeLimit;
    this.gameState.timerStartedAt = Date.now();

    // Start timer for the solution attempt
    this.startTimer(() => {
      this.failCurrentSolution(); // Player fails if timer runs out - failCurrentSolution 内で emit される
    }, this.rules.solutionTimeLimit);
    this.emit('gameStateUpdated', this.getGameState()); // フェーズ開始を通知
  }

  public moveRobot(playerId: string, robotColor: RobotColor, path: Position[]): void {
    // Log entry point
    console.log(`[GameManager moveRobot START] Player: ${playerId}, Robot: ${robotColor}, PathLength: ${path.length}, CurrentAttempt: ${this.gameState.currentAttemptMoves}`);

    if (this.gameState.phase !== GamePhase.SOLUTION) {
      console.warn(`[GameManager moveRobot REJECT] Player: ${playerId} attempted move outside SOLUTION phase (${this.gameState.phase})`);
      throw new Error('Not in solution phase');
    }

    if (playerId !== this.gameState.currentPlayer) {
      console.warn(`[GameManager moveRobot REJECT] Player: ${playerId} attempted move, but it's ${this.gameState.currentPlayer}'s turn.`);
      throw new Error('Not your turn');
    }

    const declaration = this.gameState.declarations[playerId]; // Use object access
    if (!declaration) {
      console.error(`[GameManager moveRobot ERROR] No declaration found for player ${playerId}.`);
      throw new Error('No declaration found for player');
    }

    // Increment the move count for this attempt *before* checking
    const nextMoveCount = this.gameState.currentAttemptMoves + 1;
    console.log(`[GameManager moveRobot] Player: ${playerId} attempting move ${nextMoveCount}/${declaration.moves}`);

    // Check if the *next* move exceeds the declared moves
    if (nextMoveCount > declaration.moves) {
       console.warn(`[GameManager moveRobot FAIL] Player: ${playerId} exceeded declared moves (${declaration.moves}) with move ${nextMoveCount}. Failing solution attempt.`);
       this.failCurrentSolution(); // Fail the attempt if moves are exceeded
       return; // Stop further processing for this move event
    }
    // If not exceeding, update the state's move count
    this.gameState.currentAttemptMoves = nextMoveCount;

    // Validate the path itself (e.g., check if moves are valid on the board)
    // TODO: Implement path validation logic if needed. For now, trust the client's path.

    // Update robot position to the end of the path
    if (path.length > 0) {
      const finalPosition = path[path.length - 1];
      this.gameState.robotPositions[robotColor] = finalPosition;
      console.log(`[GameManager moveRobot] Updated robot ${robotColor} position to ${JSON.stringify(finalPosition)}`);
    } else {
       console.warn(`[GameManager moveRobot] Received empty path for robot ${robotColor} from player ${playerId}`);
       // If path is empty, it shouldn't count as a move or change state significantly,
       // but we already incremented currentAttemptMoves. Consider if this needs adjustment.
       // For now, let it proceed, but the goal check will likely fail.
    }


    // Record the move (using the provided path)
    this.gameState.moveHistory.push({
      robotColor,
      positions: path, // Store the actual path received
      timestamp: Date.now()
    });

    // Check if the move achieves the goal *after* updating the position and move count
    const isGoal = this.checkGoal();
    console.log(`[GameManager moveRobot] Goal check result for Player ${playerId}: ${isGoal}`);

    if (isGoal) {
      console.log(`[GameManager moveRobot SUCCESS] Player ${playerId} achieved the goal with robot ${robotColor} on move ${this.gameState.currentAttemptMoves}.`);
      this.successCurrentSolution(); // This emits gameStateUpdated
    } else {
      // If not goal, player continues their turn. Emit the updated state.
      console.log(`[GameManager moveRobot] Player ${playerId} moved robot ${robotColor}. Goal not achieved. Current moves: ${this.gameState.currentAttemptMoves}/${declaration.moves}. Emitting state update.`);
      this.emit('gameStateUpdated', this.getGameState()); // Emit state update after move
    }
    // Player continues their turn until timer runs out or they succeed/fail explicitly
  }

  private checkGoal(): boolean {
    const card = this.gameState.currentCard;
    if (!card) {
      console.warn("[checkGoal] No current card to check against.");
      return false; // No card, no goal
    }

    // Construct the key for targetPositions map (e.g., "GEAR_RED", "VORTEX-null")
    const targetKey = card.color ? `${card.symbol}-${card.color}` : `${card.symbol}-null`; // Use '-' separator for colored targets
    const targetPosition = this.targetPositions.get(targetKey);

    if (!targetPosition) {
      // This might happen if the card deck has cards for targets not on the current board setup
      console.warn(`[checkGoal] Target position not found for key: ${targetKey}`);
      return false;
    }

    const robotPositions = this.gameState.robotPositions;

    if (card.color === null) { // Vortex card - any robot can reach the target
      for (const color of ROBOT_COLORS) {
        const robotPos = robotPositions[color];
        if (robotPos.x === targetPosition.x && robotPos.y === targetPosition.y) {
          console.log(`[checkGoal] Goal achieved! Vortex target ${card.symbol} reached by ${color} robot at (${targetPosition.x}, ${targetPosition.y})`);
          return true;
        }
      }
    } else { // Specific color card
      const targetRobotColor = card.color;
      const robotPos = robotPositions[targetRobotColor];
      if (robotPos.x === targetPosition.x && robotPos.y === targetPosition.y) {
         console.log(`[checkGoal] Goal achieved! Target ${card.symbol} (${card.color}) reached by ${targetRobotColor} robot at (${targetPosition.x}, ${targetPosition.y})`);
        return true;
      }
    }

    // console.log(`[checkGoal] Goal not achieved for card ${targetKey} at (${targetPosition.x}, ${targetPosition.y}). Current positions: ${JSON.stringify(robotPositions)}`);
    return false; // Goal not met
  }

  private successCurrentSolution(): void {
    this.cleanup(); // Stop solution timer

    const currentPlayer = this.gameState.currentPlayer;
    if (currentPlayer) {
      const playerState = this.gameState.playerStates[currentPlayer]; // Use object access
      if (playerState) {
        playerState.score += this.rules.successPoints; // Award points
      }
    }

    // Move to the next card/round
    this.proceedToNextRound();
    this.emit('gameStateUpdated', this.getGameState()); // 成功状態を通知
  }

  private failCurrentSolution(): void {
    this.cleanup(); // Stop solution timer

    const currentPlayerId = this.gameState.currentPlayer; // This could be undefined if no one declared

    if (!currentPlayerId) {
      // If no one was attempting (because no one declared), just proceed to next round
      console.log("Solution timer ended, but no one declared. Proceeding to next round.");
      this.proceedToNextRound(); // This will emit gameStateUpdated
      return;
    }

    // Remove the current player from the declaration order
    // Penalty is no longer applied based on feedback
    if (this.gameState.declarationOrder) {
      this.gameState.declarationOrder = this.gameState.declarationOrder.filter(id => id !== currentPlayerId);
    } // Add missing closing bracket

    // Check if there are remaining players in the order
    if (this.gameState.declarationOrder && this.gameState.declarationOrder.length > 0) {
      // Move to the next player in the order
      this.gameState.currentPlayer = this.gameState.declarationOrder[0];
      this.startSolutionPhase(); // この中で emit される
    } else {
      // No more players left to attempt, proceed to the next round/card
      this.proceedToNextRound();
    }
    // State update is emitted within startSolutionPhase or proceedToNextRound
  }

  // moveToNextPlayer method removed as its logic is now handled within failCurrentSolution

  // Renamed from drawNextCard to avoid confusion with handleDrawCard
  private proceedToNextRound(): void {
    console.log(`[GameManager] Entering proceedToNextRound for room.`); // Add log
    const nextCard = this.cardDeck.drawNext();

    if (nextCard) {
      this.gameState.currentCard = nextCard;
      this.gameState.remainingCards = this.cardDeck.getRemaining();
      this.gameState.declarations = {};
      this.gameState.currentPlayer = undefined;
      this.gameState.declarationOrder = undefined;
      this.gameState.moveHistory = [];
      this.startDeclarationPhase(); // Start declaration for the new card
      console.log(`Proceeding to next round. Remaining cards: ${this.gameState.remainingCards}.`);
    } else {
      console.log("No more cards left in the deck. Ending game.");
      this.endGame();
    }
    // State update emitted within startDeclarationPhase or endGame
  }

  private endGame(): void {
    this.cleanup(); // Clear any running timers
    this.gameState.phase = GamePhase.FINISHED;

    // Calculate final rankings
    const playerScores = Object.entries(this.gameState.playerStates) // Use Object.entries
      .map(([playerId, state]) => ({ playerId, score: state.score }));

    // Sort players by score descending
    playerScores.sort((a, b) => b.score - a.score);

    // Assign ranks (handle ties)
    let rank = 1;
    this.gameState.rankings = playerScores.map((player, index) => {
      if (index > 0 && player.score < playerScores[index - 1].score) {
        rank = index + 1;
      }
      return { ...player, rank };
    });
    this.emit('gameStateUpdated', this.getGameState()); // ゲーム終了状態を通知
  }

  public getGameState(): MultiplayerGameState {
    // Return a copy to prevent direct modification
    // Deep copy might be needed if nested objects are mutable, but Records help here.
    // Consider using structuredClone for a true deep copy if necessary.
    return JSON.parse(JSON.stringify(this.gameState)); // Simple deep copy for now
  }

  // Centralized cleanup for timers
  public cleanup(): void {
    console.log(`[GameManager] Entering cleanup.`); // Add log
    if (this.timerInterval) {
      clearInterval(this.timerInterval);
      this.timerInterval = undefined;
    }
  }
}

================
File: server/src/server.ts
================
import express from 'express';
import { createServer } from 'http';
import { Server, Socket } from 'socket.io';
import dotenv from 'dotenv';
import { RoomManager } from './services/roomManager';
import { Player } from './types/player';
import { GamePhase, RobotColor } from './types/game'; // GamePhase と RobotColor をインポート
import winston from 'winston';

// 環境変数の読み込み
dotenv.config({ path: process.env.NODE_ENV === 'production' ? '.env' : '.env.development' });

// Loggerの設定
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  transports: [
    new winston.transports.Console(),
    new winston.transports.File({ filename: 'error.log', level: 'error' }),
    new winston.transports.File({ filename: 'combined.log' })
  ]
});

const app = express();
const httpServer = createServer(app);
const io = new Server(httpServer, {
  cors: {
    origin: process.env.CORS_ORIGIN,
    methods: ['GET', 'POST']
  }
});

const roomManager = new RoomManager();
const sessions = new Map<string, Player>(); // 型を Map<string, Player> に変更

// 接続中のプレイヤーを定期的にチェック (lastConnected を使用)
setInterval(() => {
  const now = Date.now();
  for (const [socketId, player] of sessions.entries()) {
    const timeSinceLastConnection = now - player.lastConnected.getTime();
    if (timeSinceLastConnection > 3600000) { // 1時間以上接続がない場合
      const socket = io.sockets.sockets.get(socketId);
      if (socket) {
        socket.disconnect(true); // Trigger disconnect event
      } else {
         // If socket doesn't exist in io.sockets, manually remove from sessions as disconnect handler won't fire
         logger.warn(`Socket ${socketId} not found in io.sockets during inactivity check. Manually removing session.`);
         sessions.delete(socketId);
      }
      // disconnect event handler should handle removal from room and sessions if socket.disconnect(true) was called
    }
  }
}, 10000);

// 非アクティブなルームを定期的にクリーンアップ
setInterval(() => {
  roomManager.cleanupInactiveRooms();
}, 300000); // 5分ごと

io.on('connection', (socket: Socket) => {
  logger.info(`New connection: ${socket.id}`);

  // 新規接続時に現在のルームリストを送信
  socket.emit('roomListUpdated', roomManager.getRoomSummaries());

  socket.on('register', ({ name }: { name: string }) => {
    try {
      const playerId = socket.id;
      const player: Player = {
        id: playerId,
        name: name,
        roomId: null,
        score: 0,
        connected: true,
        isHost: false,
        lastConnected: new Date() // lastConnected を追加
      };

      sessions.set(socket.id, player); // Player オブジェクトを保存

      socket.emit('registered', player); // 完全な Player オブジェクトを送信
      logger.info(`Player registered: ${name} (${playerId})`);
    } catch (error) {
      logger.error('Error in register:', error);
      socket.emit('error', { message: 'Failed to register' });
    }
  });

  socket.on('createRoom', ({ name, password, maxPlayers }: { name: string, password?: string, maxPlayers?: number }) => {
    try {
      const playerId = socket.id;
      const player = sessions.get(playerId); // sessions から Player を取得

      if (!player) {
        throw new Error('Player not registered');
      }

      player.isHost = true; // 取得した Player の isHost を設定
      player.lastConnected = new Date(); // アクティビティ更新

      const room = roomManager.createRoom(player, { name, password, maxPlayers });
      player.roomId = room.id; // Player オブジェクトに roomId を設定
      socket.join(room.id);
      socket.emit('roomCreated', room); // Room オブジェクト全体を送信
      io.emit('roomListUpdated', roomManager.getRoomSummaries());
      logger.info(`Room created: ${room.id} by ${player.name}`);

      // GameManager の gameStateUpdated イベントをリッスン
      room.gameManager.on('gameStateUpdated', (updatedGameState) => {
        io.to(room.id).emit('gameStateUpdated', updatedGameState);
        logger.info(`Broadcasting gameStateUpdated for room ${room.id}`);
      });
    } catch (error) {
      logger.error('Error in createRoom:', error);
      socket.emit('error', { message: error instanceof Error ? error.message : 'Failed to create room' });
    }
  });

  socket.on('joinRoom', ({ roomId, password }: { roomId: string, password?: string }) => {
    try {
      const playerId = socket.id;
      const player = sessions.get(playerId); // sessions から Player を取得

      if (!player) {
        throw new Error('Player not registered');
      }
      player.lastConnected = new Date(); // アクティビティ更新

      if (roomManager.joinRoom(player, roomId, password)) { // joinRoom に Player オブジェクトを渡すように変更
        player.roomId = roomId; // Player オブジェクトに roomId を設定
        socket.join(roomId);
        const room = roomManager.getRoom(roomId);
        if (room) {
          // 他のプレイヤーに通知
          socket.to(roomId).emit('playerJoined', player);

          // 参加したプレイヤーにルーム情報を送信
          socket.emit('roomJoined', room);

          // ゲームが進行中の場合、参加したプレイヤーに現在のゲーム状態を送信
          const gameState = room.gameManager.getGameState();
          if (gameState.phase !== GamePhase.WAITING) { // Compare with enum member
            socket.emit('gameStateUpdated', gameState); // gameStateUpdated イベントで送信
            logger.info(`Sent current game state to player ${player.name} joining room ${roomId}`);
          }

          // ルームリストを更新
          io.emit('roomListUpdated', roomManager.getRoomSummaries());
          logger.info(`Player ${player.name} joined room ${roomId}`);
        }
      }
    } catch (error) {
      logger.error('Error in joinRoom:', error);
      socket.emit('error', { message: error instanceof Error ? error.message : 'Failed to join room' });
    }
  });

  socket.on('leaveRoom', ({ roomId }: { roomId: string }) => {
    try {
      const playerId = socket.id;
      const player = sessions.get(playerId);

      if (!player) {
        throw new Error('Player not found in session');
      }

      if (roomManager.leaveRoom(playerId, roomId)) {
        player.roomId = null; // Player オブジェクトの roomId をリセット
        socket.leave(roomId);
        socket.to(roomId).emit('playerLeft', { playerId });
        io.emit('roomListUpdated', roomManager.getRoomSummaries());
        logger.info(`Player ${player.name} left room ${roomId}`);
      }
    } catch (error) {
      logger.error('Error in leaveRoom:', error);
      socket.emit('error', { message: error instanceof Error ? error.message : 'Failed to leave room' });
    }
  });

  socket.on('disconnect', () => {
    try {
      const player = sessions.get(socket.id); // Player オブジェクトを取得
      if (player) {
        logger.info(`Player disconnecting: ${player.name} (${socket.id})`);
        if (player.roomId) {
          try {
            roomManager.updatePlayerConnection(player.id, player.roomId, false);
            socket.to(player.roomId).emit('playerDisconnected', { playerId: player.id });
            logger.info(`Notified room ${player.roomId} about player ${player.name} disconnection`);
            // ホスト交代ロジックは roomManager.leaveRoom にあるため、ここでは不要
          } catch (roomError) {
             logger.error(`Error updating player connection status in room ${player.roomId} for player ${player.id}:`, roomError);
          }
        }
        sessions.delete(socket.id); // セッションから削除
        logger.info(`Player ${player.name} removed from sessions.`);
      } else {
         logger.warn(`Disconnect event for unknown socket ID: ${socket.id}`);
      }
    } catch (error) {
      logger.error('Error in disconnect handler:', error);
    }
  });

  // ヘルスチェック
  socket.on('ping', () => {
    const player = sessions.get(socket.id); // Player オブジェクトを取得
    if (player) {
      player.lastConnected = new Date(); // lastConnected を更新
      socket.emit('pong');
    }
  });

  // startGame イベントハンドラを追加
  socket.on('startGame', ({ roomId }: { roomId: string }) => {
    try {
      const playerId = socket.id;
      const player = sessions.get(playerId);

      // Player session check
      if (!player) {
        throw new Error('Player session not found.');
      }

      // Room and host check
      const room = roomManager.getRoom(roomId);
      if (!room) {
        throw new Error('Room not found');
      }
      if (room.hostId !== playerId) {
        throw new Error('Only the host can start the game');
      }

      logger.info(`startGame event received for room ${roomId} from host ${player.name}`);

      // Start game using GameManager
      const gameManager = room.gameManager;
      const currentPlayers = Array.from(room.players.values()); // Get current players from the room
      gameManager.startGame(currentPlayers); // Pass players to startGame

      // Get updated game state
      const initialGameState = gameManager.getGameState();

      // Emit gameStarted event to all clients in the room
      logger.info(`Emitting gameStarted for room ${roomId} with state:`, initialGameState); // Add log here
      io.to(roomId).emit('gameStarted', initialGameState);

      logger.info(`Game started in room ${roomId}. Initial state sent.`);

    } catch (error) {
      logger.error(`Error in startGame for room ${roomId}:`, error);
      // Ensure error message is sent correctly
      const message = error instanceof Error ? error.message : 'Failed to start game';
      socket.emit('error', { message });
    }
  });

  // drawCard イベントハンドラを追加
  socket.on('drawCard', ({ roomId }: { roomId: string }) => {
    try {
      const playerId = socket.id;
      const player = sessions.get(playerId);

      if (!player) {
        throw new Error('Player session not found.');
      }

      const room = roomManager.getRoom(roomId);
      if (!room) {
        throw new Error('Room not found');
      }

      // Optional: Add check if only specific player (e.g., host) can draw the first card
      // if (room.hostId !== playerId) {
      //   throw new Error('Only the host can draw the first card');
      // }

      logger.info(`drawCard event received for room ${roomId} from player ${player.name}`);

      const gameManager = room.gameManager;
      gameManager.handleDrawCard(playerId); // Call the new method in GameManager

      // gameStateUpdated is emitted by GameManager internally now

    } catch (error) {
      logger.error(`Error in drawCard for room ${roomId}:`, error);
      const message = error instanceof Error ? error.message : 'Failed to draw card';
      socket.emit('error', { message });
    }
  });

  // declareMoves イベントハンドラを追加
  socket.on('declareMoves', ({ roomId, moves }: { roomId: string, moves: number }) => {
    try {
      const playerId = socket.id;
      const player = sessions.get(playerId);

      if (!player) {
        throw new Error('Player session not found.');
      }

      const room = roomManager.getRoom(roomId);
      if (!room) {
        throw new Error('Room not found');
      }

      logger.info(`declareMoves event received for room ${roomId} from player ${player.name} with ${moves} moves`);

      const gameManager = room.gameManager;
      gameManager.declareMoves(playerId, moves); // GameManager に処理を委譲

      // gameStateUpdated は GameManager 内部で emit される

    } catch (error) {
      logger.error(`Error in declareMoves for room ${roomId}:`, error);
      const message = error instanceof Error ? error.message : 'Failed to declare moves';
      socket.emit('error', { message });
    }
  });

  // moveRobot イベントハンドラを追加
  socket.on('moveRobot', ({ roomId, robotColor, path }: { roomId: string, robotColor: string, path: { x: number, y: number }[] }) => {
    try {
      const playerId = socket.id;
      const player = sessions.get(playerId);

      if (!player) {
        throw new Error('Player session not found.');
      }

      const room = roomManager.getRoom(roomId);
      if (!room) {
        throw new Error('Room not found');
      }
      // Add detailed log for event reception
      logger.info(`[Server Event] moveRobot received. SocketID: ${socket.id}, PlayerID: ${playerId}, RoomID: ${roomId}, RobotColor: ${robotColor}, PathLength: ${path.length}`);

      const gameManager = room.gameManager;
      // Call GameManager method
      gameManager.moveRobot(playerId, robotColor as RobotColor, path);

      // gameStateUpdated は GameManager 内部で emit される想定

    } catch (error) {
      logger.error(`Error in moveRobot for room ${roomId}:`, error);
      const message = error instanceof Error ? error.message : 'Failed to move robot';
      socket.emit('error', { message });
    }
  });

});

const PORT = process.env.PORT || 3001;
const HOST = process.env.HOST || 'localhost';

httpServer.listen(Number(PORT), HOST, () => { // PORT を数値に変換
  logger.info(`Server is running on http://${HOST}:${PORT}`);
});

// エラーハンドリング
process.on('uncaughtException', (error) => {
  logger.error('Uncaught Exception:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  logger.error('Unhandled Rejection at:', promise, 'reason:', reason);
});

================
File: src/pages/GamePage.tsx
================
import { FC, useEffect, useState, useRef } from 'react'; // useState, useRefを追加
import { useParams, useNavigate } from 'react-router-dom';
import GameBoard from '../components/GameBoard/GameBoard';
import useGameStore from '../stores/gameStore'; // useGameStoreをインポート
import GameInfo from '../components/GameInfo'; // GameInfo をインポート
import { DeclarationCardList } from '../components/DeclarationCard'; // DeclarationCardListをインポート
import GameResultDisplay from '../components/GameResultDisplay'; // GameResultDisplayをインポート
import { Player } from '../types/player'; // Player型をインポート
// Direction と Card['color'] (CardColorの代わり) をインポート
import { RobotColor, Position, GamePhase, Direction, Card, Board } from '../types/game'; // Board をインポート
import { calculatePath } from '../utils/robotMovement'; // calculatePathをインポート

// レイアウト定数 (SinglePlayerPageから移植・調整)
const LEFT_SIDEBAR_WIDTH = 288; // 左サイドバーの幅 (仮、Tailwindのcol-span-1とgap-6から推測) - grid-cols-4 gap-6 -> 1/4幅 - gap分
const RIGHT_SIDEBAR_WIDTH = 288; // 右サイドバーの幅 (仮)
const DECLARATION_HEIGHT = 140; // 宣言エリアの高さ (仮) - GamePageでは未使用だが念のため
const BOARD_SCALE_FACTOR = 0.9; // ボードのスケーリング係数 (調整)

// アニメーション中のロボット情報
interface MovingRobotInfo {
  startPos: Position;
  endPos: Position;
  startTime: number;
  duration: number; // アニメーション時間 (ms)
}
// --- ヘルパー関数 ---
const getPhaseText = (phase: GamePhase): string => {
  switch (phase) {
    case 'waiting': return '待機中';
    case 'declaration': return '宣言フェーズ';
    case 'solution': return '解法提示フェーズ';
    case 'finished': return 'ゲーム終了';
    default: return phase;
  }
};

const getTargetColorClass = (color: Card['color']): string => { // Card['color'] を使用
  switch (color) {
    case 'red': return 'text-red-600';
    case 'blue': return 'text-blue-600';
    case 'green': return 'text-green-600';
    case 'yellow': return 'text-yellow-600';
    case 'colors': return 'bg-gradient-to-r from-red-500 via-blue-500 to-green-500 text-transparent bg-clip-text'; // 仮の多色表示
    default: return 'text-gray-600';
  }
};
// --- ここまで ---


const GamePage: FC = () => {
  const { roomId } = useParams<{ roomId: string }>();
  const navigate = useNavigate();
  // useGameStoreから必要な状態とアクションを取得
  const {
    game,
    generatedBoard, // generatedBoard を取得
    currentRoom,
    currentPlayer,
    startGame,
    declareMoves: storeDeclareMoves, // 名前衝突を避ける
    moveRobot: storeMoveRobot,       // 名前衝突を避ける
    drawCard, // drawCard アクションを取得
    leaveRoom,
    isConnected,
    isConnecting, // isConnecting を追加
    connectionError,
  } = useGameStore();

  // 表示用ボード状態とアニメーション状態
  const [displayedBoard, setDisplayedBoard] = useState<Board | null>(null);
  const [movingRobots, setMovingRobots] = useState<Record<RobotColor, MovingRobotInfo>>({} as Record<RobotColor, MovingRobotInfo>); // 型アサーションで初期化
  const prevGameRef = useRef(game); // 前回の game state を保持
  const animationFrameRef = useRef<number | null>(null); // 型を number | null に変更し、初期値を null に
  const containerRef = useRef<HTMLDivElement>(null); // ボードコンテナの参照

  // roomIdがない、または接続エラーがあればオンラインページに戻る
  useEffect(() => {
    if (!isConnected || connectionError) {
      console.error('Not connected or connection error, navigating back.');
      navigate('/online');
    }
    // TODO: ルームが存在しない場合の処理 (currentRoomがnullになったら?)
  }, [isConnected, connectionError, navigate]);

  // generatedBoard が変更されたら displayedBoard を初期化
  useEffect(() => {
    if (generatedBoard) {
      setDisplayedBoard(generatedBoard);
    }
  }, [generatedBoard]);

  // game state (特に robotPositions) が変更されたらアニメーションを開始
  useEffect(() => {
    const prevGame = prevGameRef.current;
    // game または prevGame が null、または robotPositions がなければ何もしない
    if (!game || !prevGame || !game.robotPositions || !prevGame.robotPositions) {
      prevGameRef.current = game; // 現在の game state を保存
      // game が null でなく、displayedBoard がまだ設定されていない場合は初期設定
      if (game && !displayedBoard && generatedBoard) {
         setDisplayedBoard({
           ...generatedBoard,
           robots: generatedBoard.robots.map(robot => ({
             ...robot,
             position: game.robotPositions?.[robot.color] ?? robot.position,
           })),
         });
      }
      return;
    }

    const newMovingRobots: Record<RobotColor, MovingRobotInfo> = {} as Record<RobotColor, MovingRobotInfo>; // 型アサーションで初期化
    const animationDuration = 150; // アニメーション時間 (ms)
    let boardNeedsUpdate = false;

    // 各ロボットの位置変更をチェック
    for (const color in game.robotPositions) {
      const robotColor = color as RobotColor;
      const currentPos = game.robotPositions[robotColor];
      const prevPos = prevGame.robotPositions?.[robotColor];

      // 位置が変更されているか、または displayedBoard の位置と異なる場合
      if (prevPos && (currentPos.x !== prevPos.x || currentPos.y !== prevPos.y)) {
         // displayedBoard の現在の表示位置を取得
         const displayedRobot = displayedBoard?.robots.find(r => r.color === robotColor);
         const startPos = displayedRobot?.position ?? prevPos; // 表示中の位置を開始点に

        // すでにアニメーション中なら、それをキャンセルして新しいアニメーションを開始
        // (サーバーからの更新が連続した場合に対応)
        newMovingRobots[robotColor] = {
          startPos: startPos,
          endPos: currentPos,
          startTime: performance.now(),
          duration: animationDuration,
        };
        boardNeedsUpdate = true;
      }
    }

    if (boardNeedsUpdate) {
      setMovingRobots(prev => ({ ...prev, ...newMovingRobots }));
    }

    // 現在の game state を次回の比較用に保存
    prevGameRef.current = game;

  }, [game, generatedBoard, displayedBoard]); // displayedBoard も依存配列に追加


  // アニメーションループ
  useEffect(() => {
    const animate = (now: number) => {
      let activeAnimations = false;
      let boardChanged = false;

      setDisplayedBoard(prevBoard => {
        if (!prevBoard) return null;

        const nextRobots = prevBoard.robots.map(robot => {
          const moveInfo = movingRobots[robot.color];
          if (!moveInfo) return robot; // アニメーション対象外

          activeAnimations = true; // まだアニメーション中のロボットがある
          const elapsedTime = now - moveInfo.startTime;
          const progress = Math.min(elapsedTime / moveInfo.duration, 1);

          // 線形補間 (Lerp) で中間位置を計算
          const currentX = moveInfo.startPos.x + (moveInfo.endPos.x - moveInfo.startPos.x) * progress;
          const currentY = moveInfo.startPos.y + (moveInfo.endPos.y - moveInfo.startPos.y) * progress;

          // わずかな変化でも更新するようにする
          if (robot.position.x !== currentX || robot.position.y !== currentY) {
             boardChanged = true;
             return {
               ...robot,
               position: { x: currentX, y: currentY },
             };
          }
          return robot; // 位置が変わらなければ元のロボットオブジェクトを返す
        });

        // ボードの状態が実際に変更された場合のみ新しいオブジェクトを返す
        return boardChanged ? { ...prevBoard, robots: nextRobots } : prevBoard;
      });

      // アニメーションが完了したロボットを movingRobots から削除
      setMovingRobots(currentMoving => {
        const nextMoving: Record<RobotColor, MovingRobotInfo> = {} as Record<RobotColor, MovingRobotInfo>; // 型アサーションで初期化
        let changed = false;
        for (const color in currentMoving) {
          const robotColor = color as RobotColor;
          const info = currentMoving[robotColor];
          const elapsedTime = now - info.startTime;
          if (elapsedTime < info.duration) {
            nextMoving[robotColor] = info; // まだアニメーション中
          } else {
            changed = true; // このロボットのアニメーションが完了
            // 完了時は最終位置に確定させる (補間誤差対策)
             setDisplayedBoard(prevBoard => {
               if (!prevBoard) return null;
               const finalRobots = prevBoard.robots.map(r => {
                 if (r.color === robotColor) {
                   // 最終位置が異なる場合のみ更新
                   if (r.position.x !== info.endPos.x || r.position.y !== info.endPos.y) {
                     return { ...r, position: info.endPos };
                   }
                 }
                 return r;
               });
               // displayedBoard の robots 配列が実際に変更されたかチェック
               const boardActuallyChanged = prevBoard.robots.some((r, i) => r !== finalRobots[i]);
               return boardActuallyChanged ? { ...prevBoard, robots: finalRobots } : prevBoard;
             });
          }
        }
        // movingRobots state が実際に変更された場合のみ更新
        return changed ? nextMoving : currentMoving;
      });


      // まだアクティブなアニメーションがあれば次のフレームを要求
      if (activeAnimations) {
        animationFrameRef.current = requestAnimationFrame(animate);
      } else {
        animationFrameRef.current = null; // null を代入
      }
    };

    // movingRobots にアニメーション対象があればループを開始
    if (Object.keys(movingRobots).length > 0) {
      animationFrameRef.current = requestAnimationFrame(animate);
    }

    // クリーンアップ関数
    return () => {
      if (animationFrameRef.current) {
        cancelAnimationFrame(animationFrameRef.current);
        animationFrameRef.current = null; // null を代入
      }
    };
  }, [movingRobots]); // movingRobots が変更されたら再実行

  // --- アクションハンドラーを gameStore に接続 ---
  const handleStartGame = () => {
    startGame(); // gameStoreのアクションを呼び出す
  };

  // handleFlipCard はサーバー側で自動で行われる想定のため削除

  const handleDeclareMoves = (moves: number) => {
    storeDeclareMoves(moves); // gameStoreのアクションを呼び出す
  };

  // GameBoardから方向を受け取り、パスを計算してstoreのアクションを呼ぶ
  const handleRobotMove = (robotColor: RobotColor, direction: Direction) => { // 引数を direction に変更
    // generatedBoard と game、currentPlayer が存在するかチェック
    if (!generatedBoard || !game || !currentPlayer) return;

    // generatedBoard からロボット情報を取得
    const robot = generatedBoard.robots.find(r => r.color === robotColor);
    if (!robot) {
      console.error(`[GamePage] Robot with color ${robotColor} not found in generatedBoard.`);
      return;
    }

    // generatedBoard を使ってパスを計算
    const path = calculatePath(generatedBoard, robot, direction);

    if (path.length > 1) { // 移動があった場合のみ送信
       storeMoveRobot(robotColor, path); // 計算したパスを渡す
    }
  };

  const handleDrawCard = () => { // drawCard ハンドラーを追加
    drawCard();
  };


  const handleLeaveRoom = () => {
    leaveRoom();
    navigate('/online'); // 退室後はオンラインページへ
  };
  // --- ここまで ---

  // --- UI表示のための準備 ---
  // 接続状態のチェック
  if (isConnecting) {
    return <div className="p-4 text-center">サーバーに接続中...</div>;
  }
  if (!isConnected || connectionError) {
    return <div className="p-4 text-center text-red-600">サーバーに接続できませんでした。({connectionError || '不明なエラー'})</div>;
  }
  // currentRoom がない場合はローディング表示 (接続後)
  if (!currentRoom) {
    // TODO: もっと良いローディング表示/エラー表示
    return <div className="p-4 text-center">ルーム情報を読み込み中...</div>;
  }
  // players をオブジェクトから配列に変換
  const playersArray = Object.values(currentRoom.players);

  // ボードのスケーリング計算 (SinglePlayerPageから移植・調整)
  const getBoardScale = () => {
    // displayedBoard またはコンテナがない場合はデフォルトスケール
    // game ではなく displayedBoard の有無で判断する
    if (!displayedBoard || !containerRef.current) return 1;

    const containerWidth = containerRef.current.offsetWidth;
    const containerHeight = containerRef.current.offsetHeight;

    // GameBoardの基本サイズ (40px * board.size)
    const baseSize = displayedBoard.size * 40;

    // padding (p-4) を考慮に入れる必要があるかもしれないが、一旦無視
    const scaleX = containerWidth / baseSize;
    const scaleY = containerHeight / baseSize;

    // 最小のスケールを採用し、最大1倍、係数をかける
    return Math.min(scaleX, scaleY, 1) * BOARD_SCALE_FACTOR;
  };

  const scale = getBoardScale();
  // --- ここまで ---


  return (
    <div className="min-h-screen bg-gray-100">
      {/* ヘッダー */}
      <header className="bg-white shadow-sm">
        <div className="max-w-7xl mx-auto px-4 py-3">
          <div className="flex justify-between items-center">
            <h1 className="text-xl font-bold text-gray-800">
              ルーム: {decodeURIComponent(roomId || '')}
            </h1>
            <button
              className="btn bg-gray-300 text-gray-700 hover:bg-gray-400 disabled:opacity-50"
              onClick={handleLeaveRoom}
              disabled={!isConnected} // 未接続時は無効
            >
              退室
            </button>
          </div>
        </div>
      </header>

      {/* メインコンテンツ */}
      <main className="max-w-7xl mx-auto px-4 py-6">
        <div className="grid grid-cols-4 gap-6">
          {/* 左サイドバー - プレイヤー情報 */}
          {/* 左サイドバー - プレイヤー情報 */}
          {/* 左サイドバー - プレイヤー情報 */}
          <div className="col-span-1 bg-white rounded-lg shadow p-4">
            <h2 className="text-lg font-bold mb-4">プレイヤー</h2>
            <div className="space-y-2">
              {/* playersArray を使用 */}
              {playersArray.map((player: Player) => (
                <div
                  key={player.id}
                  className={`flex justify-between items-center p-2 rounded ${
                    // game が存在する かつ 手番プレイヤーの場合に強調
                    game && player.id === game.currentPlayer ? 'bg-blue-100 ring-2 ring-blue-300' : 'bg-gray-50'
                  } ${
                    !player.connected ? 'opacity-50' : '' // 非接続プレイヤーを薄く表示
                  }`}
                >
                  <span className="flex items-center">
                     <span className={`w-2 h-2 rounded-full mr-2 ${player.connected ? 'bg-green-500' : 'bg-gray-400'}`}></span> {/* 接続状態表示 */}
                    {player.name}
                    {player.id === currentRoom.hostId && ' (Host)'} {/* ホスト表示 */}
                    {player.id === currentPlayer?.id && ' (You)'} {/* 自分を表示 */}
                    {/* 解答権順序の表示 (playingフェーズかつdeclarationOrderが存在する場合) */}
                    {game && game.phase === 'solution' && game.declarationOrder && game.declarationOrder.includes(player.id) && (
                      <span className="ml-2 text-xs text-gray-500">
                        (解答権: {game.declarationOrder.indexOf(player.id) + 1})
                      </span>
                    )}
                  </span>
                  {/* game が存在するならスコア表示 */}
                  <span className="font-bold">{game && game.playerStates[player.id] !== undefined ? `${game.playerStates[player.id].score}pt` : '0pt'}</span>
                </div>
              ))}
            </div>
             {/* 宣言表示 (game が存在する場合) */}
             {game && (game.phase === 'declaration' || game.phase === 'solution') ? (
                <div className="mt-4 pt-4 border-t">
                  <h3 className="text-md font-semibold mb-2">宣言</h3>
                  <div className="space-y-1 text-sm">
                    {/* game.declarations が存在する場合 */}
                    {game.declarations && Object.values(game.declarations).map(decl => ( // Use Object.values() here
                      <div key={decl.playerId} className="flex justify-between">
                        {/* playersArray を使用して find */}
                        <span>{playersArray.find((p: Player) => p.id === decl.playerId)?.name ?? '不明'}</span>
                        <span>{decl.moves === null ? '考え中...' : `${decl.moves}手`}</span>
                      </div>
                    ))}
                  </div>
                </div>
              ) : null}
          </div>

          {/* メインエリア - ゲームボードと宣言 */}
          {/* ref を追加し、flex-grow を削除してコンテナがサイズを持つようにする */}
          <div ref={containerRef} className="col-span-2 bg-white rounded-lg shadow p-4 flex flex-col items-center justify-center">
            {/* GameBoard を含む div にスケールを適用 */}
            {/* flex-grow を削除し、基本サイズとスケールを設定 */}
            <div
              className="relative" // スケーリングの基点用
              style={{
                width: displayedBoard ? `${displayedBoard.size * 40}px` : '640px', // 基本サイズ指定 (16*40)
                height: displayedBoard ? `${displayedBoard.size * 40}px` : '640px',
                transform: `scale(${scale})`,
                transformOrigin: 'center center',
                transition: 'transform 0.3s ease-out' // スムーズなスケーリング変化のため
              }}
            >
              {/* displayedBoard が存在するなら GameBoard を表示 */}
              {displayedBoard ? (
                <GameBoard
                  board={displayedBoard} // アニメーション状態を含むボードを渡す
                  onRobotMove={handleRobotMove}
                  // isPlayerTurn は game state と接続状態から判断
                  isPlayerTurn={isConnected && game?.phase === 'solution' && game?.currentPlayer === currentPlayer?.id}
                />
              ) : (
                // ローディング表示も中央に配置
                <div className="absolute inset-0 flex items-center justify-center text-gray-500">ボード情報を読み込み中...</div>
              )}
            </div>
             {/* 宣言カードリスト (game が存在する場合) */}
             {game && game.phase === 'declaration' && (
              <div className="mt-4 pt-4 border-t w-full"> {/* w-full を追加 */}
                <DeclarationCardList
                  selectedNumber={(() => {
                    const currentMoves = currentPlayer?.id ? game.declarations?.[currentPlayer.id]?.moves : undefined;
                    return typeof currentMoves === 'number' ? currentMoves : null;
                  })()}
                  maxNumber={30} // 仮の最大手数
                  onSelect={handleDeclareMoves}
                  // 宣言済み、または未接続なら無効化
                  isDisabled={!isConnected || game.declarations?.[currentPlayer?.id ?? '']?.moves != null}
                  className="mt-2"
                />
              </div>
            )}
          </div>

          {/* 右サイドバー - ゲーム情報と操作 */}
          <div className="col-span-1 space-y-4">
            {/* GameInfo コンポーネントを使用 (game と currentRoom が存在する場合) */}
            {game && currentRoom && (
              <div className="bg-white rounded-lg shadow p-4">
                 <GameInfo
                   scores={game.playerStates ? Object.fromEntries(Object.entries(game.playerStates).map(([id, state]) => [id, state.score])) : {}} // playerStates から scores を抽出
                   players={currentRoom.players}
                   moveCount={game.moveHistory?.length ?? 0} // moveHistory から手数を計算 (存在しない場合は0)
                   declaredMoves={currentPlayer?.id ? game.declarations?.[currentPlayer.id]?.moves ?? 0 : 0} // 自分の宣言手数を取得
                   timer={game.timer}
                   isDeclarationPhase={game.phase === 'declaration'}
                   currentCard={game.currentCard ?? undefined} // currentCard が null の場合は undefined を渡す
                   remainingCards={game.remainingCards}
                   onDrawCard={handleDrawCard} // handleDrawCard を渡す
                   phase={game.phase}
                 />
              </div>
            )}

            {/* ゲームコントロール */}
            <div className="bg-white rounded-lg shadow p-4">
              <h2 className="text-lg font-bold mb-2">操作</h2>
              <div className="space-y-2">
                {/* ゲームスタートボタン (ホスト用, gameがnull) */}
                {currentRoom.hostId === currentPlayer?.id && !game && (
                  <button
                    className="btn btn-primary w-full disabled:opacity-50"
                    onClick={handleStartGame}
                    disabled={!isConnected} // 未接続時は無効
                  >
                    ゲームスタート
                  </button>
                )}
                {/* カードをめくるボタン (宣言フェーズで、まだカードがめくられていない場合) */}
                {currentRoom.hostId === currentPlayer?.id && game && game.phase === 'waiting' && !game.currentCard && (
                  <button
                    className="btn btn-secondary w-full disabled:opacity-50"
                    onClick={handleDrawCard}
                    disabled={!isConnected} // 未接続時は無効
                  >
                    カードをめくる ({game.remainingCards} 枚)
                  </button>
                )}
              </div>
            </div>

             {/* ゲーム結果表示 (game が存在する場合) */}
             {game && game.phase === 'finished' && (
               <GameResultDisplay
                 players={playersArray} // playersArray を渡す
                 onLeaveRoom={handleLeaveRoom} // handleLeaveRoom を渡す
               />
             )}
          </div>
        </div>
      </main>
    </div>
  );
};

export default GamePage;

================
File: src/stores/gameStore.ts
================
import { create } from 'zustand';
import { Player } from '../types/player';
import { Room, RoomSummary } from '../types/room';
import SocketService from '../services/socketService';
import { Board, Card, GamePhase, Position, RobotColor, GameState, MultiplayerGameState, Declaration, Robot } from '../types/game'; // Import MultiplayerGameState, Declaration, Robot
import BoardLoader from '../utils/boardLoader'; // Import BoardLoader
import { generateBoardFromPattern } from '../utils/boardGenerator'; // Import board generator
import { createCompositeBoardPattern } from '../utils/boardRotation'; // Import composite board creator
import { BoardPattern } from '../types/board'; // Import BoardPattern
// --- 型ガード関数 ---
function isMultiplayerGameState(state: any): state is MultiplayerGameState {
  return (
    state !== null &&
    typeof state === 'object' &&
    'board' in state && // board が null の可能性もあるが、プロパティ自体は存在するはず
    'currentCard' in state &&
    'phase' in state &&
    'timer' in state &&
    'declarations' in state &&
    'currentPlayerTurn' in state &&
    'scores' in state &&
    'moveHistory' in state &&
    'remainingCards' in state &&
    'totalCards' in state
    // winner, declarationOrder, rankings はオプショナルなのでチェック不要
  );
}
// --- ここまで ---


// Remove internal duplicate definitions of Declaration and MultiplayerGameState
interface GameStore {
  isConnected: boolean;
  isConnecting: boolean;
  connectionError: string | null;
  currentPlayer: Player | null;
  currentRoom: Room | null;
  availableRooms: RoomSummary[];
  socketId: string | null; // Add socketId state
  // --- マルチプレイヤーゲーム状態を追加 ---
  game: MultiplayerGameState | null; // ゲーム全体の状態 (動的情報)
  generatedBoard: Board | null; // クライアント側で生成したボード (静的情報 + 初期ロボット配置)
  // --- ここまで ---
  connect: () => Promise<void>;
  disconnect: () => void;
  registerPlayer: (name: string) => void;
  createRoom: (options: { name: string; password?: string }) => Promise<Room>; // Promise<Room> を返すように変更
  joinRoom: (roomId: string, password?: string) => void; // TODO: joinRoomもPromise化を検討
  leaveRoom: () => void;
  setConnectionError: (error: string | null) => void;
  // --- ゲームアクションを追加 ---
  startGame: () => void;
  declareMoves: (moves: number) => void;
  moveRobot: (robotColor: RobotColor, path: Position[]) => void; // pathを受け取るように変更
  drawCard: () => void; // カードを引くアクションを追加
  // --- ここまで ---
}

const useGameStore = create<GameStore>((set, get) => ({
  isConnected: false,
  isConnecting: false,
  connectionError: null,
  currentPlayer: null,
  currentRoom: null,
  availableRooms: [],
  socketId: null, // Initial value
  // --- ゲーム状態の初期値を追加 ---
  game: null,
  generatedBoard: null, // 初期値
  // --- ここまで ---

  connect: async () => {
    const socketService = SocketService.getInstance();
    set({ isConnecting: true, connectionError: null, socketId: null }); // Reset socketId

    try {
      const connectedSocketId = await socketService.connect(); // Get socket ID
      set({ isConnected: true, isConnecting: false, socketId: connectedSocketId }); // Store socket ID

      socketService.onRegistered((player) => { // Call onRegistered instead
        console.log('[GameStore] Received registered event:', player); // Log updated
        set({ currentPlayer: player });
        console.log('[GameStore] currentPlayer state updated.'); // ログ追加
      });

      socketService.onRoomCreated((room) => {
        set({ currentRoom: room });
      });

      socketService.onRoomJoined((room) => {
        // room オブジェクトと players プロパティが存在するかチェック
        // room オブジェクトと players プロパティが存在するか、より詳細にチェック
        if (!room || typeof room !== 'object') {
          console.error('[GameStore] Received invalid room object in onRoomJoined:', room);
          return;
        }
        if (!room.players || typeof room.players !== 'object') {
           console.error('[GameStore] Received room object without valid players property in onRoomJoined:', room);
          return; // 不正なデータの場合は更新しない
        }

        set((state) => {
          // currentPlayer が null でないことを確認してから id を使用
          const playerId = state.currentPlayer?.id;
          // room.players が存在することを前提にアクセス
          const myPlayerInfo = playerId ? room.players[playerId] : undefined;

          // currentPlayer が存在し、かつ myPlayerInfo が見つかった場合のみ更新
          // サーバーからの情報 (myPlayerInfo) があればそれを優先し、なければ既存の state.currentPlayer を維持
          const updatedPlayer = myPlayerInfo
            ? { ...(state.currentPlayer || {}), ...myPlayerInfo } // state.currentPlayerがnullでもマージ可能に
            : state.currentPlayer;

          return {
            currentRoom: room,
            // ルーム参加時はゲーム状態をリセット
            game: null,
            currentPlayer: updatedPlayer,
          };
        });
      });

      socketService.onRoomLeft(() => {
        // ルーム退出時はゲーム状態もリセット
        set({ currentRoom: null, game: null, generatedBoard: null }); // generatedBoard もリセット
      });

      socketService.onRoomUpdated((room) => {
        const { currentRoom } = get(); // get() は set の外で使う
        if (currentRoom && currentRoom.id === room.id) {
          set((state) => { // set の中で get() を使わないように state を使う
            const myPlayerInfo = room.players[state.currentPlayer?.id ?? ''];
            // サーバーから送られてきた gameState を使う
            // 型ガード関数を使用して MultiplayerGameState かどうかをチェック
            const nextGameState = isMultiplayerGameState(room.gameState)
              ? room.gameState // 型ガードが成功すれば安全に割り当て可能
              : state.game; // それ以外は既存の state.game を維持
            return {
              currentRoom: room,
              game: nextGameState,
              // 自分の情報がルームにあれば currentPlayer を更新
              currentPlayer: myPlayerInfo ? { ...(state.currentPlayer || {}), ...myPlayerInfo } : state.currentPlayer, // state.currentPlayerがnullでもマージ可能に
            };
          });
        }
      });
      // ルームリスト更新リスナーを追加
      socketService.onRoomListUpdated((rooms) => { // メソッド名を修正
        set({ availableRooms: rooms });
      });
      // --- ここまで ---

      socketService.onError((error) => {
        set({ connectionError: error.message });
      });

      // --- ゲームイベントリスナーを登録 ---
      socketService.onGameStarted((initialGameState) => {
        console.log('[GameStore] Received gameStarted event. Initial game state:', initialGameState); // ★ログ追加1

        // --- ボード生成ロジック ---
        let generatedBoard: Board | null = null;
        if (initialGameState.boardPatternIds && initialGameState.boardPatternIds.length === 4) {
          console.log('[GameStore] Valid boardPatternIds found:', initialGameState.boardPatternIds); // ★ログ追加2
          try {
            const boardLoader = BoardLoader.getInstance();
            console.log('[GameStore] BoardLoader instance obtained.'); // ★ログ追加3

            const patterns = initialGameState.boardPatternIds.map(serverId => {
              // サーバーからのID (例: 'A1') を BoardLoader が期待する形式 (例: 'board_A1') に変換
              const loaderId = `board_${serverId}`;
              console.log(`[GameStore] Trying to load board with loaderId: ${loaderId}`); // ★ログ追加
              const pattern = boardLoader.getBoardById(loaderId);
              if (!pattern) {
                console.error(`[GameStore] Board pattern with loaderId ${loaderId} (server ID: ${serverId}) not found.`); // ★ログ変更
                throw new Error(`Board pattern with loaderId ${loaderId} not found.`);
              }
              console.log(`[GameStore] Board pattern ${loaderId} loaded:`, pattern); // ★ログ追加4
              return pattern;
            });

            // 4つのパターンを合成 (createCompositeBoardPattern は BoardPattern を期待する)
            const compositePattern: BoardPattern = createCompositeBoardPattern(patterns[0], patterns[1], patterns[2], patterns[3]);
            console.log('[GameStore] Composite board pattern created:', compositePattern); // ★ログ追加5

            // 合成パターンから Board オブジェクトを生成
            // generateBoardFromPattern はロボットも初期配置する
            generatedBoard = generateBoardFromPattern(compositePattern);
            console.log('[GameStore] Board generated from composite pattern:', generatedBoard); // ★ログ追加6

            // サーバーからのロボット初期位置を Board オブジェクトに反映させる (重要)
            if (generatedBoard && initialGameState.robotPositions) {
               console.log('[GameStore] Applying initial robot positions from server:', initialGameState.robotPositions); // ★ログ追加7
               generatedBoard.robots = generatedBoard.robots.map(robot => ({
                 ...robot,
                 position: initialGameState.robotPositions[robot.color] ?? robot.position // サーバーの位置情報があれば上書き
               }));
               console.log('[GameStore] Robot positions updated in generatedBoard:', generatedBoard.robots); // ★ログ追加8
            }

            console.log('[GameStore] Board generated successfully.');
          } catch (error) {
            console.error('[GameStore] Failed to generate board during process:', error); // ★ログ変更
            // エラーが発生した場合、generatedBoard は null のまま
          }
        } else {
          console.error('[GameStore] Invalid or missing boardPatternIds in initialGameState. Received:', initialGameState.boardPatternIds); // ★ログ変更
        }
        // --- ここまで ---

        console.log('[GameStore] Setting game state and generated board:', generatedBoard); // ★ログ追加9
        set({ game: initialGameState, generatedBoard: generatedBoard }); // 生成したボードもセット
      });

      socketService.onGameStateUpdated((gameStateUpdate) => {
        // console.log('[GameStore] Received gameStateUpdated event:', gameStateUpdate); // デバッグログ削除
        set((state) => {
          // console.log('[GameStore] Updating game state. Current declarations:', state.game?.declarations, 'Update declarations:', gameStateUpdate.declarations); // デバッグログ削除
          const updatedGame = state.game ? { ...state.game, ...gameStateUpdate } : null;
          // console.log('[GameStore] New game state after update:', updatedGame); // デバッグログ削除
          return { game: updatedGame };
        });
      });

      socketService.onDeclarationMade(({ playerId, moves }) => {
        console.log(`[GameStore] Declaration made by ${playerId}: ${moves}`);
        set((state) => {
          if (!state.game) return {};
          // declarations is now Record<string, Declaration>
          const updatedDeclarations = {
            ...state.game.declarations,
            [playerId]: {
              ...(state.game.declarations[playerId] || { playerId, timestamp: Date.now() }), // Keep existing timestamp if available
              moves: moves ?? 0, // Use received moves, default to 0 if null (adjust as needed)
              // Note: Server sends Declaration type which has non-null moves.
              // Client internal Declaration type had nullable moves, which is removed now.
              // Assuming server sends valid number or handle potential null if server logic changes.
            }
          };
          return { game: { ...state.game, declarations: updatedDeclarations } };
        });
      });

      socketService.onTurnChanged(({ currentPlayerTurn }) => {
         console.log(`[GameStore] Turn changed to: ${currentPlayerTurn}`);
         set((state) => ({
           game: state.game ? { ...state.game, currentPlayerTurn } : null,
         }));
      });

      socketService.onSolutionAttemptResult(({ success, scores, nextPlayerId }) => {
        console.log(`[GameStore] Solution attempt result: ${success}, next: ${nextPlayerId}`);
        set((state) => ({
          game: state.game ? { ...state.game, scores, currentPlayerTurn: nextPlayerId ?? null } : null,
          // Optionally add feedback for success/failure
        }));
      });

      socketService.onGameOver(({ winner, scores }) => {
        console.log(`[GameStore] Game over! Winner: ${winner?.name ?? 'None'}`);
        set((state) => ({
          game: state.game ? { ...state.game, phase: 'finished', winner, scores } : null,
        }));
      });
      // --- ここまで ---

    } catch (error) {
      set({
        isConnected: false,
        isConnecting: false,
        connectionError: error instanceof Error ? error.message : 'Unknown error occurred',
        socketId: null, // Reset socketId on error
      });
    }
  },

  disconnect: () => {
    const socketService = SocketService.getInstance();
    socketService.disconnect();
    socketService.removeAllListeners();
    set({
      isConnected: false,
      currentPlayer: null,
      currentRoom: null,
      availableRooms: [],
      game: null, // ゲーム状態もリセット
      generatedBoard: null, // 生成ボードもリセット
      socketId: null, // Reset socketId on disconnect
    });
  },

  registerPlayer: (name: string) => {
    const socketService = SocketService.getInstance();
    socketService.registerPlayer(name);
  },

  // async にし、Promise<Room> を返すように変更
  createRoom: async (options: { name: string; password?: string }): Promise<Room> => {
    const socketService = SocketService.getInstance();
    set({ connectionError: null }); // エラーをクリア
    try {
      // socketService.createRoom を呼び出し、結果を待つ
      const room = await socketService.createRoom(options);
      // 成功した場合、状態を更新 (サーバーからの roomCreated イベントでも更新されるが、即時反映のため)
      // set({ currentRoom: room }); // roomCreatedイベントで更新されるので不要かも
      return room; // 成功した Room オブジェクトを返す
    } catch (error) {
      console.error('[GameStore] Failed to create room:', error);
      const errorMessage = error instanceof Error ? error.message : 'Unknown error creating room';
      set({ connectionError: errorMessage });
      throw error; // エラーを再スローして呼び出し元で処理できるようにする
    }
  },

  // void を返すように戻す
  joinRoom: (roomId: string, password?: string): void => {
    const socketService = SocketService.getInstance();
    set({ connectionError: null }); // エラーをクリア
    // joinRoom は void を返すようになったため、try...catch は不要
    // エラーハンドリングは onError イベントリスナーで行う
    socketService.joinRoom(roomId, password);
  },

  leaveRoom: () => {
    const { currentRoom } = get();
    if (currentRoom) {
      const socketService = SocketService.getInstance();
      socketService.leaveRoom(currentRoom.id);
    }
  },

  setConnectionError: (error: string | null) => {
    set({ connectionError: error });
  },

  // --- ゲームアクションの実装を追加 ---
  startGame: () => {
    const { currentRoom } = get();
    if (currentRoom) {
      const socketService = SocketService.getInstance();
      console.log(`[GameStore] Requesting game start for room: ${currentRoom.id}`);
      socketService.startGame(currentRoom.id); // Call the startGame method on socketService
    } else {
      console.error('[GameStore] Cannot start game without being in a room.');
    }
  },

  declareMoves: (moves: number) => {
    const { currentRoom, currentPlayer, isConnected } = get(); // isConnected を取得
    // --- 接続チェックを追加 ---
    if (!isConnected) {
      console.error('[GameStore] Cannot declare moves: Socket is not connected.');
      return; // 接続されていなければ処理を中断
    }
    // --- ここまで ---
    if (currentRoom && currentPlayer) {
      const socketService = SocketService.getInstance();
      console.log(`[GameStore] Player ${currentPlayer.id} declaring ${moves} moves in room ${currentRoom.id}`);
      socketService.declareMoves(currentRoom.id, currentPlayer.id, moves); // currentPlayer.id を追加
    } else {
      console.error('[GameStore] Cannot declare moves without being in a room or having player info.');
    }
  },

  moveRobot: (robotColor: RobotColor, path: Position[]) => {
    const { currentRoom, currentPlayer } = get();
    if (currentRoom && currentPlayer) {
      const socketService = SocketService.getInstance();
      console.log(`[GameStore] Player ${currentPlayer.id} moving ${robotColor} robot in room ${currentRoom.id}`);
      socketService.moveRobot(currentRoom.id, robotColor, path); // コメントアウト解除

    } else {
      console.error('[GameStore] Cannot move robot without being in a room or having player info.');
    }
  },

  drawCard: () => { // drawCard アクションの実装
    const { currentRoom, currentPlayer, isConnected } = get(); // currentPlayer, isConnected を取得
    if (!isConnected) {
      console.error('[GameStore] Cannot draw card: Socket is not connected.');
      return;
    }
    if (currentRoom && currentPlayer) { // currentPlayer の存在もチェック
      const socketService = SocketService.getInstance();
      console.log(`[GameStore] Player ${currentPlayer.id} requesting draw card for room: ${currentRoom.id}`);
      socketService.drawCard(currentRoom.id, currentPlayer.id); // currentPlayer.id を追加
    } else {
      console.error('[GameStore] Cannot draw card without being in a room or having player info.');
    }
  },
  // --- ここまで ---
}));

export default useGameStore;

================
File: project_desc/repo/add_to_repository.txt
================
file name: server/src/services/gameManager.ts
classname: GameManager
function name: declareMoves
short description: Modified to start the declaration timer only after the first player makes a declaration.
input / output: (No change in signature)

file name: src/types/game.ts
classname: N/A
function name: GamePhase (type)
short description: Aligned GamePhase enum with server definition ('playing' -> 'solution', removed 'completed').
input / output: N/A

file name: src/pages/GamePage.tsx
classname: N/A
function name: GamePage (component)
short description: Updated references from GamePhase 'playing' to 'solution'.
input / output: N/A

file name: src/types/socket.ts
classname: N/A
function name: ClientToServerEvents (interface)
short description: Added playerId to declareMoves and drawCard event payloads.
input / output: N/A

file name: src/services/socketService.ts
classname: SocketService
function name: declareMoves
short description: Added playerId parameter and included it in the emitted payload.
input / output: Input: roomId: string, playerId: string, moves: number / Output: void

file name: src/services/socketService.ts
classname: SocketService
function name: drawCard
short description: Added playerId parameter and included it in the emitted payload.
input / output: Input: roomId: string, playerId: string / Output: void

file name: src/stores/gameStore.ts
classname: N/A
function name: declareMoves (action)
short description: Passed currentPlayer.id to socketService.declareMoves.
input / output: Input: moves: number / Output: void

file name: src/stores/gameStore.ts
classname: N/A
function name: drawCard (action)
short description: Passed currentPlayer.id to socketService.drawCard.
input / output: Input: None / Output: void

file name: src/stores/gameStore.ts
classname: N/A
function name: (connect - onRoomJoined/onRoomUpdated listeners)
short description: Improved currentPlayer update logic to handle null state and prioritize server info.
input / output: N/A

file name: src/stores/gameStore.ts
classname: N/A
function name: moveRobot (action)
short description: Enabled the emission of the 'moveRobot' event by uncommenting the socketService.moveRobot call.
input / output: Input: robotColor: RobotColor, path: Position[] / Output: void

file name: server/src/server.ts
classname: N/A
function name: (socket event listener)
short description: Added 'moveRobot' event handler to receive robot movement data from clients and call GameManager.moveRobot. Imported RobotColor enum for type casting.
input / output: Event payload: { roomId: string, robotColor: string, path: Position[] }

file name: server/src/services/gameManager.ts
classname: GameManager
function name: moveRobot
short description: Modified to accept 'path' instead of 'positions'. Implemented robot position update based on the end of the path, path length validation against declared moves, move history recording, goal checking, and game state emission. Changed move count validation to fail the solution attempt instead of throwing an error. Implemented correct move counting based on number of moveRobot calls per attempt.
input / output: Input: playerId: string, robotColor: RobotColor, path: Position[] / Output: void

file name: server/src/services/gameManager.ts
classname: GameManager
function name: checkGoal
short description: Implemented actual goal checking logic based on currentCard and robotPositions. Fixed Vortex card key generation to match targetPositions definition in roomManager. Added targetPositions property to GameManager.
input / output: Input: None / Output: boolean

file name: server/src/types/game.ts
classname: N/A
function name: MultiplayerGameState (interface)
short description: Added 'currentAttemptMoves' property to track moves within a single solution attempt.
input / output: N/A

file name: server/src/services/gameManager.ts
classname: GameManager
function name: initializeGameState
short description: Initialized the new 'currentAttemptMoves' property to 0.
input / output: N/A

file name: server/src/services/gameManager.ts
classname: GameManager
function name: startSolutionPhase
short description: Reset the 'currentAttemptMoves' property to 0 when a new solution phase starts.
input / output: N/A

file name: src/components/GameBoard/Robot.tsx
classname: Robot
function name: getPositionStyle
short description: Removed CSS transition style as animation is now handled in GamePage.
input / output: N/A

file name: src/pages/GamePage.tsx
classname: N/A
function name: GamePage (component)
short description: Implemented multiplayer robot movement animation using useState, useRef, useEffect, and requestAnimationFrame, referencing single-player logic. Manages displayedBoard and movingRobots states for smooth animation based on server updates.
input / output: N/A

file name: src/components/GameInfo.tsx
classname: N/A
function name: GameInfoProps (interface)
short description: Modified props to accept 'scores: Record<string, number>' and 'players: Record<string, Player>' instead of a single 'score'. Added 'solution' to GamePhase type.
input / output: N/A

file name: src/components/GameInfo.tsx
classname: N/A
function name: GameInfo (component)
short description: Updated component to receive 'scores' and 'players' props and display scores for all players.
input / output: N/A

file name: src/pages/GamePage.tsx
classname: N/A
function name: GamePage (component)
short description: Updated to import and use the modified GameInfo component in the right sidebar, passing 'game.playerStates' (mapped to scores) and 'currentRoom.players'.
input / output: N/A

file name: src/pages/GamePage.tsx
classname: N/A
function name: GamePage (component)
short description: Implemented responsive scaling for the game board based on container size, similar to SinglePlayerPage. Added layout constants and scaling logic.
input / output: N/A



================================================================
End of Codebase
================================================================

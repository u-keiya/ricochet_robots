This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)

Additional Info:
----------------

================================================================
Directory Structure
================================================================
project_desc/
  repo/
    repository.txt
  definition.md
  requirements.md
  roadmap.md
public/
  vite.svg
server/
  coverage/
    lcov-report/
      services/
        gameManager.ts.html
        index.html
        roomManager.ts.html
      types/
        game.ts.html
        index.html
      base.css
      block-navigation.js
      index.html
      prettify.css
      prettify.js
      roomManager.ts.html
      sorter.js
    clover.xml
    coverage-final.json
    lcov.info
  src/
    services/
      __tests__/
        gameManager.test.ts
        roomManager.test.ts
      gameManager.ts
      roomManager.ts
    types/
      game.ts
      player.ts
      room.ts
    server.ts
  .env.development
  jest.config.js
  package.json
  tsconfig.json
src/
  assets/
    boards.json
    react.svg
  components/
    GameBoard/
      BoardCell.tsx
      GameBoard.tsx
      Robot.tsx
    room/
      CreateRoomForm.tsx
      RoomList.tsx
    DeclarationCard.tsx
    GameInfo.tsx
    GameResultDisplay.tsx
  hooks/
    useGameState.ts
  pages/
    BoardTestPage.tsx
    CreateRoomPage.tsx
    GamePage.tsx
    JoinRoomPage.tsx
    OnlinePage.tsx
    SinglePlayerPage.tsx
    TitlePage.tsx
  services/
    __tests__/
      socketService.test.ts
    socketService.ts
  stores/
    gameStore.ts
  types/
    board.ts
    game.ts
    player.ts
    room.ts
    socket.ts
  utils/
    boardGenerator.ts
    boardLoader.ts
    boardRotation.ts
    boardValidator.ts
    cardGenerator.ts
    constants.ts
    robotMovement.ts
  App.tsx
  index.css
  main.tsx
  vite-env.d.ts
.env.development
.gitignore
eslint.config.js
index.html
package.json
postcss.config.js
README.md
tailwind.config.js
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts

================================================================
Files
================================================================

Okay, here is the source code description for each file found in the `repomix-output.txt` file, formatted as you requested:

### project_desc/definition.md

* Short description: Defines the requirements and specifications for the multiplayer mode of the Ricochet Robots game, including technical stack, functional requirements (room management, game flow, scoring, player management), non-functional requirements (performance, reliability, security), UI details, and development phases[cite: 17, 18].

### project_desc/requirements.md

* Short description: Outlines the overall requirements for the browser-based Ricochet Robots game, including system architecture, technology stack (React, TypeScript, Tailwind CSS, Node.js, Socket.io), functional requirements for different screens and gameplay elements (title, online features, board management, card system, game flow), considerations for CPU mode, and development phases[cite: 19].

### public/vite.svg

* Short description: This is an SVG file for the Vite logo[cite: 20].

### server/coverage/lcov-report/base.css

* Short description: A CSS file providing base styling for the LCOV code coverage report generated by Istanbul[cite: 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55]. It includes styles for layout, typography, tables, coverage indicators (low, medium, high), and general visual elements of the report.

### server/coverage/lcov-report/block-navigation.js

* Short description: A JavaScript file for the LCOV code coverage report that enables keyboard navigation (using 'n', 'j', 'b', 'p', 'k' keys) to jump between uncovered code blocks or low-coverage files in the report view[cite: 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68].
* init (IIFE)
    * short description: Initializes the keyboard navigation functionality by querying relevant elements and setting up event listeners. Returns the `jump` function.
    * input / output: Input: None. Output: `jump` function.
* toggleClass (Inner function)
    * short description: Adds/removes the 'highlighted' class from coverage elements[cite: 57, 58].
    * input / output: Input: `index` (number). Output: `void`. Modifies element classes.
* makeCurrent (Inner function)
    * short description: Highlights the element at the given index and scrolls it into view[cite: 59].
    * input / output: Input: `index` (number). Output: `void`. Calls `toggleClass` and scrolls[cite: 59].
* goToPrevious (Inner function)
    * short description: Calculates the index of the previous coverage element and jumps to it[cite: 61, 62, 63].
    * input / output: Input: None. Output: `void`. Calls `makeCurrent`.
* goToNext (Inner function)
    * short description: Calculates the index of the next coverage element and jumps to it[cite: 64, 65].
    * input / output: Input: None. Output: `void`. Calls `makeCurrent`.
* jump (Returned function)
    * short description: Event handler for keydown events, triggers navigation if appropriate keys are pressed and search input is not focused[cite: 66, 67, 68].
    * input / output: Input: `event` (KeyboardEvent). Output: `void`. Calls `goToNext` or `goToPrevious`.

### server/coverage/lcov-report/prettify.css

* Short description: CSS file defining styles for syntax highlighting within the LCOV code coverage report, using the "prettify" library conventions. It specifies colors for different code elements (keywords, strings, comments, etc.) for both screen and print media[cite: 69].

### server/coverage/lcov-report/prettify.js

* Short description: JavaScript library (Google Code Prettify) used for syntax highlighting of source code within the LCOV report. It includes logic for parsing code, identifying language elements, and applying CSS classes for styling[cite: 69, 70, 71].

### server/coverage/lcov-report/roomManager.ts.html

* Short description: An HTML file showing the detailed code coverage report specifically for the `roomManager.ts` file[cite: 72]. It displays the source code line by line, highlighting covered and uncovered lines, statements, and branches[cite: 72, 73, 74, 75, 76, 77, 78, 79, 80, 81]. It includes coverage statistics for this specific file[cite: 74, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113].

### server/coverage/lcov-report/sorter.js

* Short description: JavaScript file for the LCOV report that adds click-to-sort functionality to the columns in the coverage summary table and includes a search/filter input box[cite: 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154].

### server/src/types/player.ts

* Short description: Defines TypeScript interfaces and types related to players for the server-side, including `Player` details, `PlayerSession` for tracking connections, and `PlayerStatus` enums[cite: 156, 157, 228, 229, 777].

### server/src/types/room.ts

* Short description: Defines TypeScript interfaces and types related to game rooms for the server-side, including the main `Room` structure, `GameState`, `GameStatus` enums, `RoomSummary` for listing, and `RoomOptions` for creation[cite: 158, 159, 160, 161, 162, 163, 164, 165, 230, 231, 232, 233, 234, 235, 778].

### server/.env.development

* Short description: Environment variables specifically for the development environment of the server[cite: 165, 790]. Sets the `PORT`, `HOST`, `NODE_ENV`, and the `CORS_ORIGIN` for allowing connections from the frontend development server[cite: 165, 791].

### server/jest.config.js

* Short description: Configuration file for the Jest testing framework[cite: 165, 792]. It specifies the preset (`ts-jest`), test environment (`node`), test file locations, and enables code coverage collection, setting thresholds for branches, functions, lines, and statements[cite: 165, 793].

### server/tsconfig.json

* Short description: The TypeScript configuration file for the server project[cite: 166, 795]. It sets compiler options like target (`ES2020`), module system (`commonjs`), output directory (`./dist`), root directory (`./src`), enables strict type checking, ES module interop, and source map generation[cite: 166, 796]. It includes all files in `src` but excludes tests and `node_modules`[cite: 797].

### src/assets/react.svg

* Short description: This is an SVG file for the React logo[cite: 167, 168, 169, 170].

### src/components/room/RoomList.tsx

* RoomList (Function Component) [cite: 172]
    * short description: Displays a list of available game rooms[cite: 183, 803]. Allows users to select a room and, if required, enter a password to join[cite: 173, 185, 191, 192, 195, 804]. Uses the `useGameStore` hook to get the room list and call the `joinRoom` action[cite: 173, 176, 805]. Displays status text for each room and handles errors[cite: 177, 178, 179, 180, 181, 194, 806]. Shows a lock icon for password-protected rooms[cite: 187, 188, 189, 190, 806]. Calls `onJoinSuccess` prop if provided and join is successful[cite: 176, 807].
    * handleJoinRoom
        * short description: Prevents default form submission, validates selection and password (if needed), calls `joinRoom` from the store, and triggers the `onJoinSuccess` callback[cite: 174, 175, 176, 808].
        * input / output: Input: `e: React.FormEvent`. Output: `void`[cite: 174, 809].
    * getStatusText
        * short description: Converts the room status enum ('waiting', 'declaration', etc.) into human-readable Japanese text[cite: 177, 178, 179, 180, 181, 810].
        * input / output: Input: `status: string`. Output: `string`[cite: 177, 811].

### src/components/GameResultDisplay.tsx

* GameResultDisplay (Function Component) [cite: 885]
    * short description: Displays the game results including rankings and final scores when the game phase is 'finished'[cite: 199, 200, 201, 202, 203, 204, 885]. Retrieves ranking data from useGameStore and maps player names[cite: 199, 201, 886].
    * input / output: Props: `players: Player[]`, `onLeaveRoom: () => void`[cite: 197, 198, 886]. Returns JSX[cite: 887].

### src/pages/OnlinePage.tsx

* OnlinePage (Function Component) [cite: 205]
    * short description: Renders buttons to navigate to the "Create Room" or "Join Room" pages, or back to the title page[cite: 206, 207, 208, 529].
    * input / output: Takes no input, returns JSX elements. Uses `react-router-dom` for navigation[cite: 205, 530].

### src/services/__tests__/socketService.test.ts

* Short description: Contains Vitest unit tests for the `SocketService` class[cite: 210, 812]. It mocks the `socket.io-client` library [cite: 211, 813] and tests the singleton pattern[cite: 480], connection logic (success and error/retry cases)[cite: 214, 215, 216, 217, 218, 481, 483, 484, 485], room operations (`createRoom`, `joinRoom`, `leaveRoom`) by checking if the correct events are emitted[cite: 220, 221, 222, 486, 487, 488, 489], event handler registration (`onPlayerRegistered`, `onRoomCreated`, `onError`)[cite: 223, 224, 225, 490, 491, 492], and the disconnect method[cite: 226, 493].

### src/types/player.ts

* Short description: Defines TypeScript interfaces related to players for the client-side, including `Player` details[cite: 228], `PlayerSession` (potentially unused client-side but defined)[cite: 229], and `PlayerStatus` enums[cite: 229, 834]. *Note: This file shares the same path as the server-side type definition but might contain different content specific to the client.*

### src/types/room.ts

* Short description: Defines TypeScript interfaces and types related to game rooms for the client-side, including `Room`, `GameState`, `GameStatus`, `RoomSummary`, and `RoomOptions`[cite: 230, 231, 232, 233, 234, 235, 835]. *Note: This file shares the same path as the server-side type definition but might contain different content specific to the client, particularly how `players` and `declarations` are structured (object vs Map)*[cite: 836].

### src/utils/boardValidator.ts

* BoardValidator (Class) [cite: 236]
    * isValidPosition (static private)
        * short description: Checks if a given (x, y) coordinate is within the bounds of the board[cite: 236, 531].
        * input / output: Takes `x` (number), `y` (number), `size` (number). Returns `boolean`[cite: 236, 532].
    * isValidTargetColor (static private)
        * short description: Checks if a target color is valid, considering if it's a vortex target[cite: 237, 238, 533].
        * input / output: Takes `color` (TargetColor), `isVortex` (boolean). Returns `boolean`[cite: 237, 534].
    * validateBoard (static public)
        * short description: Validates a single board pattern for correct size, wall positions, reflector positions, and target positions/colors[cite: 239, 240, 241, 242, 243, 244, 245, 535]. Logs warnings for invalid elements[cite: 537].
        * input / output: Takes `board` (BoardPattern | RawBoardPattern). Returns `boolean`[cite: 239, 536].
    * validateBoardSet (static public)
        * short description: Validates an array of board patterns[cite: 247, 64, 538]. Logs errors for invalid boards[cite: 247, 540].
        * input / output: Takes `pattern` (string), `boards` (BoardPattern[] | RawBoardPattern[]). Returns an object `{ valid: boolean; errors: string[] }`[cite: 246, 248, 249, 539].

### src/index.css

* Short description: Defines base styles, component styles (like buttons), and utility classes using Tailwind CSS directives[cite: 250, 251, 252, 253, 541].

### src/main.tsx

* Short description: The main entry point for the React application. It renders the root `App` component into the DOM[cite: 543].

### src/vite-env.d.ts

* Short description: TypeScript declaration file for Vite client types[cite: 544].

### .gitignore

* Short description: Specifies intentionally untracked files that Git should ignore, such as log files, node_modules, build outputs, and editor-specific files[cite: 254, 546].

### eslint.config.js

* Short description: Configuration file for ESLint, setting up rules, plugins (like react-hooks, react-refresh), language options, and ignoring the `dist` directory for linting[cite: 255, 547].

### index.html

* Short description: The main HTML file for the single-page application. It includes the root div where the React app is mounted and loads the main JavaScript module (`/src/main.tsx`)[cite: 549].

### package.json

* Short description: Defines project metadata, scripts (dev, build, lint, preview), dependencies (React, React Router), and devDependencies (TypeScript, Vite, ESLint, Tailwind CSS, etc.)[cite: 256, 257, 550].

### postcss.config.js

* Short description: Configuration file for PostCSS, specifying plugins like `tailwindcss/nesting`, `tailwindcss`, and `autoprefixer`[cite: 551].

### README.md

* Short description: Provides a basic introduction to the Vite + React + TypeScript template, mentioning available plugins and suggesting how to expand ESLint configuration for type-aware linting and React-specific rules[cite: 258, 259, 552].

### tailwind.config.js

* Short description: Configuration file for Tailwind CSS. It specifies the content files to scan for classes, extends the theme (e.g., adding primary and secondary colors), and lists any plugins used[cite: 260, 261, 554].

### tsconfig.app.json

* Short description: TypeScript configuration file specifically for the application source code (`src` directory). It sets compiler options like target (ES2020), libraries, module system (ESNext), JSX mode, and enables strict linting rules[cite: 262, 556].

### tsconfig.json

* Short description: The root TypeScript configuration file. It references the `tsconfig.app.json` and `tsconfig.node.json` files, indicating a composite project structure[cite: 557].

### tsconfig.node.json

* Short description: TypeScript configuration file for Node.js-specific files, like `vite.config.ts`. It sets compiler options suitable for a Node.js environment (e.g., target ES2022, module ESNext) and includes strict linting rules[cite: 263, 559].

### vite.config.ts

* Short description: Configuration file for the Vite build tool. It imports and uses the `@vitejs/plugin-react` plugin[cite: 560].

### server/src/services/__tests__/roomManager.test.ts

* Short description: Contains Jest unit tests for the `RoomManager` class[cite: 264, 265, 760]. It tests functionalities like room creation[cite: 266, 267, 268, 269, 270, 761], joining rooms (including error cases like full rooms or wrong passwords)[cite: 271, 272, 273, 761], leaving rooms (including host reassignment)[cite: 274, 275, 276, 761], retrieving room summaries[cite: 278, 279, 761], updating player connections[cite: 280, 281, 761], and cleaning up inactive rooms[cite: 277, 761].

### server/src/services/roomManager.ts

* RoomManager (Class) [cite: 283, 762]
    * constructor
        * short description: Initializes the `RoomManager` with an empty map to store rooms[cite: 284, 762].
        * input / output: Input: None. Output: `void`[cite: 763].
    * createRoom
        * short description: Creates a new game room with a unique ID, sets the host player, and stores it[cite: 285, 286, 287, 288, 763].
        * input / output: Input: `hostPlayer: Player`, `options: RoomOptions`. Output: `Room`[cite: 285, 764].
    * joinRoom
        * short description: Adds a player to an existing room, performing checks for room existence, password validity, and player count limits[cite: 289, 290, 291, 292, 293, 294, 765].
        * input / output: Input: `playerId: string`, `roomId: string`, `password?: string`. Output: `boolean` (throws errors on failure)[cite: 289, 766].
    * leaveRoom
        * short description: Removes a player from a room. If the room becomes empty, it's deleted. If the host leaves, a new host is assigned[cite: 295, 296, 297, 298, 299, 300, 767, 768].
        * input / output: Input: `playerId: string`, `roomId: string`. Output: `boolean` (throws errors on failure)[cite: 295, 769].
    * getRoomSummaries
        * short description: Returns an array of summary objects for all current rooms, suitable for displaying a list of available rooms[cite: 301, 770].
        * input / output: Input: None. Output: `RoomSummary[]`[cite: 771].
    * getRoom
        * short description: Retrieves the full details of a specific room by its ID[cite: 302, 771].
        * input / output: Input: `roomId: string`. Output: `Room | undefined`[cite: 772].
    * updatePlayerConnection
        * short description: Updates the `connected` status of a player within a specific room[cite: 303, 304, 305, 306, 773].
        * input / output: Input: `playerId: string`, `roomId: string`, `connected: boolean`. Output: `void` (throws errors if room or player not found)[cite: 774, 775].
    * cleanupInactiveRooms
        * short description: Iterates through all rooms and removes those that haven't had activity for a set period (e.g., 30 minutes)[cite: 307, 308, 776].
        * input / output: Input: None. Output: `void`[cite: 777].

### server/package.json

* Short description: Defines the Node.js server project's metadata, scripts (start, dev, build, test, lint, format), dependencies (`dotenv`, `express`, `socket.io`, `uuid`, `winston`), and development dependencies (types, linters, testing tools, TypeScript)[cite: 309, 794].

### src/components/GameInfo.tsx

* GameInfo (Function Component) [cite: 310]
    * short description: Displays game information like score, move count, declared moves, timer, current target card, and remaining cards[cite: 313, 314, 315, 316, 317, 318, 319, 561]. Also includes a button to draw the next card[cite: 320, 321, 322, 562].
    * input / output: Takes props like `score`, `moveCount`, `declaredMoves`, `timer`, `isDeclarationPhase`, `currentCard`, `remainingCards`, `phase`, `onDrawCard`[cite: 311, 312, 563]. Returns JSX elements[cite: 564].

### src/types/socket.ts

* Short description: Defines TypeScript interfaces for WebSocket communication events between the server and client using Socket.IO[cite: 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 836]. It specifies the event names and payload types for both `ServerToClientEvents` and `ClientToServerEvents`, and defines the `GameSocket` type by combining these with the base Socket type[cite: 544, 857].

### src/utils/constants.ts

* Short description: Defines constant mappings and arrays used throughout the application, such as the mapping from target symbol names to display characters (`SYMBOL_MAP`), an array of all target symbols (`SYMBOLS`), and an array of robot colors (`ROBOT_COLORS`)[cite: 341, 342, 343, 572].

### src/utils/robotMovement.ts

* calculateReflection
    * short description: Calculates the new direction of a robot after hitting a reflector based on the initial direction and the reflector's orientation[cite: 346, 347, 573].
    * input / output: Takes `direction` (Direction), `reflectorDirection` ('／' | '＼'). Returns `Direction`[cite: 346, 574].
* getNextPosition
    * short description: Calculates the next grid position based on the current position and movement direction[cite: 348, 575].
    * input / output: Takes `position` (Position), `direction` (Direction). Returns `Position`[cite: 348, 576].
* hasCollision
    * short description: Checks if a move from a current position to the next position results in a collision with board boundaries, other robots, or walls[cite: 350, 351, 352, 353, 354, 577].
    * input / output: Takes `board` (Board), `position` (Position), `nextPosition` (Position), `direction` (Direction). Returns `boolean`[cite: 349, 578].
* calculatePath
    * short description: Calculates the full path a robot takes in a given direction until it hits an obstacle or reflects, including intermediate positions[cite: 355, 356, 357, 358, 359, 360, 361, 362, 579].
    * input / output: Takes `board` (Board), `robot` (Robot), `initialDirection` (Direction). Returns `Position[]` (an array of positions in the path)[cite: 355, 581].
* calculateFinalPosition
    * short description: Calculates only the final stopping position of a robot moving in a given direction[cite: 364, 582].
    * input / output: Takes `board` (Board), `robot` (Robot), `direction` (Direction). Returns `Position`[cite: 363, 583].

### .env.development

* Short description: Environment variables for development, specifically setting the WebSocket URL[cite: 545].

### server/src/server.ts

* Short description: The main entry point for the Node.js WebSocket server using Socket.IO[cite: 365, 366, 367, 368, 369, 370, 779]. It sets up an Express server, initializes Socket.IO with CORS configuration, instantiates the `RoomManager`, and defines event handlers for client connections, disconnections, player registration, room creation, joining, and leaving[cite: 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 780]. Includes basic session tracking and periodic cleanup for inactive connections and rooms[cite: 371, 372, 781]. Sets up logging using Winston [cite: 368, 782] and basic error handling[cite: 388, 389, 782]. Listens on a configured port[cite: 386, 387, 782].
* Event Handlers:
    * connection: Logs new connection, sets up listeners for other events for that socket[cite: 372, 783].
    * register: Creates a player record, stores session info, emits 'registered' event back to client[cite: 373, 374, 784].
    * createRoom: Uses `RoomManager` to create a room, makes the socket join the room, emits 'roomCreated', and updates the global room list[cite: 375, 376, 377, 378, 379, 785].
    * joinRoom: Uses `RoomManager` to add player to a room, makes the socket join the room, notifies others in the room, emits 'roomJoined' to the client, and updates the global room list[cite: 380, 381, 786].
    * leaveRoom: Uses `RoomManager` to remove player, makes the socket leave the room, notifies others, and updates the global room list[cite: 382, 383, 787].
    * disconnect: Finds the player's room (if any), updates their connection status via `RoomManager`, notifies others in the room, and removes the session[cite: 383, 384, 788].
    * ping: Updates the session's `lastConnected` time and emits 'pong' for health checks[cite: 385, 789].

### src/components/room/CreateRoomForm.tsx

* CreateRoomForm (Function Component) [cite: 391]
    * short description: Renders a form for creating a new game room, allowing users to input a room name and an optional password[cite: 390, 392, 400, 401, 402, 407, 798]. Uses the `useGameStore` hook to call the `createRoom` action upon submission[cite: 393, 394, 799]. Handles basic input validation and displays connection errors[cite: 392, 393, 394, 395, 396, 399, 403, 404, 405, 406, 800]. Calls `onSuccess` prop if provided and creation is successful[cite: 397, 398, 801].
    * handleSubmit
        * short description: Prevents default form submission, validates input, calls `createRoom` from the store, and triggers the `onSuccess` callback[cite: 394, 395, 396, 397, 398, 399, 802].
        * input / output: Input: `e: React.FormEvent`. Output: `void`[cite: 803].

### src/pages/BoardTestPage.tsx

* BoardTestPage (Function Component) [cite: 409]
    * short description: A development/testing page to load, display, rotate, select, and combine board patterns[cite: 410, 411, 412, 413, 414, 418, 419, 420, 421, 422, 423, 427, 428, 429, 430, 431, 432, 433, 434, 435, 596]. It uses `BoardLoader`, `GameBoard`, `generateBoardFromPattern`, `rotateBoard`, and `createCompositeBoardPattern`[cite: 408, 409, 597]. Validates loaded boards[cite: 413, 597].
    * handleBoardSelect
        * short description: Updates the state for the selected board in a specific quadrant (topLeft, topRight, etc.)[cite: 415, 416, 424, 425, 426, 598].
        * input / output: Takes `position` (keyof typeof selectedBoards), `board` (BoardPattern). Returns `void`. Updates `selectedBoards` state[cite: 415, 599].
    * handleCreateComposite
        * short description: Creates a composite board pattern from the four selected quadrant boards and updates the state[cite: 417, 418, 600].
        * input / output: Takes no input, returns `void`. Uses `selectedBoards` state[cite: 417, 601]. Calls `createCompositeBoardPattern`[cite: 417, 601]. Updates `compositeBoard` state[cite: 418, 601].

### src/pages/JoinRoomPage.tsx

* JoinRoomPage (Function Component) [cite: 437]
    * short description: Handles the process of joining a room, including connecting to the socket, registering the player if needed, displaying available rooms, and navigating to the game page upon successful join[cite: 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448].
    * handleJoinSuccess
        * short description: Placeholder function intended to handle actions after successfully joining a room (currently does nothing, relies on `currentRoom` state change)[cite: 442].
        * input / output: Input: None. Output: `void`.

### src/services/socketService.ts

* SocketService (Class - Singleton) [cite: 451]
    * getInstance (static public)
        * short description: Provides access to the single instance of the `SocketService`. Creates the instance if it doesn't exist[cite: 453, 815].
        * input / output: Input: None. Output: `SocketService` instance[cite: 815].
    * connect
        * short description: Establishes a connection to the WebSocket server using the URL from environment variables. Sets up handlers for 'connect', 'connect_error', and 'disconnect' events. Handles reconnection attempts[cite: 454, 455, 456, 457, 458, 816, 817].
        * input / output: Input: None. Output: `Promise<void>` (resolves on successful connection, rejects after max reconnection attempts)[cite: 818].
    * disconnect
        * short description: Disconnects the socket if it's currently connected and clears the internal socket reference[cite: 459, 819].
        * input / output: Input: None. Output: `void`[cite: 820].
    * emit (private helper)
        * short description: Sends an event to the server if the socket is connected[cite: 460, 461].
        * input / output: Input: `event: keyof ClientToServerEvents`, `...args`. Output: `void`.
    * registerPlayer
        * short description: Emits the 'register' event to the server with the player's name[cite: 462, 820].
        * input / output: Input: `name: string`. Output: `void`[cite: 821].
    * createRoom
        * short description: Emits the 'createRoom' event to the server with room options and returns a Promise that resolves with the created Room or rejects on error/timeout[cite: 463, 464, 821].
        * input / output: Input: `options: { name: string; password?: string }`. Output: `Promise<Room>`[cite: 822].
    * joinRoom
        * short description: Emits the 'joinRoom' event to the server with room ID and optional password[cite: 465, 466, 823].
        * input / output: Input: `roomId: string`, `password?: string`. Output: `void`[cite: 824].
    * leaveRoom
        * short description: Emits the 'leaveRoom' event to the server with the room ID[cite: 467, 825].
        * input / output: Input: `roomId: string`. Output: `void`[cite: 826].
    * getAvailableRooms
        * short description: Emits the 'getAvailableRooms' event to the server[cite: 468].
        * input / output: Input: None. Output: `void`.
    * startGame
        * short description: Emits the 'startGame' event to the server with the room ID[cite: 469].
        * input / output: Input: `roomId: string`. Output: `void`.
    * declareMoves
        * short description: Emits the 'declareMoves' event to the server with room ID and move count[cite: 470].
        * input / output: Input: `roomId: string`, `moves: number`. Output: `void`.
    * moveRobot
        * short description: Emits the 'moveRobot' event to the server with room ID, robot color, and path[cite: 471].
        * input / output: Input: `roomId: string`, `robotColor: RobotColor`, `path: Position[]`. Output: `void`.
    * registerEventListener (private helper)
        * short description: Registers a callback for a specific event received from the server, removing any existing listener first[cite: 472, 473].
        * input / output: Input: `event: keyof ServerToClientEvents`, `callback`. Output: `void`.
    * onPlayerRegistered / onRoomCreated / onRoomJoined / onRoomLeft / onRoomUpdated / onAvailableRoomsUpdated / onError / onGameStarted / onGameStateUpdated / onDeclarationMade / onTurnChanged / onSolutionAttemptResult / onGameOver
        * short description: Methods to register callbacks for specific events received from the server[cite: 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 826].
        * input / output: Input: `callback: (data: any) => void`. Output: `void`[cite: 827].
    * removeAllListeners
        * short description: Removes all registered event listeners from the socket instance[cite: 487, 828].
        * input / output: Input: None. Output: `void`[cite: 829].

### src/utils/boardRotation.ts

* rotateWallDirection
    * short description: Calculates the new wall direction after rotating the board by 90, 180, or 270 degrees[cite: 488, 489, 604].
    * input / output: Takes `direction` (WallDirection), `rotation` (number). Returns `WallDirection`[cite: 488, 605].
* rotateReflectorDirection
    * short description: Calculates the new reflector orientation ('／' or '＼') after rotating the board. Only changes for 90 or 270 degrees[cite: 490, 491, 606].
    * input / output: Takes `direction` (ReflectorDirection), `rotation` (number). Returns `ReflectorDirection`[cite: 490, 607].
* rotatePosition
    * short description: Calculates the new (x, y) coordinates of a point on the board after rotation[cite: 492, 493, 494, 495, 608].
    * input / output: Takes `x` (number), `y` (number), `size` (number), `rotation` (number). Returns `[number, number]` (new x, new y)[cite: 492, 610].
* rotateBoard
    * short description: Rotates an entire `BoardPattern` (walls, reflectors, targets) by the specified angle (90, 180, 270)[cite: 496, 497, 498, 499, 500, 501, 610].
    * input / output: Takes `board` (BoardPattern), `rotation` (number). Returns a new, rotated `BoardPattern`[cite: 496, 611].
* createCompositeBoardPattern
    * short description: Combines four 8x8 `BoardPattern` objects into a single 16x16 `BoardPattern`, applying the necessary rotations and coordinate transformations to place them in the correct quadrants[cite: 501, 502, 503, 504, 508, 511, 512, 612].
    * transformCoordinates (Helper inside `createCompositeBoardPattern`)
        * short description: Converts coordinates from a smaller 8x8 board to the larger 16x16 composite board based on the quadrant[cite: 504, 505, 506, 507, 613].
        * input / output: Takes `x`, `y`, `quadrant`. Returns `[number, number]`[cite: 504, 614].
    * transformElements (Helper inside `createCompositeBoardPattern`)
        * short description: Applies coordinate transformation to an array of elements (like walls, targets)[cite: 509, 510, 615].
        * input / output: Takes `elements` array, `quadrant`. Returns a new array with transformed elements[cite: 509, 616].
    * input / output: Takes `topLeft`, `topRight`, `bottomLeft`, `bottomRight` (all BoardPattern). Returns a new composite `BoardPattern`[cite: 501, 617].

### project_desc/repo/repository.txt

* Short description: A meta-file generated by Repomix, containing a merged representation of the entire codebase. It includes a summary, directory structure, and the full content of each file, intended for AI analysis[cite: 513, 514, 515, 516, 517, 518, 519, 520]. The rest of the content in this section is the output of analyzing the repository described in this file.

### project_desc/roadmap.md

* Short description: Outlines the development roadmap for the Ricochet Robots multiplayer mode, divided into phases: Basic Functionality, Game Logic Implementation, UI/UX Improvement, and Additional Features. It includes weekly goals, responsible roles, and milestones[cite: 888, 889, 890, 891, 892].

### server/coverage/lcov-report/services/gameManager.ts.html

* Short description: An HTML file showing the detailed code coverage report specifically for the `gameManager.ts` file[cite: 893]. It displays the source code line by line, highlighting covered and uncovered lines, statements, and branches[cite: 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905]. It includes coverage statistics for this specific file[cite: 895, 896, 897, 898, 906, 907, 908, 909, 910, 911, 912].

### server/coverage/lcov-report/services/index.html

* Short description: An HTML file serving as an index for the code coverage reports within the `services` directory. It provides a summary table showing coverage statistics (statements, branches, functions, lines) for each file in the directory (`gameManager.ts`, `roomManager.ts`)[cite: 974, 975, 976, 977, 978, 979, 980, 981].

### server/coverage/lcov-report/services/roomManager.ts.html

* Short description: An HTML file showing the detailed code coverage report specifically for the `roomManager.ts` file within the `services` directory[cite: 985]. It displays the source code line by line, highlighting covered and uncovered lines, statements, and branches[cite: 985, 986, 987, 988, 989, 990, 991, 992, 993]. It includes coverage statistics for this specific file[cite: 986, 987, 988, 989, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025].

### server/coverage/lcov-report/types/game.ts.html

* Short description: An HTML file showing the detailed code coverage report specifically for the `game.ts` file within the `types` directory[cite: 1026]. It displays the source code line by line, highlighting covered lines and enum definitions[cite: 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033]. It includes coverage statistics for this specific file[cite: 1027, 1028, 1029, 1030, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048].

### server/coverage/lcov-report/types/index.html

* Short description: An HTML file serving as an index for the code coverage reports within the `types` directory. It provides a summary table showing coverage statistics (statements, branches, functions, lines) for the `game.ts` file[cite: 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056].

### server/coverage/coverage-final.json

* Short description: A JSON file containing the raw, detailed code coverage data generated by Istanbul[cite: 1057]. This file is often used by other tools or reporters (like LCOV) to generate human-readable reports[cite: 1057].

### server/coverage/lcov.info

* Short description: A text file containing code coverage data in the LCOV format[cite: 1059]. This format is widely used by coverage reporting tools and services (like Coveralls or Codecov) to display coverage information[cite: 1059].

### server/src/types/game.ts

* Short description: Defines TypeScript types for multiplayer game state management[cite: 838, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066].
* Key types:
    * GamePhase: Enum for game phases (waiting, declaration, solution, finished) [cite: 838, 1038]
    * Position: Interface for robot positions (x, y coordinates) [cite: 838, 1036]
    * RobotColor: Enum for robot colors (red, blue, green, yellow) [cite: 838, 1037]
    * Card: Interface for game cards (color, symbol, position) [cite: 838, 1039]
    * Declaration: Interface for move declarations [cite: 838, 1040]
    * PlayerGameState: Interface for player-specific game state [cite: 838, 1041]
    * MultiplayerGameState: Interface for overall game state [cite: 838, 1042, 1062, 1063, 1064, 1065]
    * GameRules: Interface for game configuration [cite: 838, 1045, 1066]
    * DEFAULT_GAME_RULES: Constant with default game rules [cite: 838, 1067]

### src/assets/boards.json

* Short description: A JSON file containing the definitions for different sets of board patterns (A, B, C, D)[cite: 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 621]. Each pattern includes size, wall positions, reflector positions (optional), and target positions with colors and symbols[cite: 622]. Includes definitions for the special "vortex" target[cite: 1122, 1127, 1131, 1136, 623].

### src/components/DeclarationCard.tsx

* DeclarationCard (Function Component) [cite: 1138]
    * short description: Renders a single card used for declaring the number of moves. Shows the number and selection/disabled state[cite: 1139, 585].
    * input / output: Takes `number`, `isSelected`, `isDisabled`, `onClick` function[cite: 1137, 1138]. Returns a button element (JSX)[cite: 586].
* ChevronLeft (Function Component) [cite: 1140]
    * short description: Renders an SVG icon for a left-pointing chevron[cite: 1140, 586].
    * input / output: Takes no input, returns SVG JSX[cite: 587].
* ChevronRight (Function Component) [cite: 1141]
    * short description: Renders an SVG icon for a right-pointing chevron[cite: 1141, 588].
    * input / output: Takes no input, returns SVG JSX[cite: 589].
* DeclarationCardList (Function Component) [cite: 1143, 854]
    * short description: Renders a horizontally scrollable list of `DeclarationCard` components, allowing the player to select their move count declaration[cite: 1146, 1147, 1148, 1149, 1150, 1151, 1152, 590]. Includes navigation arrows[cite: 591]. Modified `selectedNumber` prop to accept `number | null`[cite: 855]. Adjusted internal logic to handle `null` value for `selectedNumber` when calculating disabled state[cite: 1149, 855].
    * handlePrevClick
        * short description: Decrements the starting index for the visible cards, handling boundary conditions[cite: 1144, 591].
        * input / output: Takes no input, returns `void`. Modifies `startIndex` state[cite: 1144, 592].
    * handleNextClick
        * short description: Increments the starting index for the visible cards, handling boundary conditions[cite: 1145, 593].
        * input / output: Takes no input, returns `void`. Modifies `startIndex` state[cite: 1145, 594].
    * input / output: Takes `selectedNumber: number | null`, `maxNumber`, `onSelect` function, `className`[cite: 1142, 1143, 595, 856]. Returns JSX elements[cite: 595].

### src/pages/TitlePage.tsx

* TitlePage (Function Component) [cite: 1153]
    * short description: Renders the main title screen with buttons to navigate to Single Player, Online Play, and a Board Test page[cite: 1154, 1155, 1156, 1157, 602].
    * input / output: Takes no input, returns JSX elements. Uses `react-router-dom` for navigation[cite: 1153, 603].

### src/App.tsx

* App (Function Component) [cite: 1160]
    * short description: Sets up the application's routing using `react-router-dom`[cite: 1158, 1159, 1160, 1161, 1162, 618]. Defines routes for the Title page, Single Player page, Board Test page, and online features (Online menu, Create Room, Join Room, Game Page)[cite: 1158, 1159, 1160, 1161, 619].
    * input / output: Takes no input, returns JSX elements (`Router`, `Routes`, `Route`)[cite: 620].

### server/coverage/lcov-report/index.html

* Short description: The main HTML file for the LCOV code coverage report[cite: 743]. It displays a summary table of coverage statistics (statements, branches, functions, lines) for the covered files[cite: 1164, 1165, 1166, 1167, 744]. It includes links to detailed reports for each directory/file and utilizes JavaScript for sorting and navigation[cite: 1163, 1168, 1169, 1170, 1171, 1172, 1173, 745].

### server/coverage/clover.xml

* Short description: An XML file representing the code coverage results in the Clover format, typically used for integration with CI/CD systems or other analysis tools[cite: 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 754]. It contains detailed metrics about covered statements, conditionals, and methods for each file[cite: 755].

### src/components/GameBoard/Robot.tsx

* DirectionArrow (Function Component) [cite: 1198]
    * short description: Renders a clickable arrow button used for directing robot movement[cite: 1199, 1200, 624].
    * input / output: Takes `direction`, `onClick` function, `position` ('top' | 'right' | 'bottom' | 'left')[cite: 1197, 1198, 625]. Returns a button element (JSX)[cite: 626].
* Robot (Function Component) [cite: 1201]
    * short description: Renders a single robot piece on the game board, handling its position, color, selection state, click events, and displaying movement arrows when active and selected[cite: 1195, 1196, 1201, 1207, 1208, 1209, 1210, 626].
    * getPositionStyle
        * short description: Calculates the CSS style for positioning and sizing the robot based on board size and cell percentage[cite: 1202, 1203, 627].
        * input / output: Takes no input, returns `CSSProperties` object[cite: 1202, 628].
    * getColorStyle
        * short description: Returns Tailwind CSS class names for the robot's background color based on its `color` prop[cite: 1204, 1205, 629].
        * input / output: Takes no input, returns `string`[cite: 1204, 630].
    * handleMove
        * short description: Calls the `onMove` prop function when a direction arrow is clicked[cite: 1205, 1206, 631].
        * input / output: Takes `direction` (Direction). Returns `void`. Calls `onMove` prop[cite: 1205, 632].
    * input / output: Takes props like `color`, `position`, `boardSize`, `isActive`, `isSelected`, `onMove`, `onClick`[cite: 1195, 1196, 1197, 633]. Returns a div element (JSX)[cite: 1201, 634].

### src/pages/CreateRoomPage.tsx

* CreateRoomPage (Function Component) [cite: 1212]
    * short description: Handles the process of creating a room, including connecting to the socket, registering the player, displaying the creation form, and navigating to the game page upon successful creation[cite: 1213, 1214, 1215, 1216, 1220, 1221, 1222, 1223, 1224, 1225].
    * handleCreateSuccess
        * short description: Callback function triggered when the `CreateRoomForm` successfully creates a room via the store. Navigates the user to the newly created game room[cite: 1216, 1217, 1218, 1219].
        * input / output: Input: `room: Room`. Output: `void`.

### src/stores/gameStore.ts

* MultiplayerGameState (Interface) [cite: 1229]
    * short description: Defines the structure for the multiplayer game state, including board, card, phase, timer, declarations, player turns, scores, move history, card counts, winner, declaration order, and rankings[cite: 1229, 1230, 1231, 1232, 870].
    * declarationOrder?
        * short description: Optional array of player IDs representing the order in which players are eligible to present their solution[cite: 1231, 870]. Added to align with backend changes[cite: 871].
        * input / output: type: string[] | undefined[cite: 872].
    * rankings?
        * short description: Optional array of player IDs, scores, and ranks, calculated at the end of the game[cite: 1232, 874].
        * input / output: type: { playerId: string; score: number; rank: number }[] | undefined[cite: 875, 876].
* useGameStore (Zustand Hook/Store) [cite: 833]
    * short description: Defines a Zustand store for managing the global game state on the client-side[cite: 1226, 1227, 1233, 1234, 829]. It holds connection status, player info, current room details, and a list of available rooms[cite: 830]. It provides actions to connect/disconnect, register the player, and interact with rooms (create, join, leave) by calling the `SocketService`[cite: 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 831]. It also includes setters/getters for managing connection errors and updating state based on socket events received via `SocketService` callbacks[cite: 832]. Extended to manage multiplayer game state (`game`) including board, phase, timer, declarations, scores, etc. Added actions (`startGame`, `declareMoves`, `moveRobot`) to interact with the server via Socket.IO[cite: 1238, 1239, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 848]. Added listeners for server-sent game events (`gameStarted`, `gameStateUpdated`, etc.) to update the local state[cite: 1245, 1246, 1248, 1249, 1250, 1251, 849].
    * State: `isConnected`, `isConnecting`, `connectionError`, `currentPlayer`, `currentRoom`, `availableRooms`, `game`[cite: 1233, 1234, 833].
    * Actions: `connect`, `disconnect`, `registerPlayer`, `createRoom`, `joinRoom`, `leaveRoom`, `setConnectionError`, `startGame`, `declareMoves`, `moveRobot`[cite: 1235, 1236, 1237, 1238, 1239, 834].

### src/types/board.ts

* Short description: Defines TypeScript types and interfaces related to board patterns as loaded from JSON, including walls, reflectors, targets, colors, and symbols[cite: 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 634]. Also includes type guards (`isValidBoardPattern`, `isValidBoardCollection`) for validating loaded data[cite: 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 635].

### src/utils/cardGenerator.ts

* CardDeck (Class) [cite: 1301]
    * constructor
        * short description: Initializes the deck by generating, shuffling cards, and setting the index[cite: 1302, 1303, 636].
        * input / output: Takes `board` (Board). Returns `void`[cite: 1302, 637].
    * generateCards (private)
        * short description: Creates the initial set of 17 cards (4 colors x 4 symbols + 1 vortex) without positions[cite: 1304, 1305, 1306, 638].
        * input / output: Takes no input. Returns `Omit<Card, 'position'>[]`[cite: 1304, 639].
    * findTargetPosition (private)
        * short description: Searches the board for the cell matching the given card's color and symbol to determine its position[cite: 1307, 1308, 1309, 1310, 1311, 640].
        * input / output: Takes `color` (CardColor), `symbol` (TargetSymbol). Returns `Position | null`[cite: 1307, 641].
    * shuffle (private)
        * short description: Randomizes the order of cards in the deck using the Fisher-Yates algorithm[cite: 1312, 642].
        * input / output: Takes no input, returns `void`. Modifies the internal `cards` array[cite: 1312, 643].
    * drawNext
        * short description: Draws the next card from the deck, finds its position on the board, and returns the complete card object. Returns null if the deck is empty or the target can't be found[cite: 1313, 1314, 1315, 1316, 1317, 1318, 644, 645].
        * input / output: Takes no input. Returns `Card | null`[cite: 1313, 646].
    * getRemaining
        * short description: Returns the number of cards left in the deck[cite: 1319, 647].
        * input / output: Takes no input. Returns `number`[cite: 1319, 648].
    * getTotalCards
        * short description: Returns the total number of cards the deck started with[cite: 1320, 649].
        * input / output: Takes no input. Returns `number`[cite: 1320, 650].

### server/src/services/__tests__/gameManager.test.ts

* Short description: Contains comprehensive tests for GameManager class[cite: 1321, 1322, 1323, 846].
* simulateFailedRound (Helper Function)
    * short description: Helper function to simulate a full game round where declarations are made, but all solution attempts fail (timers run out)[cite: 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333].
    * input / output: Input: `manager: GameManager`, `players: Player[]`, `rules: GameRules`. Output: `void`. Modifies game state via `manager` and advances Jest timers.
* Test suites:
    * Game Initialization: Tests game setup and starting conditions[cite: 1335, 1336, 1337, 847].
    * Declaration Phase: Tests move declaration validation and timing[cite: 1338, 1339, 1340, 1341, 1342, 1343, 847].
    * Solution Phase & Round Transitions: Tests robot movement validation, player turns, and transitions between phases/rounds[cite: 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 847].
    * Game End: Tests game completion conditions and ranking calculation[cite: 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1372, 1373, 1374, 847].
    * Timer Management: Tests timer cleanup and behavior[cite: 1359, 1360, 1361, 1362, 1363, 1364].
    * Score Management: Tests score updates (currently focusing on penalties not being applied)[cite: 1365, 1366, 1367, 1368, 1369, 1370, 1371].

### server/src/services/gameManager.ts

* GameManager (Class) [cite: 1375]
    * constructor
        * short description: Initializes game manager with players and rules[cite: 1376, 1377, 1378, 1379, 1380, 1381, 839].
        * input / output: Takes `players: Player[]`, `rules: GameRules`. Returns `void`[cite: 1376, 840].
    * initializeGameState (private)
        * short description: Sets up the initial game state object, including player states[cite: 1378, 1379, 1380, 1381].
        * input / output: Takes no input. Returns `MultiplayerGameState`.
    * startGame
        * short description: Starts the game if enough players are present, sets the phase to DECLARATION, and starts the declaration timer[cite: 1382, 1383, 841].
        * input / output: Takes no input. Returns `void`. Throws if game already started or too few players[cite: 1382, 1383, 842].
    * startDeclarationPhase (private)
        * short description: Sets the game phase to DECLARATION, clears previous declarations, and starts the declaration timer[cite: 1384, 1385, 1386].
        * input / output: Takes no input. Returns `void`.
    * startTimer (private)
        * short description: Starts an interval timer that decrements the game timer state and executes a callback when the timer reaches zero[cite: 1387, 1388, 1389, 1390, 1391]. Cleans up previous timers.
        * input / output: Input: `callback: () => void`, `duration: number`. Output: `void`.
    * declareMoves
        * short description: Handles player's move count declarations during the declaration phase[cite: 1392, 1393, 1394, 1395, 843]. Stores the declaration with a timestamp.
        * input / output: Takes `playerId: string`, `moves: number`. Returns `void`. Throws if invalid phase or moves[cite: 1392, 1393, 844].
    * endDeclarationPhase (private)
        * short description: Clears the declaration timer, sorts valid declarations by moves and timestamp, stores the player order, and transitions to the SOLUTION phase or the next card if no declarations were made[cite: 1396, 1397, 1398, 1399, 1400, 863].
        * input / output: Takes no input. Returns `void`. Modifies `gameState.phase`, `gameState.declarationOrder`, `gameState.currentPlayer`. Calls `startSolutionPhase()` or `drawNextCard()`[cite: 865].
    * startSolutionPhase (private)
        * short description: Sets the game phase to SOLUTION, clears move history, and starts the solution timer for the current player[cite: 1401, 1402, 1403, 1404].
        * input / output: Takes no input. Returns `void`.
    * moveRobot
        * short description: Handles robot movement attempts during the solution phase[cite: 1405, 1406, 1407, 1408, 1409, 1410, 844]. Validates turn and move count. Records move history. Checks for goal success.
        * input / output: Takes `playerId: string`, `robotColor: RobotColor`, `positions: Position[]`. Returns `void`. Throws errors for invalid state/turn[cite: 1405, 1406, 1407, 1408, 845].
    * checkGoal (private)
        * short description: Placeholder for goal checking logic[cite: 1411]. Currently always returns false.
        * input / output: Takes no input. Returns `boolean`.
    * successCurrentSolution (private)
        * short description: Clears the solution timer, awards points to the current player, and proceeds to the next card/round[cite: 1412, 1413, 1414, 1415, 1416, 876].
        * input / output: Takes no input. Returns `void`. Modifies `gameState.playerStates`. Calls `drawNextCard()`[cite: 877].
    * failCurrentSolution (private)
        * short description: Clears the solution timer, removes the current player from the declaration order, and transitions to the next player's turn or the next card if no players remain in the order[cite: 1417, 1418, 1419, 1420, 1421, 1422, 865, 879, 880]. Does not apply penalties[cite: 880].
        * input / output: Takes no input. Returns `void`. Modifies `gameState.declarationOrder`, `gameState.currentPlayer`. Calls `startSolutionPhase()` or `drawNextCard()`[cite: 867, 880].
    * drawNextCard (private)
        * short description: Decrements remaining cards. If cards remain, starts the next declaration phase[cite: 1423, 1424, 1425, 881]. If no cards remain, ends the game[cite: 1423, 1426, 882].
        * input / output: Takes no input. Returns `void`. Modifies `gameState.remainingCards`. Calls `startDeclarationPhase()` or `endGame()`[cite: 883].
    * endGame (private)
        * short description: Sets the game phase to FINISHED, clears timers, and calculates final player rankings based on scores[cite: 1427, 1428, 1429, 1430, 1431, 1432, 883].
        * input / output: Takes no input. Returns `void`. Modifies `gameState.phase`, `gameState.rankings`. Calls `cleanup()`[cite: 1427, 884].
    * getGameState
        * short description: Returns a copy of the current game state[cite: 1433, 845].
        * input / output: Takes no input. Returns `MultiplayerGameState`[cite: 846].
    * cleanup
        * short description: Clears any active interval timer[cite: 1434].
        * input / output: Takes no input. Returns `void`.

### src/pages/SinglePlayerPage.tsx

* SinglePlayerPage (Function Component) [cite: 1437, 651]
    * short description: Renders the user interface for the single-player game mode, including the game board, game info panel, and the declaration card list during the declaration phase[cite: 1435, 1436, 1444, 1445, 1446, 1447, 1448, 1449, 1450, 651]. Manages layout scaling[cite: 1437, 652].
    * getBoardScale
        * short description: Calculates a scaling factor for the game board based on window dimensions to ensure it fits within the available space alongside the side panel and declaration area[cite: 1439, 1440, 1441, 1442, 653].
        * input / output: Takes no input. Returns `number` (scale factor)[cite: 1439, 654].
    * input / output: Takes no input, returns JSX elements. Uses `useGameState` hook and `react-router-dom`[cite: 1435, 1438, 655].

### src/utils/boardLoader.ts

* BoardLoader (Class) [cite: 1451, 656]
    * constructor (private)
        * short description: Loads the raw board data from the imported JSON file[cite: 1452, 1453, 656]. Only called internally by `getInstance`[cite: 657].
        * input / output: Takes no input. Returns `void`[cite: 1452, 657].
    * getInstance (static public)
        * short description: Implements the Singleton pattern to ensure only one instance of BoardLoader exists[cite: 1454, 658].
        * input / output: Takes no input. Returns the singleton `BoardLoader` instance[cite: 1454, 659].
    * getPatternKey (private)
        * short description: Generates the key string (e.g., 'boards_A') used to access board data in the JSON object[cite: 1455, 660].
        * input / output: Takes `pattern` (string). Returns `keyof RawBoardSet`[cite: 1455, 661].
    * getBoardSetByPattern (public)
        * short description: Retrieves, transforms (adds string ID), and validates all board patterns for a given set (e.g., 'A')[cite: 1456, 1457, 1458, 662]. Filters out invalid boards[cite: 1458, 663].
        * input / output: Takes `pattern` (string). Returns `BoardPattern[]`[cite: 1456, 663].
    * getBoardById (public)
        * short description: Retrieves a specific board pattern by its string ID (e.g., "board_A0") and validates it[cite: 1460, 1461, 1462, 1463, 664].
        * input / output: Takes `boardId` (string). Returns `BoardPattern | undefined`[cite: 1459, 665].
    * getRandomGameBoards (public)
        * short description: Selects one random board pattern from each set (A, B, C, D) to create the set of 4 boards used for a game[cite: 1464, 1465, 666].
        * input / output: Takes no input. Returns `BoardPattern[]`[cite: 1464, 667].
    * debugPrintState (public)
        * short description: Logs the current state of the loaded board data for debugging purposes[cite: 1466, 668].
        * input / output: Takes no input. Returns `void`[cite: 1466, 669].
    * validateAllBoards (public)
        * short description: Validates all board patterns loaded from the JSON data across all sets[cite: 1468, 1469, 1470, 1471, 670].
        * input / output: Takes no input. Returns `{ valid: boolean; errors: string[] }`[cite: 1468, 671].

### src/components/GameBoard/BoardCell.tsx

* BoardCell (Function Component - memoized) [cite: 1473]
    * short description: Renders a single cell of the game board, including its background, walls, target (if any), and reflector (if any)[cite: 1472, 1486, 1487, 672].
    * getWallClasses
        * short description: Determines the CSS classes needed to display the correct walls for the cell[cite: 1474, 673].
        * input / output: Takes no input. Returns `string` (CSS class list)[cite: 674].
    * getTargetClasses
        * short description: Determines the CSS classes for styling the target element within the cell, including background color/gradient[cite: 1475, 1476, 675].
        * input / output: Takes no input. Returns `string` (CSS class list)[cite: 676].
    * getReflectorClasses
        * short description: Determines the CSS classes for styling the reflector element within the cell[cite: 1477, 1478, 677].
        * input / output: Takes no input. Returns `string` (CSS class list)[cite: 1478, 678].
    * renderReflector
        * short description: Renders the reflector symbol ('／' or '＼') if the cell has one[cite: 1479, 1480, 1481, 679]. Uses layered text for thickness[cite: 680].
        * input / output: Takes no input. Returns JSX element or `null`[cite: 1479, 680].
    * renderTargetSymbol
        * short description: Renders the target symbol (e.g., '☽', '⚙') if the cell is a target[cite: 1482, 1483, 1484, 1485, 681]. Handles vortex animation[cite: 1483, 682].
        * input / output: Takes no input. Returns JSX element or `null`[cite: 1482, 682].
    * input / output: Takes props `cell`, `x`, `y`, `size`[cite: 1472, 1473, 683]. Returns a div element (JSX)[cite: 683].

### src/components/GameBoard/GameBoard.tsx

* GameBoard (Function Component - memoized) [cite: 1490]
    * short description: Renders the main game board grid, including all `BoardCell` components and `Robot` components[cite: 1488, 1489, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 684]. Handles robot selection and keyboard/click events for initiating moves[cite: 1491, 1497, 685].
    * handleKeyDown
        * short description: Handles arrow key presses to trigger robot movement if a robot is selected and it's the player's turn[cite: 1491, 686].
        * input / output: Takes `e` (React.KeyboardEvent). Returns `void`. Calls `handleRobotMove`[cite: 687].
    * handleRobotMove
        * short description: Calculates the path for the selected robot in the chosen direction and calls the `onRobotMove` prop to update the game state[cite: 1492, 1493, 1494, 688]. Sets `isMoving` state during animation[cite: 1494, 689].
        * input / output: Takes `color` (RobotColor), `direction` (Direction). Returns `void`. Calls `calculatePath` and `onRobotMove` prop[cite: 1492, 1493, 690].
    * handleRobotClick
        * short description: Toggles the selection state of a robot when clicked[cite: 1495, 1496, 690].
        * input / output: Takes `color` (RobotColor). Returns `void`. Updates `selectedRobot` state[cite: 1495, 691].
    * input / output: Takes props `board`, `isPlayerTurn`, `onRobotMove`[cite: 1489, 1490, 692]. Returns a div element (JSX)[cite: 1497, 692].

### src/types/game.ts

* Short description: Defines core TypeScript types used in the game logic, including `Position`, `RobotColor`, `GameMode`, `Robot`, `Reflector`, `CellType`, `Cell`, `Board`, `Card`, `GamePhase`, `SinglePlayerState`, `GameState`, and `Direction`[cite: 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 693].

### src/utils/boardGenerator.ts

* createEmptyCell
    * short description: Creates a default, empty `Cell` object with all walls set to false[cite: 1529, 694].
    * input / output: Takes no input. Returns `Cell`[cite: 1529, 695].
* getTargetSymbol
    * short description: Converts a `TargetSymbol` enum value (e.g., 'moon') into its display character (e.g., '☽') using `SYMBOL_MAP`[cite: 1530, 1531, 696].
    * input / output: Takes `symbol` (TargetSymbol). Returns `string`[cite: 1531, 697].
* createEmptyBoard
    * short description: Creates a `Board` object of a given size, filled with empty cells[cite: 1532, 698].
    * input / output: Takes `size` (number). Returns `Board`[cite: 1532, 699].
* placeWalls
    * short description: Modifies a `Board` object by setting wall properties on cells based on a `BoardPattern`. Also sets the corresponding wall on the adjacent cell[cite: 1533, 1534, 700].
    * input / output: Takes `board` (Board), `pattern` (BoardPattern). Returns `void` (modifies board)[cite: 1533, 702].
* placeReflectors
    * short description: Modifies a `Board` object by adding reflector properties to cells based on a `BoardPattern`[cite: 1535, 1536, 702].
    * input / output: Takes `board` (Board), `pattern` (BoardPattern). Returns `void` (modifies board)[cite: 1535, 703].
* placeTargets
    * short description: Modifies a `Board` object by setting target properties on cells based on a `BoardPattern`[cite: 1537, 704].
    * input / output: Takes `board` (Board), `pattern` (BoardPattern). Returns `void` (modifies board)[cite: 1537, 705].
* isCenterArea
    * short description: Checks if a given coordinate falls within the central 2x2 area (assuming a 16x16 board) which is typically restricted for initial robot placement[cite: 1538, 706].
    * input / output: Takes `x` (number), `y` (number). Returns `boolean`[cite: 1538, 707].
* getRandomEmptyPosition
    * short description: Finds a random empty cell on the board that is not a target, not already occupied, and not in the center area. Used for initial robot placement[cite: 1539, 1540, 1541, 1542, 708].
    * input / output: Takes `board` (Board), `occupiedPositions` (Position[]), `maxAttempts` (number). Returns `Position`[cite: 1539, 709].
* placeRobots
    * short description: Modifies a `Board` object by adding the four robots (red, blue, yellow, green) to random valid starting positions[cite: 1543, 1544, 710].
    * input / output: Takes `board` (Board). Returns `void` (modifies board)[cite: 1543, 711].
* generateBoardFromPattern
    * short description: Creates a complete `Board` object ready for gameplay, by taking a `BoardPattern`, creating an empty board, and then placing walls, reflectors, targets, and robots[cite: 1545, 712].
    * input / output: Takes `pattern` (BoardPattern). Returns `Board`[cite: 1545, 713].

### src/pages/GamePage.tsx

* GamePage (Function Component) [cite: 1546, 851]
    * short description: Renders the main online game screen, including player list, game board, and game info/controls[cite: 1555, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 654]. Uses `useGameStore` hook[cite: 1547, 655]. Refactored to use `useGameStore` for multiplayer game state and actions[cite: 851]. Displays player list with scores and connection status, game board, game info (phase, timer, card), declarations, and game controls (start game button for host)[cite: 852]. Renders `DeclarationCardList` during the declaration phase[cite: 853]. Handles player turns and game over display[cite: 853].
    * getPhaseText (Helper Function)
        * short description: Converts a `GamePhase` enum value into displayable text[cite: 1550].
        * input / output: Takes `phase: GamePhase`. Returns `string`.
    * getTargetColorClass (Helper Function)
        * short description: Returns Tailwind CSS classes for styling based on the target card's color[cite: 1551, 1552, 1553].
        * input / output: Takes `color: Card['color']`. Returns `string`.
    * handleStartGame
        * short description: Calls the `startGame` action from the `useGameStore`[cite: 1558, 656].
        * input / output: Takes no input, returns `void`[cite: 657].
    * handleDeclareMoves
        * short description: Calls the `declareMoves` action from the `useGameStore`[cite: 1559, 670].
        * input / output: Takes `moves` (number). Returns `void`[cite: 671].
    * handleRobotMove
        * short description: Calculates the path for a robot move using `calculatePath` and calls the `moveRobot` action from `useGameStore` with the full path[cite: 1560, 1561, 1562, 1563].
        * input / output: Takes `robotColor: RobotColor`, `direction: Direction`. Returns `void`.
    * handleLeaveRoom
        * short description: Calls the `leaveRoom` action from `useGameStore` and navigates the user back to the online menu[cite: 1564].
        * input / output: Takes no input, returns `void`.
    * input / output: Takes no props[cite: 853]. Renders the main game UI. Uses `useGameStore`, `GameBoard`, `DeclarationCardList`, `GameResultDisplay`[cite: 854].

### src/hooks/useGameState.ts

* useGameState (Custom Hook) [cite: 1598, 714]
    * short description: Manages the entire game state, including the board, current card, game phase, player scores, moves, declarations, and timers[cite: 1599, 1600, 1601, 1602, 1606, 714]. Provides functions to interact with the game (draw card, declare moves, move robot)[cite: 1614, 1622, 715]. Handles game logic like goal checking and robot movement animation[cite: 1607, 1608, 1609, 1610, 1611, 1612, 1613, 1616, 1617, 1618, 1619, 1624, 1625, 1626, 1627, 1628, 1629, 716].
    * declareMoves
        * short description: Updates the game state with the number of moves declared by the player during the declaration phase. Handles logic for changing declarations and setting maximums[cite: 1614, 1615, 717].
        * input / output: Takes `moves` (number). Returns `void`. Updates `gameState`[cite: 1614, 719].
    * checkGoal
        * short description: Checks if the moved robot has reached the target specified by the current card, considering both position and color rules[cite: 1616, 1617, 1618, 1619, 719].
        * input / output: Takes `robot` (Robot). Returns `boolean`[cite: 1616, 720].
    * drawNextCard
        * short description: Draws the next card from the `CardDeck`, updates the `currentCard` in the state, and transitions the game phase to 'declaration', resetting timers and move counts[cite: 1620, 1621, 721]. Transitions to 'finished' if no cards left[cite: 1621, 722].
        * input / output: Takes no input. Returns the drawn `Card | null`. Updates `gameState`[cite: 1620, 723].
    * moveRobot
        * short description: Initiates a robot's movement. Calculates the path, triggers the animation state (`movingRobot`), updates the move count, and checks if the goal was reached or if the declared moves were exceeded[cite: 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 723, 724]. Updates score and completed cards on goal[cite: 1627, 725].
        * input / output: Takes `robotColor` (RobotColor), `direction` (Direction). Returns `void`. Updates `gameState` and `movingRobot` state[cite: 1622, 726].
    * input / output: Takes `mode` ('single' | 'multi'). Returns an object containing `gameState`, interaction functions (`moveRobot`, `declareMoves`, `drawNextCard`), `remainingCards`, and `totalCards`[cite: 1598, 1630, 727].



================================================================
End of Codebase
================================================================

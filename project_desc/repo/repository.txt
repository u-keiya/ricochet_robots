This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)

Additional Info:
----------------

================================================================
Directory Structure
================================================================
public/
  vite.svg
src/
  assets/
    boards.json
    react.svg
  components/
    GameBoard/
      BoardCell.tsx
      GameBoard.tsx
      Robot.tsx
    DeclarationCard.tsx
    GameInfo.tsx
  hooks/
    useGameState.ts
  pages/
    BoardTestPage.tsx
    CreateRoomPage.tsx
    GamePage.tsx
    JoinRoomPage.tsx
    OnlinePage.tsx
    SinglePlayerPage.tsx
    TitlePage.tsx
  types/
    board.ts
    game.ts
  utils/
    boardGenerator.ts
    boardLoader.ts
    boardRotation.ts
    boardValidator.ts
    cardGenerator.ts
    constants.ts
    robotMovement.ts
  App.tsx
  index.css
  main.tsx
  vite-env.d.ts
.env.development
.gitignore
eslint.config.js
index.html
online-implementation-plan.md
package.json
postcss.config.js
README.md
requirements.md
tailwind.config.js
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts

================================================================
Files
================================================================

**project_desc/definition.md**
* short description: Defines the requirements and specifications for the multiplayer mode of the Ricochet Robots game, including technology stack, features (room management, game flow, scoring, player management), non-functional requirements, UI details, and development phases[cite: 17, 18].

**project_desc/requirements.md**
* short description: Outlines the requirements for the browser-based Ricochet Robots game, covering system architecture, tech stack (React, TypeScript, Node.js, Socket.io), functional requirements (title screen, online play, room management, gameplay, card system, game flow), and development phases[cite: 19].

**public/vite.svg**
* short description: An SVG image file representing the Vite logo[cite: 20].

**server/coverage/lcov-report/base.css**
* short description: Base CSS styling for the LCOV code coverage report, defining styles for layout, typography, tables, and coverage indicators[cite: 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55].

**server/coverage/lcov-report/block-navigation.js**
* init (IIFE)
    * short description: Initializes keyboard navigation ('n', 'j', 'b', 'p', 'k') for jumping between uncovered code blocks in the LCOV report view[cite: 278, 289]. Queries elements and sets up listeners, returning the `jump` function[cite: 281, 282, 283, 284, 285, 286, 287, 288, 289, 290].
    * input / output: Takes no input. Returns the `jump` function.
* toggleClass (Inner function)
    * short description: Adds or removes the 'highlighted' class for visual navigation feedback[cite: 279].
    * input / output: Takes `index` (number). Returns `void`. Modifies element classes[cite: 279, 280].
* makeCurrent (Inner function)
    * short description: Highlights the element at the given index and scrolls it into view[cite: 281].
    * input / output: Takes `index` (number). Returns `void`.
* goToPrevious (Inner function)
    * short description: Calculates and jumps to the previous coverage element index[cite: 282].
    * input / output: Takes no input. Returns `void`. Calls `makeCurrent`[cite: 282, 283, 284, 285].
* goToNext (Inner function)
    * short description: Calculates and jumps to the next coverage element index[cite: 286].
    * input / output: Takes no input. Returns `void`. Calls `makeCurrent`[cite: 286, 287].
* jump (Returned function)
    * short description: Handles keydown events to trigger navigation, ignoring input if the search box is focused[cite: 288].
    * input / output: Takes `event` (KeyboardEvent). Returns `void`. Calls `goToNext` or `goToPrevious`[cite: 289, 290].

**server/coverage/lcov-report/prettify.css**
* short description: CSS file for syntax highlighting in the LCOV report using Google Code Prettify conventions[cite: 301].

**server/coverage/lcov-report/prettify.js**
* short description: Google Code Prettify JavaScript library for syntax highlighting source code within the LCOV report[cite: 301, 302, 303]. It parses code and applies CSS classes for styling.

**server/coverage/lcov-report/roomManager.ts.html**
* short description: HTML file displaying the detailed code coverage report for `roomManager.ts`, showing covered/uncovered lines, statements, and branches with statistics[cite: 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316].

**server/coverage/lcov-report/sorter.js**
* addSorting (IIFE)
    * short description: Adds click-to-sort functionality to table columns and a search filter box to the LCOV coverage report[cite: 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386].
    * input / output: Takes no input. Returns a function that initializes the UI enhancements.
* getTable / getTableHeader / getTableBody / getNthColumn (Inner functions)
    * short description: Helper functions to select elements within the coverage summary table.
    * input / output: Various inputs (e.g., column index). Return DOM elements.
* onFilterInput (Inner function)
    * short description: Filters table rows based on the search input value.
    * input / output: Takes no input. Returns `void`. Modifies row display style.
* addSearchBox (Inner function)
    * short description: Adds the search input box to the report UI.
    * input / output: Takes no input. Returns `void`. Modifies the DOM.
* loadColumns (Inner function)
    * short description: Reads table header attributes to define sortable columns and their types.
    * input / output: Takes no input. Returns an array of column definition objects.
* loadRowData (Inner function)
    * short description: Extracts data values from a table row's cells based on column definitions.
    * input / output: Takes `tableRow` (HTMLTableRowElement). Returns a data object for the row.
* loadData (Inner function)
    * short description: Attaches data objects to all rows in the table body.
    * input / output: Takes no input. Returns `void`. Modifies row elements.
* sortByIndex (Inner function)
    * short description: Sorts the table rows based on the data in the specified column index.
    * input / output: Takes `index` (number), `desc` (boolean). Returns `void`. Modifies row order in the DOM.
* removeSortIndicators / addSortIndicators (Inner functions)
    * short description: Manage CSS classes on table headers to show the current sort order.
    * input / output: Take no input. Returns `void`. Modifies header element classes.
* enableUI (Inner function)
    * short description: Attaches click event listeners to sortable column headers.
    * input / output: Takes no input. Returns `void`. Adds event listeners.

**server/.env.development**
* short description: Defines environment variables for the server's development mode, including `PORT`, `HOST`, `NODE_ENV`, and `CORS_ORIGIN`[cite: 427].

**server/jest.config.js**
* short description: Jest configuration file specifying the preset (`ts-jest`), environment (`node`), test locations, coverage collection settings, and coverage thresholds[cite: 428].

**server/package.json**
* short description: Node.js project manifest defining metadata, scripts (start, dev, build, test, etc.), dependencies (`express`, `socket.io`, `uuid`, etc.), and dev dependencies (types, Jest, ESLint, TypeScript, etc.)[cite: 429].

**server/tsconfig.json**
* short description: TypeScript configuration for the server project, setting compiler options (target, module, outDir, strict, etc.) and specifying included/excluded files[cite: 430].

**src/assets/boards.json**
* short description: JSON file containing definitions for various 8x8 Ricochet Robots board patterns (sets A, B, C, D), detailing wall, reflector, and target placements with their properties[cite: 650, 651, 652].

**src/assets/react.svg**
* short description: SVG image file for the React logo[cite: 157].

**src/components/GameBoard/BoardCell.tsx**
* BoardCell (Function Component - memoized) [cite: 398, 701]
    * getWallClasses
        * short description: Determines CSS classes for displaying cell walls based on the `cell.walls` properties[cite: 702].
        * input / output: Takes no input. Returns `string` (CSS classes).
    * getTargetClasses
        * short description: Determines CSS classes for styling the target element, including background color/gradient and handling the vortex animation[cite: 704].
        * input / output: Takes no input. Returns `string` (CSS classes).
    * getReflectorClasses
        * short description: Determines CSS classes for styling the reflector element[cite: 706].
        * input / output: Takes no input. Returns `string` (CSS classes).
    * renderReflector
        * short description: Renders the reflector symbol ('／' or '＼') if present, using layered text for thickness[cite: 708, 709].
        * input / output: Takes no input. Returns JSX element or `null`.
    * renderTargetSymbol
        * short description: Renders the target symbol (e.g., '☽') if the cell is a target, handling vortex animation[cite: 710, 711].
        * input / output: Takes no input. Returns JSX element or `null`.
    * short description: Renders a single cell of the game board, including background, walls, target, and reflector[cite: 701].
    * input / output: Takes props `cell`, `x`, `y`, `size`. Returns JSX `div` element[cite: 712].

**src/components/GameBoard/GameBoard.tsx**
* GameBoard (Function Component - memoized) [cite: 415, 713]
    * handleKeyDown
        * short description: Handles arrow key presses to trigger robot movement via `handleRobotMove` if a robot is selected and it's the player's turn[cite: 715].
        * input / output: Takes `e` (React.KeyboardEvent). Returns `void`.
    * handleRobotMove
        * short description: Calculates the robot's path, calls the `onRobotMove` prop, and sets the moving state[cite: 717, 718].
        * input / output: Takes `color` (RobotColor), `direction` (Direction). Returns `void`.
    * handleRobotClick
        * short description: Toggles the selection state of a clicked robot[cite: 719].
        * input / output: Takes `color` (RobotColor). Returns `void`. Updates `selectedRobot` state.
    * short description: Renders the game board grid, cells (`BoardCell`), and robots (`Robot`), handling robot selection and movement initiation (keyboard/click)[cite: 713, 714].
    * input / output: Takes props `board`, `isPlayerTurn`, `onRobotMove`. Returns JSX `div` element[cite: 721].

**src/components/GameBoard/Robot.tsx**
* DirectionArrow (Function Component) [cite: 304, 653]
    * short description: Renders a clickable arrow button for directing robot movement[cite: 653].
    * input / output: Takes `direction`, `onClick`, `position`. Returns JSX `button` element[cite: 654, 655].
* Robot (Function Component) [cite: 308, 655]
    * getPositionStyle
        * short description: Calculates CSS styles for positioning and sizing the robot[cite: 656].
        * input / output: Takes no input. Returns `CSSProperties` object.
    * getColorStyle
        * short description: Returns Tailwind CSS classes for the robot's background color[cite: 658].
        * input / output: Takes no input. Returns `string`.
    * handleMove
        * short description: Calls the `onMove` prop function when a direction arrow is clicked[cite: 660].
        * input / output: Takes `direction` (Direction). Returns `void`. Calls `onMove` prop[cite: 661].
    * short description: Renders a robot piece, handling position, color, selection, clicks, and displaying movement arrows[cite: 655].
    * input / output: Takes props `color`, `position`, `boardSize`, `isActive`, `isSelected`, `onMove`, `onClick`, `style`. Returns JSX `div` element[cite: 662, 663].

**src/components/DeclarationCard.tsx**
* DeclarationCard (Function Component) [cite: 155, 613]
    * short description: Renders a card for declaring moves, showing number and state (selected/disabled)[cite: 613, 614].
    * input / output: Takes `number`, `isSelected`, `isDisabled`, `onClick`. Returns JSX `button` element[cite: 614, 615].
* ChevronLeft (Function Component) [cite: 157, 615]
    * short description: Renders an SVG icon for a left chevron[cite: 615].
    * input / output: Takes no input. Returns SVG JSX[cite: 616].
* ChevronRight (Function Component) [cite: 158, 617]
    * short description: Renders an SVG icon for a right chevron[cite: 617].
    * input / output: Takes no input. Returns SVG JSX[cite: 618].
* DeclarationCardList (Function Component) [cite: 160, 619]
    * handlePrevClick
        * short description: Decrements the starting index for visible cards[cite: 620].
        * input / output: Takes no input. Returns `void`. Modifies `startIndex` state[cite: 621].
    * handleNextClick
        * short description: Increments the starting index for visible cards[cite: 622].
        * input / output: Takes no input. Returns `void`. Modifies `startIndex` state[cite: 623].
    * short description: Renders a scrollable list of `DeclarationCard`s for move count selection, with navigation arrows[cite: 619, 620].
    * input / output: Takes `selectedNumber`, `maxNumber`, `onSelect`, `className`. Returns JSX elements[cite: 624].

**src/components/GameInfo.tsx**
* GameInfo (Function Component) [cite: 99]
    * short description: Displays game info: score, move count, declared moves, timer, current target card, remaining cards, and a button to draw the next card[cite: 590, 591].
    * input / output: Takes props `score`, `moveCount`, `declaredMoves`, `timer`, `isDeclarationPhase`, `currentCard`, `remainingCards`, `onDrawCard`, `phase`. Returns JSX elements[cite: 592, 593].

**src/components/GameResultDisplay.tsx**
* GameResultDisplay (Function Component)
    * short description: Displays game results including rankings and scores when the game phase is 'finished'[cite: 914]. Retrieves ranking data and maps player names[cite: 915]. Includes a button to leave the room[cite: 188].
    * input / output: Takes props `players: Player[]`, `onLeaveRoom: () => void`. Returns JSX `div` element[cite: 915].

**src/components/room/CreateRoomForm.tsx**
* CreateRoomForm (Function Component)
    * handleSubmit
        * short description: Validates input, calls `createRoom` action from game store, handles loading state, and triggers `onSuccess` callback[cite: 436, 437, 438, 439, 440, 831].
        * input / output: Takes `e: React.FormEvent`. Returns `Promise<void>`. Uses/sets `name`, `password`, `error`, `isLoading` state. Calls `createRoom` and `onSuccess`.
    * short description: Renders a form to create a game room (name, optional password)[cite: 827]. Prevents creation until player is registered[cite: 935]. Uses `useGameStore`[cite: 828]. Handles errors and loading state[cite: 829].
    * input / output: Takes `onSuccess` prop. Returns JSX `form` element. Uses `useGameStore`.

**src/components/room/RoomList.tsx**
* RoomList (Function Component)
    * handleJoinRoom
        * short description: Validates room selection and password, calls `joinRoom` action from game store, handles errors, and triggers `onJoinSuccess` callback[cite: 449, 450, 451, 837].
        * input / output: Takes `e: React.FormEvent`. Returns `void`[cite: 838]. Uses `selectedRoom`, `password` state. Sets `error` state. Calls `joinRoom` and `onJoinSuccess`.
    * getStatusText
        * short description: Converts room status enum ('waiting', etc.) to Japanese text[cite: 452].
        * input / output: Takes `status: string`. Returns `string`[cite: 840].
    * short description: Displays a list of available game rooms, allowing selection and password entry for joining[cite: 832, 833]. Shows status and lock icon[cite: 835]. Uses `useGameStore`[cite: 834].
    * input / output: Takes `rooms`, `onJoinSuccess`. Returns JSX elements. Uses `useGameStore`.

**src/hooks/useGameState.ts**
* useGameState (Custom Hook) [cite: 474, 743]
    * declareMoves
        * short description: Updates state with the player's declared move count during the declaration phase, handling logic for changing declarations[cite: 746].
        * input / output: Takes `moves` (number). Returns `void`. Updates `gameState`[cite: 747, 748].
    * checkGoal
        * short description: Checks if the moved robot reached the current card's target (position and color)[cite: 748].
        * input / output: Takes `robot` (Robot). Returns `boolean`[cite: 749].
    * drawNextCard
        * short description: Draws the next card, updates state (`currentCard`, `phase` to 'declaration'), resets timers/moves[cite: 750]. Transitions to 'finished' if deck empty[cite: 751].
        * input / output: Takes no input. Returns `Card | null`. Updates `gameState`[cite: 751, 752].
    * moveRobot
        * short description: Initiates robot movement, calculates path, triggers animation, updates move count, checks for goal/overshoot, updates score/completed cards[cite: 753, 754].
        * input / output: Takes `robotColor` (RobotColor), `direction` (Direction). Returns `void`. Updates `gameState`, `movingRobot` state[cite: 754, 755].
    * short description: Manages the entire single-player game state (board, card, phase, score, moves, declarations, timer, animations) and provides interaction functions[cite: 743, 744, 745]. Initializes the board and card deck[cite: 470, 471, 473, 474, 476, 477, 478, 482, 495, 498, 505].
    * input / output: Takes `mode` ('single'). Returns object with `gameState`, interaction functions, `remainingCards`, `totalCards`[cite: 755, 756].

**src/index.css**
* short description: Defines base styles, component styles (buttons), and utility classes using Tailwind CSS[cite: 70].

**src/main.tsx**
* short description: Main entry point for the React application, rendering the root `App` component[cite: 72].

**src/pages/BoardTestPage.tsx**
* BoardTestPage (Function Component) [cite: 171, 625]
    * handleBoardSelect
        * short description: Updates state for the selected board in a specific quadrant[cite: 627].
        * input / output: Takes `position`, `board`. Returns `void`. Updates `selectedBoards` state[cite: 628].
    * handleCreateComposite
        * short description: Creates and sets the composite board pattern from selected quadrants[cite: 629].
        * input / output: Takes no input. Returns `void`. Uses `selectedBoards`, calls `createCompositeBoardPattern`, updates `compositeBoard` state[cite: 630].
    * short description: Development page to load, display, rotate, select, combine, and validate board patterns using various utility functions and components[cite: 625, 626].
    * input / output: Takes no input. Returns JSX elements. Uses `BoardLoader`, `GameBoard`, utils.

**src/pages/CreateRoomPage.tsx**
* CreateRoomPage (Function Component)
    * handleCreateSuccess
        * short description: Navigates to the game page using the created room's ID upon successful room creation[cite: 1325]. Handles potential errors if room data is invalid[cite: 1327].
        * input / output: Takes `room: Room`. Returns `void`. Uses `Maps`.
    * short description: Page for creating a new online game room. Handles connection status, player registration status, and displays the `CreateRoomForm`[cite: 1320, 1322, 1323, 1324, 1332]. Redirects to the game page on success[cite: 1325].
    * input / output: Takes no input. Returns JSX elements. Uses `useGameStore`, `CreateRoomForm`, `useNavigate`.

**src/pages/GamePage.tsx**
* GamePage (Function Component)
    * getPhaseText (Helper)
        * short description: Converts `GamePhase` enum to display text.
        * input / output: Takes `phase: GamePhase`. Returns `string`.
    * getTargetColorClass (Helper)
        * short description: Returns Tailwind CSS class for target color[cite: 1583].
        * input / output: Takes `color: Card['color']`. Returns `string`.
    * handleStartGame
        * short description: Calls the `startGame` action from the game store[cite: 1589].
        * input / output: Takes no input. Returns `void`.
    * handleDeclareMoves
        * short description: Calls the `declareMoves` action from the game store[cite: 1590].
        * input / output: Takes `moves: number`. Returns `void`.
    * handleRobotMove
        * short description: Calculates the robot's path using `calculatePath` and calls the `moveRobot` action from the game store with the path[cite: 1591, 1593, 1594].
        * input / output: Takes `robotColor: RobotColor`, `direction: Direction`. Returns `void`.
    * handleLeaveRoom
        * short description: Calls the `leaveRoom` action from the game store and navigates back to the online menu[cite: 1595].
        * input / output: Takes no input. Returns `void`.
    * short description: Renders the main online multiplayer game screen, displaying player list, scores, game board, game info, declarations, game controls (for host), and results. Manages UI based on game state from `useGameStore`[cite: 112, 1578, 1579, 1580, 1581, 1587, 1588, 1601, 1608, 1613, 1618, 1625].
    * input / output: Takes no input. Returns JSX elements. Uses `useGameStore`, `GameBoard`, `DeclarationCardList`, `GameResultDisplay`, utils.

**src/pages/JoinRoomPage.tsx**
* JoinRoomPage (Function Component)
    * handleJoinSuccess
        * short description: Placeholder function intended to handle actions after successfully joining a room (navigation is handled by `useEffect` watching `currentRoom`)[cite: 525].
        * input / output: Takes no input. Returns `void`.
    * short description: Page for joining an existing online game room. Handles connection, player registration, displays available rooms using `RoomList`, and navigates to the game page upon joining[cite: 520, 521, 522, 523, 524, 528, 529].
    * input / output: Takes no input. Returns JSX elements. Uses `useGameStore`, `RoomList`, `useNavigate`.

**src/pages/OnlinePage.tsx**
* OnlinePage (Function Component)
    * short description: Displays buttons to navigate to "Create Room", "Join Room", or back to the title page[cite: 195, 196, 197].
    * input / output: Takes no input. Returns JSX elements. Uses `useNavigate`.

**src/pages/SinglePlayerPage.tsx**
* SinglePlayerPage (Function Component) [cite: 362, 680]
    * getBoardScale
        * short description: Calculates a scale factor for the game board based on window size to fit UI elements[cite: 682].
        * input / output: Takes no input. Returns `number`[cite: 683].
    * short description: Renders the single-player game UI, including the board, info panel, and declaration cards, managing layout scaling[cite: 680, 681].
    * input / output: Takes no input. Returns JSX elements. Uses `useGameState`, `GameBoard`, `GameInfo`, `DeclarationCardList`[cite: 684].

**src/pages/TitlePage.tsx**
* TitlePage (Function Component) [cite: 198, 532, 631]
    * short description: Renders the main title screen with buttons to navigate to Single Player, Online Play, and Board Test pages[cite: 631].
    * input / output: Takes no input. Returns JSX elements. Uses `useNavigate`[cite: 632].

**src/services/socketService.ts**
* SocketService (Class - Singleton) [cite: 495, 843]
    * getInstance (static public)
        * short description: Provides access to the single `SocketService` instance, creating it if necessary[cite: 843].
        * input / output: Takes no input. Returns `SocketService` instance[cite: 844].
    * connect
        * short description: Establishes WebSocket connection, handles events ('connect', 'connect_error', 'disconnect'), manages reconnection attempts, and resolves with the socket ID on success[cite: 845, 846].
        * input / output: Takes no input. Returns `Promise<string>`[cite: 847, 938].
    * disconnect
        * short description: Disconnects the socket and clears the internal reference[cite: 848].
        * input / output: Takes no input. Returns `void`.
    * emit (private helper)
        * short description: Safely emits a specified event with arguments if the socket is connected.
        * input / output: Takes `event` (keyof ClientToServerEvents), `...args`. Returns `void`.
    * registerPlayer
        * short description: Emits the 'register' event with the player's name[cite: 849].
        * input / output: Takes `name: string`. Returns `void`.
    * createRoom
        * short description: Emits 'createRoom' event and returns a Promise that resolves with the created Room object or rejects on error/timeout[cite: 850].
        * input / output: Takes `options: { name: string; password?: string }`. Returns `Promise<Room>`.
    * joinRoom
        * short description: Emits 'joinRoom' event with room ID and optional password[cite: 852].
        * input / output: Takes `roomId: string`, `password?: string`. Returns `void`.
    * leaveRoom
        * short description: Emits 'leaveRoom' event with room ID[cite: 854].
        * input / output: Takes `roomId: string`. Returns `void`.
    * getAvailableRooms
        * short description: Emits 'getAvailableRooms' event to request the room list[cite: 1540].
        * input / output: Takes no input. Returns `void`.
    * startGame
        * short description: Emits 'startGame' event with room ID[cite: 1541].
        * input / output: Takes `roomId: string`. Returns `void`.
    * declareMoves
        * short description: Emits 'declareMoves' event with room ID and move count[cite: 1542].
        * input / output: Takes `roomId: string`, `moves: number`. Returns `void`.
    * moveRobot
        * short description: Emits 'moveRobot' event with room ID, robot color, and calculated path[cite: 1543].
        * input / output: Takes `roomId: string`, `robotColor: RobotColor`, `path: Position[]`. Returns `void`.
    * registerEventListener (private helper)
        * short description: Registers a callback for a specific server event, removing any previous listener first.
        * input / output: Takes `event` (keyof ServerToClientEvents), `callback`. Returns `void`.
    * onRegistered / onRoomCreated / onRoomJoined / onRoomLeft / onRoomUpdated / onRoomListUpdated / onError / onGameStarted / onGameStateUpdated / onDeclarationMade / onTurnChanged / onSolutionAttemptResult / onGameOver
        * short description: Methods to register callbacks for specific server-sent events using `registerEventListener`[cite: 855, 954].
        * input / output: Takes `callback: (data: any) => void`. Returns `void`.
    * removeAllListeners
        * short description: Removes all registered event listeners from the socket[cite: 857].
        * input / output: Takes no input. Returns `void`.

**src/services/__tests__/socketService.test.ts**
* short description: Vitest unit tests for `SocketService`, mocking `socket.io-client`[cite: 841]. Tests singleton pattern, connection (success/error), room operations (checking emitted events), event handler registration, and disconnection[cite: 842].

**src/stores/gameStore.ts**
* isMultiplayerGameState (Type Guard)
    * short description: Checks if a state object conforms to the `MultiplayerGameState` interface[cite: 932].
    * input / output: Takes `state: any`. Returns `boolean`[cite: 933, 934].
* useGameStore (Zustand Hook/Store)
    * connect (Action)
        * short description: Connects using `SocketService`, sets connection state, stores the socket ID, and registers listeners for server events[cite: 1675]. Handles errors[cite: 1676, 1677, 1678, 1679, 1680, 1681, 1683, 1684, 1685, 1686, 1687, 1690, 1691, 1692].
        * input / output: Takes no input. Returns `Promise<void>`. Updates store state.
    * disconnect (Action)
        * short description: Disconnects using `SocketService` and resets relevant store state, including `socketId`[cite: 1694, 942].
        * input / output: Takes no input. Returns `void`. Updates store state.
    * registerPlayer (Action)
        * short description: Calls `socketService.registerPlayer`[cite: 1696].
        * input / output: Takes `name: string`. Returns `void`.
    * createRoom (Action)
        * short description: Calls `socketService.createRoom` and returns the resulting `Room` object, handling errors[cite: 1697, 1698, 1699, 1700, 1701].
        * input / output: Takes `options`. Returns `Promise<Room>`[cite: 1702].
    * joinRoom (Action)
        * short description: Calls `socketService.joinRoom`[cite: 1702].
        * input / output: Takes `roomId`, `password?`. Returns `void`.
    * leaveRoom (Action)
        * short description: Calls `socketService.leaveRoom` if currently in a room[cite: 1703, 1704].
        * input / output: Takes no input. Returns `void`.
    * setConnectionError (Action)
        * short description: Updates the `connectionError` state[cite: 1705].
        * input / output: Takes `error: string | null`. Returns `void`.
    * startGame (Action)
        * short description: Calls `socketService.startGame` if in a room[cite: 1706, 1707].
        * input / output: Takes no input. Returns `void`.
    * declareMoves (Action)
        * short description: Placeholder/future implementation for calling `socketService.declareMoves`[cite: 1709, 1710, 1711, 1712].
        * input / output: Takes `moves: number`. Returns `void`.
    * moveRobot (Action)
        * short description: Placeholder/future implementation for calling `socketService.moveRobot`[cite: 1713, 1714, 1715, 1716].
        * input / output: Takes `robotColor`, `path`. Returns `void`.
    * short description: Zustand store managing client-side global state: connection, player info, room details, available rooms, socket ID, and multiplayer game state[cite: 858, 859, 860]. Provides actions interacting with `SocketService` and updates state based on socket events[cite: 861, 862, 863].

**src/types/board.ts**
* short description: Defines TypeScript types/interfaces for board patterns (raw from JSON and processed), including `WallDirection`, `ReflectorDirection`, `TargetSymbol`, `TargetColor`, `BaseBoardPattern`, `RawBoardPattern`, `BoardPattern`, `RawBoardSet`, `WallPosition`, `ReflectorPosition`, `TargetPosition`, `BoardCollection`. Includes type guards `isValidBoardPattern` and `isValidBoardCollection` for validation[cite: 663, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208].

**src/types/game.ts**
* short description: Defines core TypeScript types for game logic: `Position`, `RobotColor`, `GameMode`, `Robot`, `Reflector`, `CellType`, `Cell`, `Board`, `Card`, `GamePhase`, `SinglePlayerState`, `GameState`, `Direction`, `Declaration`, `PlayerGameState`, `MultiplayerGameState` (using Record for relevant properties)[cite: 722, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658]. Includes basic Player interface for type checking within `MultiplayerGameState`[cite: 1659].

**src/types/player.ts**
* short description: Defines the client-side `Player` interface, `PlayerSession` (potentially unused), and `PlayerStatus` enum[cite: 863]. *Note: May differ slightly from server definition.*

**src/types/room.ts**
* short description: Defines client-side interfaces for `Room`, `GameState`, `RoomSummary`, and `RoomOptions`, and the `GameStatus` enum[cite: 864]. *Note: May differ slightly from server definition (e.g., Map vs Record).*

**src/types/socket.ts**
* short description: Defines TypeScript interfaces for Socket.IO events (`ServerToClientEvents`, `ClientToServerEvents`) and the combined `GameSocket` type, specifying event names and payload types for client-server communication[cite: 865, 866, 886]. Event names like 'roomListUpdated' reflect recent changes[cite: 952].

**src/utils/boardGenerator.ts**
* createEmptyCell
    * short description: Creates a default empty `Cell` object[cite: 723].
    * input / output: Takes no input. Returns `Cell`.
* getTargetSymbol
    * short description: Converts `TargetSymbol` enum to its display character[cite: 725].
    * input / output: Takes `symbol` (TargetSymbol). Returns `string`.
* createEmptyBoard
    * short description: Creates a `Board` object filled with empty cells[cite: 727].
    * input / output: Takes `size` (number). Returns `Board`.
* placeWalls
    * short description: Adds walls to a board based on a pattern, setting walls on adjacent cells too[cite: 729].
    * input / output: Takes `board`, `pattern`. Returns `void` (modifies board)[cite: 730, 731].
* placeReflectors
    * short description: Adds reflectors to board cells based on a pattern[cite: 731].
    * input / output: Takes `board`, `pattern`. Returns `void` (modifies board)[cite: 732].
* placeTargets
    * short description: Adds targets to board cells based on a pattern[cite: 733].
    * input / output: Takes `board`, `pattern`. Returns `void` (modifies board)[cite: 734].
* isCenterArea
    * short description: Checks if coordinates are in the central 2x2 area (for 16x16 board)[cite: 735].
    * input / output: Takes `x`, `y`. Returns `boolean`.
* getRandomEmptyPosition
    * short description: Finds a random valid starting position for a robot (not target, occupied, or center)[cite: 737].
    * input / output: Takes `board`, `occupiedPositions`, `maxAttempts`. Returns `Position`.
* placeRobots
    * short description: Adds the four robots to random valid starting positions on the board[cite: 739].
    * input / output: Takes `board`. Returns `void` (modifies board).
* generateBoardFromPattern
    * short description: Creates a complete `Board` object from a `BoardPattern` by placing walls, reflectors, targets, and robots[cite: 741].
    * input / output: Takes `pattern`. Returns `Board`.

**src/utils/boardLoader.ts**
* BoardLoader (Class - Singleton) [cite: 376, 685]
    * constructor (private)
        * short description: Loads raw board data from JSON[cite: 685].
        * input / output: Takes no input. Returns `void`.
    * getInstance (static public)
        * short description: Implements Singleton pattern for `BoardLoader`[cite: 687].
        * input / output: Takes no input. Returns `BoardLoader` instance.
    * getPatternKey (private)
        * short description: Generates key string (e.g., 'boards\_A') for accessing JSON data[cite: 689].
        * input / output: Takes `pattern`. Returns `keyof RawBoardSet`.
    * getBoardSetByPattern (public)
        * short description: Retrieves, transforms (adds string ID), validates, and returns all valid boards for a given pattern set (A, B, C, or D)[cite: 691, 692].
        * input / output: Takes `pattern`. Returns `BoardPattern[]`.
    * getBoardById (public)
        * short description: Retrieves and validates a specific board by its string ID (e.g., "board\_A0")[cite: 693].
        * input / output: Takes `boardId`. Returns `BoardPattern | undefined`.
    * getRandomGameBoards (public)
        * short description: Selects one random board from each set (A, B, C, D)[cite: 695].
        * input / output: Takes no input. Returns `BoardPattern[]`.
    * debugPrintState (public)
        * short description: Logs the current state of loaded board data for debugging[cite: 697].
        * input / output: Takes no input. Returns `void`.
    * validateAllBoards (public)
        * short description: Validates all loaded board patterns across all sets[cite: 699].
        * input / output: Takes no input. Returns `{ valid: boolean; errors: string[] }`.

**src/utils/boardRotation.ts**
* rotateWallDirection
    * short description: Calculates the new wall direction after board rotation[cite: 633].
    * input / output: Takes `direction`, `rotation`. Returns `WallDirection`.
* rotateReflectorDirection
    * short description: Calculates new reflector orientation after rotation (changes for 90/270 deg)[cite: 635].
    * input / output: Takes `direction`, `rotation`. Returns `ReflectorDirection`.
* rotatePosition
    * short description: Calculates new (x, y) coordinates after board rotation[cite: 637].
    * input / output: Takes `x`, `y`, `size`, `rotation`. Returns `[number, number]`.
* rotateBoard
    * short description: Rotates an entire `BoardPattern` (walls, reflectors, targets)[cite: 639].
    * input / output: Takes `board`, `rotation`. Returns new rotated `BoardPattern`.
* createCompositeBoardPattern
    * transformCoordinates (Helper)
        * short description: Converts 8x8 coordinates to 16x16 composite coordinates based on quadrant[cite: 642].
        * input / output: Takes `x`, `y`, `quadrant`. Returns `[number, number]`.
    * transformElements (Helper)
        * short description: Applies coordinate transformation to an array of elements[cite: 644].
        * input / output: Takes `elements`, `quadrant`. Returns transformed array[cite: 645].
    * short description: Combines four 8x8 boards into one 16x16 board, applying rotations and coordinate transformations[cite: 641].
    * input / output: Takes four `BoardPattern`s. Returns composite `BoardPattern`.

**src/utils/boardValidator.ts**
* BoardValidator (Class) [cite: 54, 560]
    * isValidPosition (static private)
        * short description: Checks if (x, y) is within board bounds[cite: 560].
        * input / output: Takes `x`, `y`, `size`. Returns `boolean`.
    * isValidTargetColor (static private)
        * short description: Checks if target color is valid (handles vortex)[cite: 562].
        * input / output: Takes `color`, `isVortex`. Returns `boolean`.
    * validateBoard (static public)
        * short description: Validates a single board pattern (size, walls, reflectors, targets)[cite: 564]. Logs warnings[cite: 566].
        * input / output: Takes `board`. Returns `boolean`.
    * validateBoardSet (static public)
        * short description: Validates an array of board patterns[cite: 567]. Logs errors[cite: 66].
        * input / output: Takes `pattern`, `boards`. Returns `{ valid: boolean; errors: string[] }`.

**src/utils/cardGenerator.ts**
* CardDeck (Class) [cite: 341, 665]
    * constructor
        * short description: Initializes the deck: generates cards, shuffles, sets index[cite: 665].
        * input / output: Takes `board` (Board). Returns `void`.
    * generateCards (private)
        * short description: Creates the initial 17 cards (4 colors x 4 symbols + 1 vortex) without positions[cite: 667].
        * input / output: Takes no input. Returns `Omit<Card, 'position'>[]`.
    * findTargetPosition (private)
        * short description: Finds the board position matching a card's color and symbol[cite: 669].
        * input / output: Takes `color`, `symbol`. Returns `Position | null`.
    * shuffle (private)
        * short description: Randomizes card order using Fisher-Yates[cite: 671].
        * input / output: Takes no input. Returns `void`. Modifies internal `cards`.
    * drawNext
        * short description: Draws the next card, finds its position, returns the complete card, or null if deck empty/target not found[cite: 673, 674].
        * input / output: Takes no input. Returns `Card | null`.
    * getRemaining
        * short description: Returns the number of cards left[cite: 676].
        * input / output: Takes no input. Returns `number`.
    * getTotalCards
        * short description: Returns the total initial number of cards[cite: 678].
        * input / output: Takes no input. Returns `number`.

**src/utils/constants.ts**
* short description: Defines constants: `SYMBOL_MAP` (symbol name to character), `SYMBOLS` (array of symbol names), `ROBOT_COLORS` (array of color names)[cite: 601].

**src/utils/robotMovement.ts**
* calculateReflection
    * short description: Calculates robot's new direction after hitting a reflector[cite: 602].
    * input / output: Takes `direction`, `reflectorDirection`. Returns `Direction`.
* getNextPosition
    * short description: Calculates the next grid position based on direction[cite: 604].
    * input / output: Takes `position`, `direction`. Returns `Position`.
* hasCollision
    * short description: Checks for collisions with boundaries, other robots, or walls[cite: 606].
    * input / output: Takes `board`, `position`, `nextPosition`, `direction`. Returns `boolean`.
* calculatePath
    * short description: Calculates the full path (array of positions) a robot takes in a direction until stopping/reflecting[cite: 608].
    * input / output: Takes `board`, `robot`, `initialDirection`. Returns `Position[]`.
* calculateFinalPosition
    * short description: Calculates only the final stopping position of a robot's move[cite: 611].
    * input / output: Takes `board`, `robot`, `direction`. Returns `Position`.

**src/vite-env.d.ts**
* short description: TypeScript declaration file for Vite client types[cite: 73].

**.env.development**
* short description: Environment variables for frontend development, setting the `VITE_SOCKET_URL` for the WebSocket server[cite: 74].

**.gitignore**
* short description: Specifies files and directories for Git to ignore (logs, node_modules, build output, editor files)[cite: 75].

**eslint.config.js**
* short description: ESLint configuration using `@eslint/js` and `typescript-eslint`, enabling plugins for React Hooks and Refresh, defining globals, and ignoring the `dist` directory[cite: 76].

**index.html**
* short description: Main HTML file for the SPA, including the root div and script tag for `main.tsx`[cite: 78].

**package.json**
* short description: Frontend project manifest defining metadata, scripts (dev, build, lint, preview), dependencies (React, Zustand, React Router), and dev dependencies (Vite, TypeScript, ESLint, Tailwind, etc.)[cite: 79].

**postcss.config.js**
* short description: PostCSS configuration specifying plugins: `tailwindcss/nesting`, `tailwindcss`, `autoprefixer`[cite: 80].

**README.md**
* short description: Introduction to the Vite + React + TypeScript template, mentioning plugins and suggesting ESLint extensions[cite: 81].

**tailwind.config.js**
* short description: Tailwind CSS configuration specifying content files, extending the theme (colors), and listing plugins[cite: 83].

**tsconfig.app.json**
* short description: TypeScript configuration for the `src` directory, setting options for bundler mode, JSX, strict linting, etc[cite: 85].

**tsconfig.json**
* short description: Root TypeScript configuration referencing `tsconfig.app.json` and `tsconfig.node.json` for a composite project[cite: 86].

**tsconfig.node.json**
* short description: TypeScript configuration for Node.js-related files (like `vite.config.ts`), setting appropriate compiler options[cite: 88].

**vite.config.ts**
* short description: Vite build tool configuration, enabling the React plugin[cite: 89].

================================================================
End of Codebase
================================================================

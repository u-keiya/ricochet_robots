This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)

Additional Info:
----------------

================================================================
Directory Structure
================================================================
public/
  vite.svg
src/
  assets/
    boards.json
    react.svg
  components/
    GameBoard/
      BoardCell.tsx
      GameBoard.tsx
      Robot.tsx
    DeclarationCard.tsx
    GameInfo.tsx
  hooks/
    useGameState.ts
  pages/
    BoardTestPage.tsx
    CreateRoomPage.tsx
    GamePage.tsx
    JoinRoomPage.tsx
    OnlinePage.tsx
    SinglePlayerPage.tsx
    TitlePage.tsx
  types/
    board.ts
    game.ts
  utils/
    boardGenerator.ts
    boardLoader.ts
    boardRotation.ts
    boardValidator.ts
    cardGenerator.ts
    constants.ts
    robotMovement.ts
  App.tsx
  index.css
  main.tsx
  vite-env.d.ts
.env.development
.gitignore
eslint.config.js
index.html
online-implementation-plan.md
package.json
postcss.config.js
README.md
requirements.md
tailwind.config.js
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts

================================================================
Files
================================================================

Okay, here is the source code structure for the relevant files in the repository, formatted as you requested. Files that do not contain classes or functions suitable for this format are described briefly.

**`server/src/services/cardDeck.ts`** 

* **CardDeck (Class)** 
    * short description: Manages the deck of target cards for the game
    * **constructor** 
        * short description: Initializes the card deck using a map of target positions. Generates and shuffles cards
        * input / output: `targetPositions: Map<string, Position>` / `void`
    * **generateCards** (private) 
        * short description: Generates the initial set of server-side cards (normal + vortex), ensuring target positions exist
        * input / output: None / `ServerCard[]`
    * **getTargetPosition** (private) 
        * short description: Retrieves the board position for a given card's symbol and color (or null for vortex)
        * input / output: `color: RobotColor | null`, `symbol: TargetSymbol` / `Position | null`
    * **shuffle** (private) 
        * short description: Randomizes the order of cards in the deck using Fisher-Yates algorithm
        * input / output: None / `void`
    * **drawNext** 
        * short description: Draws the next card from the deck, finds its position, and returns it. Skips cards if target position is not found
        * input / output: None / `Card | null`
    * **getRemaining** 
        * short description: Returns the number of cards remaining in the deck
        * input / output: None / `number`
    * **getTotalCards** 
        * short description: Returns the total number of cards initially generated for the deck
        * input / output: None / `number`

**`server/src/services/gameManager.ts`** 

* **GameManager (Class)** 
    * short description: Manages the state and logic of a multiplayer Ricochet Robots game instance, extends EventEmitter
    * **constructor** 
        * short description: Initializes game with players, board pattern IDs, target positions, and rules. Creates `CardDeck`. Sets initial game state
        * input / output: `players: Player[]`, `boardPatternIds: string[]`, `targetPositions: TargetPositions`, `rules: GameRules` / `void`
    * **initializeGameState** (private) 
        * short description: Creates the initial game state object, including player states and initial robot positions
        * input / output: None / `MultiplayerGameState`.
    * **startGame** 
        * short description: Starts the game if phase is WAITING and players >= 2. Sets initial robot positions and phase to WAITING. Emits update
        * input / output: `players: Player[]` / `void`
    * **startDeclarationPhase** (private) 
        * short description: Sets the game phase to DECLARATION, resets declarations, and sets the timer duration. Emits update
        * input / output: None / `void`.
    * **startTimer** (private) 
        * short description: Starts a countdown timer, updating the game state's timer value and executing a callback when it reaches zero
        * input / output: `callback: () => void`, `duration: number` / `void`.
    * **handleDrawCard** 
        * short description: Handles a request to draw the first card if in WAITING phase. Draws card, updates state, and starts declaration phase
        * input / output: `playerId: string` / `void`
    * **declareMoves** 
        * short description: Handles player move declarations during the DECLARATION phase. Emits update
        * input / output: `playerId: string`, `moves: number` / `void`
    * **endDeclarationPhase** (private) 
        * short description: Sorts declarations, sets `declarationOrder`, sets `currentPlayer`, and starts the solution phase or proceeds to the next round. Emits update
        * input / output: None / `void`
    * **startSolutionPhase** (private) 
        * short description: Sets phase to SOLUTION, resets history/attempt moves, starts solution timer. Emits update
        * input / output: None / `void`.
    * **moveRobot** 
        * short description: Handles robot movement attempts during the SOLUTION phase. Updates robot position, increments attempt moves, validates against declared moves, records move, checks goal, emits update
        * input / output: `playerId: string`, `robotColor: RobotColor`, `path: Position[]` / `void`
    * **checkGoal** (private) 
        * short description: Checks if the current robot positions match the target card position and color requirements (including Vortex)
        * input / output: None / `boolean`
    * **successCurrentSolution** (private) 
        * short description: Awards points to the current player, proceeds to the next round. Emits update
        * input / output: None / `void`
    * **failCurrentSolution** (private) 
        * short description: Removes current player from `declarationOrder`, moves to the next player or proceeds to the next round if no one is left. Emits update
        * input / output: None / `void`
    * **proceedToNextRound** (private, renamed from `drawNextCard`) 
        * short description: Draws the next card using `CardDeck`, resets round state, starts declaration phase or ends game
        * input / output: None / `void`
    * **endGame** (private) 
        * short description: Sets phase to FINISHED, calculates rankings based on scores, emits update, and cleans up timers
        * input / output: None / `void`
    * **getGameState** 
        * short description: Returns a deep copy (via JSON stringify/parse) of the current game state
        * input / output: None / `MultiplayerGameState`
    * **cleanup** (public) 
        * short description: Clears any active timer interval
        * input / output: None / `void`

**`server/src/services/roomManager.ts`** 

* **RoomManager (Class)** 
    * **constructor** 
        * short description: Initializes with an empty room map
        * input / output: None / `void`
    * **createRoom** 
        * short description: Creates room, sets host, generates placeholder target positions, instantiates `GameManager`, sets initial game state from manager, stores room
        * input / output: `hostPlayer: Player`, `options: RoomOptions` / `Room`
    * **joinRoom** 
        * short description: Adds player to room, checks password, limits, existing player. Updates player object properties (`roomId`, `isHost`, `connected`, `lastConnected`)
        * input / output: `player: Player`, `roomId: string`, `password?: string` / `boolean`
    * **leaveRoom** 
        * short description: Removes player. Deletes room if empty. Assigns new host if host leaves. Resets player's `roomId`
        * input / output: `playerId: string`, `roomId: string` / `boolean`
    * **getRoomSummaries** 
        * short description: Returns array of summaries for all rooms. Reads status from `gameState.phase`
        * input / output: None / `RoomSummary[]`
    * **getRoom** 
        * short description: Retrieves full details of a room by ID
        * input / output: `roomId: string` / `Room | undefined`
    * **updatePlayerConnection** 
        * short description: Updates player's `connected` status and `lastConnected` time in a room. Logs warnings if room/player not found
        * input / output: `playerId: string`, `roomId: string`, `connected: boolean` / `void`
    * **cleanupInactiveRooms** 
        * short description: Removes rooms where all players are disconnected AND last activity is older than 30 minutes
        * input / output: None / `void`

**`server/src/server.ts`** 

* Short description: Main entry point for the Node.js WebSocket server (Socket.IO)
* **Event Handlers:**
    * connection: Logs connection, sets up listeners, emits initial room list
    * register: Creates player, stores session, emits 'registered'
    * createRoom: Uses `RoomManager`, joins socket, listens for 'gameStateUpdated' from GameManager instance, emits 'roomCreated', updates list
    * joinRoom: Uses `RoomManager`, joins socket, notifies room, emits 'roomJoined' (with full room data), emits 'gameStateUpdated' if game ongoing, updates list
    * leaveRoom: Uses `RoomManager`, leaves socket, notifies room, updates list
    * disconnect: Updates player connection status via `RoomManager`, notifies room, removes session
    * ping: Updates `lastConnected`, emits 'pong'
    * startGame: Verifies host, gets current players, calls `gameManager.startGame`, emits 'gameStarted'
    * drawCard: Verifies player/room, calls `gameManager.handleDrawCard`
    * declareMoves: Verifies player/room, calls `gameManager.declareMoves`
    * moveRobot: Handles robot movement data from clients and calls `GameManager.moveRobot`

**`src/components/GameBoard/BoardCell.tsx`** 

* **BoardCell** (Function Component - memoized) 
    * short description: Renders a single board cell with background, walls, target, and reflector
    * input / output: Props: `cell`, `x`, `y`, `size` / JSX div
    * **getWallClasses** 
        * short description: Determines CSS classes for cell walls
        * input / output: None / `string`
    * **getTargetClasses** 
        * short description: Determines CSS classes for target styling (color/gradient/animation). Handles vortex
        * input / output: None / `string`
    * **getReflectorClasses** 
        * short description: Determines CSS classes for reflector styling
        * input / output: None / `string`
    * **renderReflector** 
        * short description: Renders the reflector symbol ('／' or '＼') with layered text
        * input / output: None / JSX or `null`
    * **renderTargetSymbol** 
        * short description: Renders the target symbol, handles vortex animation
        * input / output: None / JSX or `null`

**`src/components/GameBoard/GameBoard.tsx`** 

* **GameBoard** (Function Component - memoized) 
    * short description: Renders the game board grid with cells and robots. Handles robot selection and move initiation (keyboard/click). Manages `isMoving` state
    * input / output: Props: `board`, `isPlayerTurn`, `onRobotMove` / JSX div
    * **handleKeyDown** 
        * short description: Handles arrow keys for robot movement
        * input / output: `e: React.KeyboardEvent` / `void`
    * **handleRobotMove** 
        * short description: Calculates path via `calculatePath`, calls `onRobotMove` prop, sets `isMoving`
        * input / output: `color` (RobotColor), `direction` (Direction) / `void`
    * **handleRobotClick** 
        * short description: Toggles robot selection state
        * input / output: `color` (RobotColor) / `void`

**`src/components/GameBoard/Robot.tsx`** 

* **DirectionArrow** (Function Component) 
    * short description: Renders a clickable arrow button for robot movement direction
    * input / output: `direction`, `onClick`, `position` / JSX button
* **Robot** (Function Component) 
    * short description: Renders a robot piece, handling position, color, selection, clicks, and displaying movement arrows
    * input / output: Props: `color`, `position`, `boardSize`, `isActive`, `isSelected`, `onMove`, `onClick`, `style` / JSX div
    * **getPositionStyle** 
        * short description: Calculates CSS style for robot position/size
        * input / output: None / `CSSProperties`
    * **getColorStyle** 
        * short description: Returns Tailwind CSS classes for robot color
        * input / output: None / `string`
    * **handleMove** 
        * short description: Calls `onMove` prop when an arrow is clicked
        * input / output: `direction` (Direction) / `void`

**`src/components/room/CreateRoomForm.tsx`** 

* **CreateRoomForm** (Function Component)
    * short description: Form for creating a game room (name, optional password). Uses `useGameStore`'s `createRoom` action. Handles validation, errors, loading state, and success callback. Disables submit until player is registered
    * input / output: Props: `onSuccess?: (room: Room) => void` 
    * **handleSubmit** 
        * short description: Validates input, calls `createRoom`, triggers `onSuccess`
        * input / output: `e: React.FormEvent` / `void`

**`src/components/room/RoomList.tsx`** 

* **RoomList** (Function Component)
    * short description: Displays a list of available game rooms, allows selection, password entry, and joining via `useGameStore`. Shows room status and lock icon. Handles errors and loading state
    * input / output: Props: `rooms: RoomSummary[]` / JSX
    * **handleJoinRoom** 
        * short description: Validates selection/password, calls `joinRoom` action (now void), manages isLoading state
        * input / output: `e: React.FormEvent` / `void`
    * **getStatusText** 
        * short description: Converts room status enum ('waiting', etc.) to Japanese text
        * input / output: `status: string` / `string`

**`src/components/DeclarationCard.tsx`** 

* **DeclarationCard** (Function Component) 
    * short description: Renders a single card for declaring moves, showing number and selection/disabled state
    * input / output: `number`, `isSelected`, `isDisabled`, `onClick` function / JSX button
* **ChevronLeft** (Function Component) 
    * short description: Renders a left chevron SVG icon
    * input / output: None / SVG JSX
* **ChevronRight** (Function Component) 
    * short description: Renders a right chevron SVG icon
    * input / output: None / SVG JSX
* **DeclarationCardList** (Function Component) 
    * short description: Renders a scrollable list of `DeclarationCard`s for move declaration, with navigation arrows. Handles null `selectedNumber`. Modified isDisabled logic
    * input / output: `selectedNumber: number | null`, `maxNumber`, `onSelect`, `isDisabled?`, `className` / JSX
    * **handlePrevClick** 
        * short description: Decrements start index for visible cards
        * input / output: None / `void`
    * **handleNextClick** 
        * short description: Increments start index for visible cards
        * input / output: None / `void`

**`src/components/GameInfo.tsx`** 

* **GameInfo** (Function Component) 
    * short description: Displays game info: player scores, move count, declaration, timer, current target card, remaining cards, and draw card button
    * input / output: Props: `scores`, `players`, `moveCount`, `declaredMoves`, `timer`, `isDeclarationPhase`, `currentCard`, `remainingCards`, `onDrawCard`, `phase` / JSX

**`src/components/GameResultDisplay.tsx`** 

* **GameResultDisplay** (Function Component)
    * short description: Displays game results (rankings, scores) when the game phase is 'finished'. Retrieves data from `useGameStore` and maps player names. Includes a leave room button
    * input / output: Props: `players: Player[]`, `onLeaveRoom: () => void` / JSX

**`src/hooks/useGameState.ts`** 

* **useGameState** (Custom Hook) 
    * short description: Manages single-player game state (board, card, phase, score, moves, declarations, timers) and provides interaction functions. Handles goal checks and animations
    * input / output: `mode` ('single' | 'multi') / `{ gameState, moveRobot, declareMoves, drawNextCard, remainingCards, totalCards }`
    * **declareMoves** 
        * short description: Updates declared moves and max declared moves state
        * input / output: `moves` (number) / `void`
    * **checkGoal** 
        * short description: Checks if the moved robot reached the current target. Includes debug logs
        * input / output: `robot` (Robot) / `boolean`
    * **drawNextCard** 
        * short description: Draws next card, updates state, transitions phase to 'declaration' or 'finished'
        * input / output: None / `Card | null`
    * **moveRobot** 
        * short description: Initiates robot move, calculates path, updates state (moves, history, score, phase), triggers animation
        * input / output: `robotColor` (RobotColor), `direction` (Direction) / `void`

**`src/pages/BoardTestPage.tsx`** 

* **BoardTestPage** (Function Component) 
    * short description: Development page to load, display, rotate, select, and combine board patterns using `BoardLoader`, `GameBoard`, and rotation utils. Validates boards on load
    * input / output: None / JSX.
    * **handleBoardSelect** 
        * short description: Updates state for the selected board in a quadrant
        * input / output: `position` (keyof typeof selectedBoards), `board` (BoardPattern) / `void`
    * **handleCreateComposite** 
        * short description: Creates a composite board from selected quadrants. Calls `createCompositeBoardPattern`. Updates `compositeBoard` state
        * input / output: None / `void`

**`src/pages/CreateRoomPage.tsx`** 

* **CreateRoomPage** (Function Component)
    * short description: Page for creating a new game room. Connects to the socket, registers player if needed, shows loading/error states, renders `CreateRoomForm`, and handles successful room creation by navigating to the game page
    * input / output: None / JSX.
    * **handleCreateSuccess** 
        * short description: Navigates to the game page using the created room's ID
        * input / output: `room: Room` / `void`

**`src/pages/GamePage.tsx`** 

* **GamePage** (Function Component)
    * short description: Main multiplayer game screen. Displays header, player list, game board, and game info/controls. Retrieves state from `useGameStore`. Handles game actions (start, declare, move, draw card, leave). Renders components conditionally. Manages board animation and scaling
    * input / output: None / JSX.
    * **handleStartGame** 
        * short description: Calls the `startGame` action from the store
        * input / output: None / `void`
    * **handleDeclareMoves** 
        * short description: Calls the `storeDeclareMoves` action from the store
        * input / output: `moves: number` / `void`
    * **handleRobotMove** 
        * short description: Calculates the robot's path using `calculatePath` and the `generatedBoard`, then calls the `storeMoveRobot` action with the path
        * input / output: `robotColor: RobotColor`, `direction: Direction` / `void`
    * **handleDrawCard** 
        * short description: Calls the `drawCard` action from the store
        * input / output: None / `void`
    * **handleLeaveRoom** 
        * short description: Calls the `leaveRoom` action from the store and navigates back
        * input / output: None / `void`
    * **getPhaseText** (Helper) 
        * short description: Converts `GamePhase` enum to Japanese display text
        * input / output: `phase: GamePhase` / `string`
    * **getTargetColorClass** (Helper) 
        * short description: Returns Tailwind CSS class string for target color display
        * input / output: `color: Card['color']` / `string`
    * **getBoardScale** (Helper) 
        * short description: Calculates board scaling factor based on container size
        * input / output: None / `number`.

**`src/pages/JoinRoomPage.tsx`** 

* **JoinRoomPage** (Function Component)
    * short description: Page for joining an existing room. Connects to the socket, registers the player if needed (checks `socketId`), displays available rooms via `RoomList`, and redirects on successful join. Handles connection errors and loading states
    * input / output: None / JSX

**`src/pages/OnlinePage.tsx`** 

* **OnlinePage** (Function Component)
    * short description: Renders buttons to navigate to "Create Room", "Join Room", or back to the title page
    * input / output: Takes no input, returns JSX elements. Uses `react-router-dom` for navigation

**`src/pages/SinglePlayerPage.tsx`** 

* **SinglePlayerPage** (Function Component) 
    * short description: Renders single-player UI: board, info panel, declaration list. Manages layout scaling. Uses `useGameState` hook
    * input / output: None / JSX
    * **getBoardScale** 
        * short description: Calculates board scaling factor based on window size
        * input / output: None / `number`

**`src/pages/TitlePage.tsx`** 

* **TitlePage** (Function Component) 
    * short description: Renders the title screen with buttons for Single Player, Online Play, and Board Test
    * input / output: None / JSX. Uses `react-router-dom`

**`src/services/socketService.ts`** 

* **SocketService (Class - Singleton)** 
    * **getInstance** (static public) 
        * short description: Provides singleton access
        * input / output: None / `SocketService` instance
    * **connect** 
        * short description: Establishes WebSocket connection, handles events, retries. Returns socket ID
        * input / output: None / `Promise<string>`
    * **disconnect** 
        * short description: Disconnects socket, clears reference
        * input / output: None / `void`
    * **emit** (private helper) 
        * short description: Helper to emit events if connected
        * input / output: `event`, `...args` / `void`
    * **registerPlayer** 
        * short description: Emits 'register' event
        * input / output: `name: string` / `void`
    * **createRoom** 
        * short description: Emits 'createRoom' event and returns Promise for the created room with timeout
        * input / output: `options: { name: string; password?: string }` / `Promise<Room>`
    * **joinRoom** 
        * short description: Emits 'joinRoom' event (now a void function)
        * input / output: `roomId: string`, `password?: string` / `void`
    * **leaveRoom** 
        * short description: Emits 'leaveRoom' event
        * input / output: `roomId: string` / `void`
    * **getAvailableRooms** 
        * short description: Emits 'getAvailableRooms' event
        * input / output: None / `void`
    * **startGame** 
        * short description: Emits 'startGame' event
        * input / output: `roomId: string` / `void`
    * **declareMoves** 
        * short description: Emits 'declareMoves' event. Includes `playerId`
        * input / output: `roomId: string`, `playerId: string`, `moves: number` / `void`
    * **moveRobot** 
        * short description: Emits 'moveRobot' event
        * input / output: `roomId: string`, `robotColor: RobotColor`, `path: Position[]` / `void`
    * **drawCard** 
        * short description: Emits the 'drawCard' event to the server. Includes `playerId`
        * input / output: `roomId: string`, `playerId: string` / `void`
    * **registerEventListener** (private helper) 
        * short description: Registers a callback for a server event, removing existing listener first
        * input / output: `event`, `callback` / `void`
    * **onRegistered / ... / onGameOver** 
        * short description: Methods to register callbacks for specific server events. `onRoomListUpdated` replaces `onAvailableRoomsUpdated`
        * input / output: `callback: (data: any) => void` / `void`
    * **removeAllListeners** 
        * short description: Removes all registered event listeners
        * input / output: None / `void`

**`src/stores/gameStore.ts`** 

* **useGameStore** (Zustand Hook/Store)
    * short description: Manages global client state (connection, player, room, game list, multiplayer game state, generatedBoard, socketId) using Zustand. Provides actions interacting with `SocketService`. Handles socket events to update state. Includes `isMultiplayerGameState` type guard
    * Actions:
        * connect: Connects via `SocketService`, stores socket ID, registers event listeners
        * disconnect: Disconnects via `SocketService`, resets state
        * registerPlayer: Calls `SocketService.registerPlayer`
        * createRoom: Calls `SocketService.createRoom` (async)
        * joinRoom: Calls `SocketService.joinRoom`
        * leaveRoom: Calls `SocketService.leaveRoom`
        * setConnectionError: Updates error state
        * startGame: Calls `SocketService.startGame`
        * declareMoves: Calls `SocketService.declareMoves`, checks connection
        * moveRobot: Calls `SocketService.moveRobot`
        * drawCard: Calls `SocketService.drawCard`
* **isMultiplayerGameState** (Type Guard Function) 
    * short description: Checks if a given state object conforms to the `MultiplayerGameState` interface
    * input / output: `state: any` / `boolean`.

**`src/utils/boardGenerator.ts`** 

* **createEmptyCell** 
    * short description: Creates a default, empty `Cell` object
    * input / output: None / `Cell`
* **getTargetSymbol** 
    * short description: Converts `TargetSymbol` enum to display character using `SYMBOL_MAP`
    * input / output: `symbol` (TargetSymbol) / `string`
* **createEmptyBoard** 
    * short description: Creates a `Board` object of given size, filled with empty cells
    * input / output: `size` (number) / `Board`
* **placeWalls** 
    * short description: Modifies board by setting wall properties based on `BoardPattern`, including adjacent cells
    * input / output: `board` (Board), `pattern` (BoardPattern) / `void`
* **placeReflectors** 
    * short description: Modifies board by adding reflector properties based on `BoardPattern`
    * input / output: `board` (Board), `pattern` (BoardPattern) / `void`
* **placeTargets** 
    * short description: Modifies board by setting target properties based on `BoardPattern`
    * input / output: `board` (Board), `pattern` (BoardPattern) / `void`
* **isCenterArea** 
    * short description: Checks if coordinates are in the central 2x2 area (16x16 assumed)
    * input / output: `x` (number), `y` (number) / `boolean`
* **getRandomEmptyPosition** 
    * short description: Finds a random valid starting position (empty, not target, not center)
    * input / output: `board` (Board), `occupiedPositions` (Position[]), `maxAttempts` (number) / `Position`
* **placeRobots** 
    * short description: Modifies board by adding robots at random valid positions
    * input / output: `board` (Board) / `void`
* **generateBoardFromPattern** 
    * short description: Creates a complete `Board` from a `BoardPattern` by placing walls, reflectors, targets, and robots
    * input / output: `pattern` (BoardPattern) / `Board`

**`src/utils/boardLoader.ts`** 

* **BoardLoader (Class - Singleton)** 
    * **constructor** (private) 
        * short description: Loads raw board data from JSON
        * input / output: None / `void`
    * **getInstance** (static public) 
        * short description: Singleton pattern implementation
        * input / output: None / `BoardLoader` instance
    * **getPatternKey** (private) 
        * short description: Generates JSON key string (e.g., 'boards\_A')
        * input / output: `pattern` (string) / `keyof RawBoardSet`
    * **getBoardSetByPattern** (public) 
        * short description: Retrieves, transforms (adds string ID), and validates boards for a pattern. Filters invalid boards
        * input / output: `pattern` (string) / `BoardPattern[]`
    * **getBoardById** (public) 
        * short description: Retrieves and validates a specific board by ID string. Expects format 'board\_XN'
        * input / output: `boardId` (string) / `BoardPattern | undefined`
    * **getRandomGameBoards** (public) 
        * short description: Selects one random board from each set (A, B, C, D)
        * input / output: None / `BoardPattern[]`
    * **debugPrintState** (public) 
        * short description: Logs loaded board data state for debugging
        * input / output: None / `void`
    * **validateAllBoards** (public) 
        * short description: Validates all loaded board patterns
        * input / output: None / `{ valid: boolean; errors: string[] }`

**`src/utils/boardRotation.ts`** 

* **rotateWallDirection** 
    * short description: Calculates new wall direction after board rotation
    * input / output: `direction` (WallDirection), `rotation` (number) / `WallDirection`
* **rotateReflectorDirection** 
    * short description: Calculates new reflector orientation after rotation (changes only for 90/270 deg)
    * input / output: `direction` (ReflectorDirection), `rotation` (number) / `ReflectorDirection`
* **rotatePosition** 
    * short description: Calculates new (x, y) coordinates after rotation
    * input / output: `x`, `y`, `size`, `rotation` (all number) / `[number, number]`
* **rotateBoard** 
    * short description: Rotates an entire `BoardPattern` (walls, reflectors, targets)
    * input / output: `board` (BoardPattern), `rotation` (number) / `BoardPattern`
* **createCompositeBoardPattern** 
    * short description: Combines four 8x8 `BoardPattern`s into one 16x16 pattern with rotations/transformations
    * input / output: `topLeft`, `topRight`, `bottomLeft`, `bottomRight` (all BoardPattern) / `BoardPattern`
    * **transformCoordinates** (Helper) 
        * short description: Converts 8x8 coordinates to 16x16 based on quadrant
        * input / output: `x`, `y`, `quadrant` / `[number, number]`
    * **transformElements** (Helper) 
        * short description: Applies coordinate transformation to an array of elements
        * input / output: `elements` array, `quadrant` / new array

**`src/utils/boardValidator.ts`** 

* **BoardValidator (Class)** 
    * **isValidPosition** (static private) 
        * short description: Checks if (x, y) coordinates are within board bounds
        * input / output: `x` (number), `y` (number), `size` (number) / `boolean`
    * **isValidTargetColor** (static private) 
        * short description: Checks if a target color is valid, considering vortex targets
        * input / output: `color` (TargetColor), `isVortex` (boolean) / `boolean`
    * **validateBoard** (static public) 
        * short description: Validates a single board pattern (size, walls, reflectors, targets). Logs warnings
        * input / output: `board` (BoardPattern | RawBoardPattern) / `boolean`
    * **validateBoardSet** (static public) 
        * short description: Validates an array of board patterns. Logs errors
        * input / output: `pattern` (string), `boards` (BoardPattern[] | RawBoardPattern[]) / `{ valid: boolean; errors: string[] }`

**`src/utils/cardGenerator.ts`** 

* **CardDeck (Class)** 
    * **constructor** 
        * short description: Initializes deck based on a `Board` object, generates cards, and shuffles
        * input / output: `board: Board` / `void`
    * **generateCards** (private) 
        * short description: Creates the initial card set (color/symbol combos + vortex)
        * input / output: None / `Omit<Card, 'position'>[]`.
    * **findTargetPosition** (private) 
        * short description: Locates the corresponding target cell on the board for a given card
        * input / output: `color: CardColor`, `symbol: TargetSymbol` / `Position | null`.
    * **shuffle** (private) 
        * short description: Randomizes card order using Fisher-Yates
        * input / output: None / `void`.
    * **drawNext** 
        * short description: Draws the next card, finds its position, returns it, or skips if position not found
        * input / output: None / `Card | null`.
    * **getRemaining** 
        * short description: Returns the number of cards left
        * input / output: None / `number`.
    * **getTotalCards** 
        * short description: Returns the initial total number of cards
        * input / output: None / `number`.

**`src/utils/constants.ts`** 

* Short description: Defines constant mappings and arrays: `SYMBOL_MAP` (symbol name to character), `SYMBOLS` (array of symbol names), `ROBOT_COLORS`

**`src/utils/robotMovement.ts`** 

* **calculateReflection** 
    * short description: Calculates new robot direction after hitting a reflector
    * input / output: `direction` (Direction), `reflectorDirection` ('／' | '＼') / `Direction`
* **getNextPosition** 
    * short description: Calculates the next grid position based on current position and direction
    * input / output: `position` (Position), `direction` (Direction) / `Position`
* **hasCollision** 
    * short description: Checks for collisions with boundaries, other robots, or walls
    * input / output: `board` (Board), `position` (Position), `nextPosition` (Position), `direction` (Direction) / `boolean`
* **calculatePath** 
    * short description: Calculates the full path a robot takes in a direction until an obstacle or reflection
    * input / output: `board` (Board), `robot` (Robot), `initialDirection` (Direction) / `Position[]`
* **calculateFinalPosition** 
    * short description: Calculates only the final stopping position of a robot's move
    * input / output: `board` (Board), `robot` (Robot), `direction` (Direction) / `Position`

**`src/App.tsx`** 

* **App** (Function Component) 
    * short description: Sets up application routing using `react-router-dom` for Title, Single Player, Online (Create/Join/Game), and Test pages
    * input / output: None / JSX (`Router`, `Routes`, `Route`)

**`src/main.tsx`** 

* Short description: Main entry point for the React application, rendering the root `App` component in StrictMode

**`vite.config.ts`** 

* Short description: Vite configuration file, using the `@vitejs/plugin-react` plugin

**Other Files (Brief Descriptions):**

* **`project_desc/definition.md`**: Defines objectives, requirements, UI, and phases for the multiplayer mode
* **`project_desc/requirements.md`**: Outlines overall game requirements, architecture, features, and phases
* **`project_desc/roadmap.md`**: Development roadmap for multiplayer mode with phases, tasks, milestones, and risks
* **`project_desc/repo/repository.txt`**: Merged codebase representation for AI consumption
* **`public/vite.svg`**: SVG logo file for Vite
* **`server/coverage/lcov-report/...`**: HTML, CSS, and JS files constituting the code coverage report
* **`server/coverage/coverage-final.json`**: Raw JSON code coverage data
* **`server/coverage/lcov.info`**: LCOV format code coverage data
* **`server/.env.development`**: Server development environment variables
* **`server/jest.config.js`**: Jest test configuration for the server
* **`server/package.json`**: Server Node.js project details and dependencies
* **`server/tsconfig.json`**: Server TypeScript configuration
* **`src/assets/boards.json`**: Board layout definitions
* **`src/assets/react.svg`**: SVG logo file for React
* **`src/types/board.ts`**: TypeScript types related to board patterns
* **`src/types/game.ts`**: Core TypeScript game types (client-side)
* **`src/types/player.ts`**: TypeScript types for players (client-side)
* **`src/types/room.ts`**: TypeScript types for rooms (client-side)
* **`src/types/socket.ts`**: TypeScript types for Socket.IO events
* **`src/index.css`**: Base and component styles using Tailwind CSS
* **`src/vite-env.d.ts`**: TypeScript declarations for Vite client environment
* **`.env.development`**: Frontend development environment variables (VITE\_SOCKET\_URL)
* **`.gitignore`**: Specifies files ignored by Git
* **`eslint.config.js`**: ESLint configuration file
* **`index.html`**: Main HTML entry point for the frontend application
* **`package.json`**: Frontend project metadata and dependencies
* **`postcss.config.js`**: PostCSS configuration file
* **`README.md`**: Project README file
* **`tailwind.config.js`**: Tailwind CSS configuration file
* **`tsconfig.app.json`**: TypeScript configuration specific to the application source code
* **`tsconfig.json`**: Root TypeScript configuration file referencing other configs
* **`tsconfig.node.json`**: TypeScript configuration for Node.js-specific files like Vite config
* **`server/src/types/game.ts`**: Defines server-side game types including Enums for `RobotColor`, `TargetSymbol`, `GamePhase` and interfaces for `Position`, `Card`, `Declaration`, `PlayerGameState`, `MultiplayerGameState`, `GameRules`, and `DEFAULT_GAME_RULES`
* **`server/src/types/player.ts`**: Defines server-side `Player` interface and `PlayerStatus` type
* **`server/src/types/room.ts`**: Defines server-side `Room`, `RoomSummary`, and `RoomOptions` interfaces
* **`server/src/utils/constants.ts`**: Defines server-side constants: `SYMBOL_MAP`, `SYMBOLS`, `ROBOT_COLORS`
* **`server/src/services/__tests__/gameManager.test.ts`**: Jest tests for `GameManager`
* **`server/src/services/__tests__/roomManager.test.ts`**: Jest tests for `RoomManager`
* **`project_desc/repo/add_to_repository.txt`**: Describes recent changes to files including GameManager, GamePage, GameInfo, etc., focusing on multiplayer logic, state handling, and animation


================================================================
End of Codebase
================================================================

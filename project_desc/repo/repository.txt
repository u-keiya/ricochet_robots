This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)

Additional Info:
----------------

================================================================
Directory Structure
================================================================
public/
  vite.svg
src/
  assets/
    boards.json
    react.svg
  components/
    GameBoard/
      BoardCell.tsx
      GameBoard.tsx
      Robot.tsx
    DeclarationCard.tsx
    GameInfo.tsx
  hooks/
    useGameState.ts
  pages/
    BoardTestPage.tsx
    CreateRoomPage.tsx
    GamePage.tsx
    JoinRoomPage.tsx
    OnlinePage.tsx
    SinglePlayerPage.tsx
    TitlePage.tsx
  types/
    board.ts
    game.ts
  utils/
    boardGenerator.ts
    boardLoader.ts
    boardRotation.ts
    boardValidator.ts
    cardGenerator.ts
    constants.ts
    robotMovement.ts
  App.tsx
  index.css
  main.tsx
  vite-env.d.ts
.env.development
.gitignore
eslint.config.js
index.html
online-implementation-plan.md
package.json
postcss.config.js
README.md
requirements.md
tailwind.config.js
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts

================================================================
Files
================================================================

### project_desc/definition.md

* Short description: Defines the objectives, system requirements (tech stack, functional, non-functional), UI, and development phases for the multiplayer mode of the Ricochet Robots game[cite: 17, 18].

### project_desc/requirements.md

* Short description: Outlines the requirements for the browser-based Ricochet Robots game, including system architecture, technology stack (React, TypeScript, Node.js, Socket.io), functional requirements (title screen, online play, game mechanics), extensibility considerations (CPU mode), and development phases[cite: 19].

### project_desc/roadmap.md

* Short description: Development roadmap for the multiplayer mode, outlining phases (Basic Implementation, Game Logic, UI/UX, Extra Features), weekly tasks, responsibilities, milestones, priorities, and risks[cite: 977, 978, 979, 980, 981, 982].

### project_desc/repo/repository.txt

* Short description: A merged representation of the entire codebase, generated by Repomix for AI consumption[cite: 541, 542, 543, 544, 545, 546, 547, 548, 549]. Includes file summary, usage guidelines, directory structure, and concatenated file contents[cite: 542, 544, 549].

### public/vite.svg

* Short description: This is an SVG file for the Vite logo[cite: 20, 551].

### server/coverage/lcov-report/base.css

* Short description: Provides base CSS styling for the LCOV code coverage report generated by Istanbul, including layout, typography, tables, and coverage indicators[cite: 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 757].

### server/coverage/lcov-report/block-navigation.js

* short description: JavaScript for the LCOV report enabling keyboard navigation ('n', 'j', 'b', 'p', 'k') between uncovered code blocks or low-coverage files[cite: 55, 56, 66, 759].
* init (IIFE)
    * short description: Initializes keyboard navigation, queries elements, sets up listeners, and returns the `jump` function[cite: 760, 761].
    * input / output: None / `jump` function[cite: 761].
* toggleClass (Inner function)
    * short description: Adds/removes the 'highlighted' class from coverage elements[cite: 57, 58, 762].
    * input / output: `index` (number) / `void`[cite: 57, 763].
* makeCurrent (Inner function)
    * short description: Highlights the element at the given index and scrolls it into view[cite: 59, 60, 764].
    * input / output: `index` (number) / `void`[cite: 59, 765].
* goToPrevious (Inner function)
    * short description: Calculates the index of the previous coverage element and jumps to it[cite: 61, 62, 63, 766].
    * input / output: None / `void`[cite: 61, 767].
* goToNext (Inner function)
    * short description: Calculates the index of the next coverage element and jumps to it[cite: 64, 65, 768].
    * input / output: None / `void`[cite: 64, 769].
* jump (Returned function)
    * short description: Handles keydown events, triggers navigation if appropriate keys are pressed and search input is not focused[cite: 66, 67, 68, 770].
    * input / output: `event` (KeyboardEvent) / `void`[cite: 66, 771].

### server/coverage/lcov-report/prettify.css

* Short description: CSS for syntax highlighting in the LCOV report using "prettify" conventions, defining colors for code elements[cite: 69, 775, 776].

### server/coverage/lcov-report/prettify.js

* Short description: Google Code Prettify library for syntax highlighting in the LCOV report, parsing code and applying CSS classes[cite: 69, 70, 71, 777, 778]. Includes language handlers for various code types[cite: 449, 450, 451].

### server/coverage/lcov-report/roomManager.ts.html

* Short description: HTML file showing the detailed code coverage report for the `server/src/services/roomManager.ts` file, highlighting covered/uncovered lines, statements, and branches[cite: 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 112, 113, 779, 780, 781].

### server/coverage/lcov-report/sorter.js

* Short description: JavaScript for the LCOV report adding sort functionality to coverage summary table columns and a search/filter box[cite: 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 782].

### server/coverage/lcov-report/services/gameManager.ts.html

* Short description: HTML code coverage report for `server/src/services/gameManager.ts`, showing line/branch/function coverage details[cite: 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 1001, 1062, 1063].

### server/coverage/lcov-report/services/index.html

* Short description: HTML index page for the code coverage report of the `services` directory, summarizing coverage statistics for files within it (e.g., `gameManager.ts`, `roomManager.ts`)[cite: 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072].

### server/coverage/lcov-report/services/roomManager.ts.html

* Short description: HTML code coverage report for `server/src/services/roomManager.ts`[cite: 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1126, 1127].

### server/coverage/lcov-report/types/game.ts.html

* Short description: HTML code coverage report for `server/src/types/game.ts`[cite: 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1148, 1149, 1150].

### server/coverage/lcov-report/types/index.html

* Short description: HTML index page for the code coverage report of the `types` directory, summarizing coverage for files within it (e.g., `game.ts`)[cite: 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159].

### server/coverage/coverage-final.json

* Short description: Raw, detailed code coverage data in JSON format generated by Istanbul, used by reporters like LCOV[cite: 785, 786, 1160]. Contains metrics for `gameManager.ts`, `roomManager.ts`, and `types/game.ts`[cite: 1160].

### server/coverage/lcov.info

* Short description: Code coverage data in LCOV text format, suitable for reporting tools like Coveralls or Codecov[cite: 787, 788, 1160].

### server/.env.development

* Short description: Environment variables for the server's development environment, setting `PORT`, `HOST`, `NODE_ENV`, and `CORS_ORIGIN`[cite: 155, 819, 820].

### server/jest.config.js

* Short description: Configuration file for Jest testing framework, specifying preset (`ts-jest`), environment (`node`), test file locations, and code coverage settings[cite: 155, 821, 822].

### server/package.json

* Short description: Node.js server project metadata, scripts, dependencies (`dotenv`, `express`, `socket.io`, `uuid`, `winston`), and devDependencies[cite: 261, 823].

### server/tsconfig.json

* Short description: TypeScript configuration for the server project, setting compiler options (target, module, directories, strict checking, source maps) and including/excluding files[cite: 156, 824, 825, 826].

### server/src/services/cardDeck.ts

* CardDeck (Class)
    * short description: Manages the deck of target cards for the game[cite: 537, 1776].
    * constructor
        * short description: Initializes the card deck using a map of target positions. Generates and shuffles cards[cite: 538, 539, 1776, 1777].
        * input / output: Input: `targetPositions: Map<string, Position>` / Output: void[cite: 538, 1777].
    * generateCards (private)
        * short description: Generates the initial set of server-side cards (normal + vortex), ensuring target positions exist[cite: 539, 540, 541, 542, 543, 544, 545, 1777, 1778].
        * input / output: Input: None / Output: `ServerCard[]`[cite: 539, 1778].
    * getTargetPosition (private)
        * short description: Retrieves the board position for a given card's symbol and color (or null for vortex)[cite: 546, 547, 548, 1778, 1779].
        * input / output: Input: `color: RobotColor | null`, `symbol: TargetSymbol` / Output: `Position | null`[cite: 546, 1779, 1780].
    * shuffle (private)
        * short description: Randomizes the order of cards in the deck using Fisher-Yates algorithm[cite: 549, 550, 1780, 1781].
        * input / output: Input: None / Output: void[cite: 549, 1781].
    * drawNext
        * short description: Draws the next card from the deck, finds its position, and returns it. Skips cards if target position is not found[cite: 551, 552, 553, 554, 555, 556, 1781, 1782].
        * input / output: Input: None / Output: `Card | null`[cite: 551, 1782, 1783].
    * getRemaining
        * short description: Returns the number of cards remaining in the deck[cite: 556, 1783, 1784].
        * input / output: Input: None / Output: number[cite: 556, 1784].
    * getTotalCards
        * short description: Returns the total number of cards initially generated for the deck[cite: 557, 1784, 1785].
        * input / output: Input: None / Output: number[cite: 557, 1785].

### server/src/services/gameManager.ts

* GameManager (Class)
    * short description: Manages the state and logic of a multiplayer Ricochet Robots game instance, extends EventEmitter[cite: 868, 1611, 1426]. Uses `Record` internally for state properties[cite: 969, 972].
    * constructor
        * short description: Initializes game with players, board pattern IDs, target positions, and rules. Creates `CardDeck`. Sets initial game state[cite: 868, 869, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1427, 1428, 1429, 1430, 1431, 1440, 1788, 1789].
        * input / output: `players: Player[]`, `boardPatternIds: string[]`, `targetPositions: TargetPositions`, `rules: GameRules` / `void`[cite: 1613, 1440, 1789].
    * startGame
        * short description: Starts the game if phase is WAITING and players >= 2. Sets initial robot positions and phase to WAITING. Emits update[cite: 870, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 1432, 1433, 1434, 1435].
        * input / output: `players: Player[]` / `void`[cite: 870, 1620, 1423, 1435]. Throws if conditions not met[cite: 871, 1621, 1622, 1432, 1433].
    * handleDrawCard
        * short description: Handles a request to draw the first card if in WAITING phase. Draws card, updates state, and starts declaration phase[cite: 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643].
        * input / output: `playerId: string` / `void`[cite: 1636].
    * declareMoves
        * short description: Handles player move declarations during the DECLARATION phase. Emits update[cite: 872, 1643, 1644, 1645, 1646, 1647, 1443, 1444, 1445, 1446].
        * input / output: `playerId: string`, `moves: number` / `void`[cite: 872, 1643]. Throws if invalid phase or moves[cite: 873, 1643, 1644, 1443, 1444].
    * moveRobot
        * short description: Handles robot movement attempts during the  PLAYING phase. Records move, checks goal, emits update[cite: 873, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1456, 1457, 1458, 1459, 1460, 1461]. Checks for goal achievement[cite: 1461, 1462].
        * input / output: `playerId: string`, `robotColor: RobotColor`, `positions: Position[]` / `void`[cite: 873, 874, 1659]. Throws if invalid phase/turn/moves[cite: 1456, 1457, 1459].
    * getGameState
        * short description: Returns a deep copy (via JSON stringify/parse) of the current game state[cite: 874, 968, 969, 1688, 1689, 1485].
        * input / output: None / `MultiplayerGameState`[cite: 875, 969, 1688].
    * endDeclarationPhase (private)
        * short description: Sorts declarations, sets `declarationOrder`, sets `currentPlayer`, and starts the solution phase or proceeds to the next round. Emits update[cite: 892, 893, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1447, 1448, 1449, 1450, 1451, 1452].
        * input / output: None / `void`[cite: 893, 894, 1648].
    * failCurrentSolution (private)
        * short description: Removes current player from `declarationOrder`, moves to the next player or next round. Emits update[cite: 894, 895, 896, 908, 909, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1468, 1469, 1470, 1471, 1472, 1473, 1474]. No penalty points[cite: 909].
        * input / output: None / `void`[cite: 896, 909, 1671].
    * successCurrentSolution (private)
        * short description: Awards points to the current player, proceeds to the next round. Emits update[cite: 905, 1666, 1667, 1668, 1669, 1670, 1671, 1463, 1464, 1465, 1466, 1467, 1468].
        * input / output: None / `void`[cite: 906, 1666].
    * proceedToNextRound (private, renamed from `drawNextCard`)
        * short description: Draws the next card using `CardDeck`, resets round state, starts declaration phase or ends game[cite: 910, 911, 1678, 1679, 1680, 1681, 1682, 1474, 1475, 1476, 1477, 1478].
        * input / output: None / `void`[cite: 911, 912, 1678].
    * endGame (private)
        * short description: Sets phase to FINISHED, calculates rankings, emits update, and cleans up timers[cite: 912, 913, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1479, 1480, 1481, 1482, 1483, 1484].
        * input / output: None / `void`[cite: 913, 1682].
    * cleanup (public)
        * short description: Clears any active timer interval[cite: 1486, 1690, 1691].
        * input / output: None / `void`[cite: 1690].
    * checkGoal (private)
        * short description: Checks if the current robot positions match the target card (placeholder, always returns false)[cite: 1462, 1665].
        * input / output: None / `boolean`[cite: 1665].

### server/src/services/__tests__/gameManager.test.ts

* Short description: Jest tests for `GameManager` covering initialization, declaration phase (valid/invalid declarations, sorting, timeouts), solution phase (turn transitions on failure), game end conditions (running out of cards), timer management, and score management (no penalties)[cite: 875, 876, 1371, 1372, 1373, 1374, 1375, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425].
* simulateFailedRound (Helper function)
    * short description: Helper test function to advance timers simulating a full round where all declaring players fail their solution attempts[cite: 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1281].
    * input / output: `manager: GameManager`, `players: Player[]`, `rules: GameRules` / `void`[cite: 1375].

### server/src/services/roomManager.ts

* RoomManager (Class) [cite: 378, 592, 923, 1066]
    * constructor
        * short description: Initializes with an empty room map[cite: 380, 381, 593, 1067].
        * input / output: None / `void`[cite: 792, 1067].
    * createRoom
        * short description: Creates room, sets host, generates placeholder target positions, instantiates `GameManager`, sets up 'gameStateUpdated' listener, stores room, stores initial game state[cite: 381, 382, 383, 384, 385, 386, 387, 594, 595, 596, 597, 792, 962, 963, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1437, 1441, 1791, 1792].
        * input / output: `hostPlayer: Player`, `options: RoomOptions` / `Room`[cite: 381, 594, 793, 1068, 1792].
    * joinRoom
        * short description: Adds player to room, checks password, limits, existing player. Updates player object properties[cite: 388, 389, 390, 391, 392, 393, 598, 599, 600, 601, 602, 603, 794, 921, 924, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1217, 1218, 1425].
        * input / output: `player: Player`, `roomId: string`, `password?: string` / `boolean`[cite: 388, 925, 795, 1078]. Throws errors[cite: 795, 1079, 1080, 1081, 1082, 1083].
    * leaveRoom
        * short description: Removes player. Deletes room if empty. Assigns new host if host leaves. Resets player's `roomId`[cite: 396, 397, 398, 399, 400, 401, 402, 403, 604, 605, 606, 607, 608, 796, 797, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1219, 1220, 1221].
        * input / output: `playerId: string`, `roomId: string` / `boolean`[cite: 396, 604, 798, 1086]. Throws errors[cite: 798, 1087, 1088, 1089].
    * getRoomSummaries
        * short description: Returns array of summaries for all rooms. Reads status from `gameState.phase`[cite: 404, 609, 799, 1094, 1095, 1222, 1223].
        * input / output: None / `RoomSummary[]`[cite: 404, 800, 1094].
    * getRoom
        * short description: Retrieves full details of a room by ID[cite: 405, 610, 800, 1095, 1224].
        * input / output: `roomId: string` / `Room | undefined`[cite: 405, 801, 1095].
    * updatePlayerConnection
        * short description: Updates player's `connected` status and `lastConnected` time in a room. Logs warnings if room/player not found[cite: 406, 407, 408, 409, 410, 411, 412, 413, 611, 612, 613, 614, 802, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1226, 1227].
        * input / output: `playerId: string`, `roomId: string`, `connected: boolean` / `void`[cite: 406, 803, 804, 1096].
    * cleanupInactiveRooms
        * short description: Removes rooms where all players are disconnected and last activity is old[cite: 414, 415, 416, 615, 616, 617, 805, 1103, 1104, 1105, 1106, 1228].
        * input / output: None / `void`[cite: 806, 1103].

### server/src/server.ts

* Short description: Main entry point for the Node.js WebSocket server (Socket.IO)[cite: 403, 404, 808, 1502]. Sets up Express, Socket.IO, RoomManager, session tracking (using Player objects), logging (Winston), and event handlers[cite: 405, 406, 407, 408, 409, 410, 809, 810, 811, 1505, 1506, 1507, 1508, 1509, 1510, 1511, 1529, 1547, 1548, 1549]. Emits initial room list[cite: 950, 951, 1511]. Includes intervals for connection checks and inactive room cleanup[cite: 1509, 1510].
* Event Handlers:
    * connection: Logs connection, sets up listeners, emits initial room list[cite: 410, 812, 950, 951, 1510, 1511].
    * register: Creates player, stores session, emits 'registered'[cite: 411, 813, 917, 1511]. Retrieves Player from session map[cite: 918, 1511].
    * createRoom: Uses `RoomManager`, joins socket, listens for 'gameStateUpdated' from GameManager instance, emits 'roomCreated', updates list[cite: 414, 415, 814, 918, 919, 920, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1437]. Retrieves Player from session map[cite: 918, 1513].
    * joinRoom: Uses `RoomManager`, joins socket, notifies room, emits 'roomJoined' (with full room data), emits 'gameStateUpdated' if game ongoing, updates list[cite: 417, 418, 815, 921, 922, 923, 1521, 1522, 1523, 1524, 1525, 1526, 1432, 1433]. Retrieves Player from session map[cite: 921, 1521].
    * leaveRoom: Uses `RoomManager`, leaves socket, notifies room, updates list[cite: 419, 816, 1527, 1528].
    * disconnect: Updates player connection status via `RoomManager`, notifies room, removes session[cite: 420, 421, 817, 1529, 1530, 1531, 1532].
    * ping: Updates `lastConnected`, emits 'pong'[cite: 422, 818, 1532].
    * startGame: Verifies host, gets current players, calls `gameManager.startGame`, emits 'gameStarted'[cite: 965, 966, 967, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1540, 1424].
    * drawCard: Verifies player/room, calls `gameManager.handleDrawCard`[cite: 1540, 1541, 1542, 1543].
    * declareMoves: Verifies player/room, calls `gameManager.declareMoves`[cite: 1544, 1545, 1546].

### server/src/types/game.ts

* Short description: Defines TypeScript types for server-side multiplayer game state: `GamePhase`, `Position`, `RobotColor`, `TargetSymbol`, `Card` (color nullable), `Declaration`, `PlayerGameState`, `MultiplayerGameState` (using `Record` instead of `Map`, added `boardPatternIds`), `GameRules`, `DEFAULT_GAME_RULES`[cite: 867, 868, 869, 870, 871, 872, 891, 892, 902, 903, 904, 905, 970, 971, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1449, 1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459, 1460, 1785, 1787, 1438]. Color property in Card is nullable[cite: 1785]. TargetSymbol enum added[cite: 1787]. boardPatternIds added to MultiplayerGameState[cite: 1438].

### server/src/types/player.ts

* Short description: Defines TypeScript interfaces for server-side players: `Player` (including `lastConnected`) and `PlayerStatus`[cite: 253, 254, 806, 916, 917, 1175].

### server/src/types/room.ts

* Short description: Defines TypeScript interfaces for server-side rooms: `Room` (including `gameManager`, gameState nullable), `RoomSummary` (using `GamePhase`), and `RoomOptions`[cite: 255, 256, 257, 258, 259, 260, 807, 958, 959, 960, 961, 1176]. `GameState` and `GameStatus` are removed[cite: 960]. gameState is nullable[cite: 959].

### server/src/utils/constants.ts

* Short description: Defines server-side constants: `SYMBOL_MAP` (using TargetSymbol enum), `SYMBOLS` array, `ROBOT_COLORS` array[cite: 535, 558, 559, 560, 1773, 1774, 1775].

### src/App.tsx

* App (Function Component) [cite: 539, 647]
    * short description: Sets up application routing using `react-router-dom` for Title, Single Player, Online (Create/Join/Game), and Test pages[cite: 536, 537, 538, 539, 540, 541, 647, 648, 1250].
    * input / output: None / JSX (`Router`, `Routes`, `Route`)[cite: 539, 649, 1251].

### src/assets/boards.json

* Short description: JSON file defining board patterns (A, B, C, D) including size, walls, reflectors, and targets (colors, symbols, vortex)[cite: 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 650, 651, 652, 1229, 1230].

### src/assets/react.svg

* Short description: This is an SVG file for the React logo[cite: 157, 158, 159, 160, 551, 1137].

### src/components/DeclarationCard.tsx

* DeclarationCard (Function Component) [cite: 505, 613, 1235]
    * short description: Renders a single card for declaring moves, showing number and selection/disabled state[cite: 505, 506, 613, 614, 1235].
    * input / output: `number`, `isSelected`, `isDisabled`, `onClick` function / JSX button[cite: 504, 505, 614, 615, 1236].
* ChevronLeft (Function Component) [cite: 507, 615, 1237]
    * short description: Renders a left chevron SVG icon[cite: 507, 615, 1237].
    * input / output: None / SVG JSX[cite: 507, 616, 1238].
* ChevronRight (Function Component) [cite: 508, 617, 1239]
    * short description: Renders a right chevron SVG icon[cite: 508, 617, 1239].
    * input / output: None / SVG JSX[cite: 508, 618, 1240].
* DeclarationCardList (Function Component) [cite: 509, 510, 619, 883, 1241]
    * short description: Renders a scrollable list of `DeclarationCard`s for move declaration, with navigation arrows. Handles null `selectedNumber`[cite: 509, 513, 514, 515, 517, 518, 519, 619, 620, 882, 1241, 1242]. Modified isDisabled logic[cite: 1796, 1797].
    * handlePrevClick
        * short description: Decrements start index for visible cards[cite: 511, 514, 621, 1242].
        * input / output: None / `void`[cite: 511, 621, 1243].
    * handleNextClick
        * short description: Increments start index for visible cards[cite: 512, 518, 622, 1243].
        * input / output: None / `void`[cite: 512, 623, 1244].
    * input / output: `selectedNumber: number | null`, `maxNumber`, `onSelect`, `isDisabled?`, `className` / JSX[cite: 509, 510, 624, 885, 1244, 1245, 1798].

### src/components/GameBoard/BoardCell.tsx

* BoardCell (Function Component - memoized) [cite: 398, 701, 1487, 1488, 1502, 1318]
    * short description: Renders a single board cell with background, walls, target, and reflector[cite: 701, 1488, 1491, 1493, 1496, 1500, 1501, 1318].
    * getWallClasses
        * short description: Determines CSS classes for cell walls[cite: 702, 1488, 1489, 1319].
        * input / output: None / `string`[cite: 703, 1320].
    * getTargetClasses
        * short description: Determines CSS classes for target styling (color/gradient/animation). Handles vortex[cite: 704, 1489, 1490, 1491, 1320, 1321].
        * input / output: None / `string`[cite: 705, 1321].
    * getReflectorClasses
        * short description: Determines CSS classes for reflector styling[cite: 706, 1491, 1492, 1493, 1322].
        * input / output: None / `string`[cite: 707, 1323].
    * renderReflector
        * short description: Renders the reflector symbol ('／' or '＼') with layered text[cite: 708, 1493, 1494, 1495, 1323].
        * input / output: None / JSX or `null`[cite: 709, 1324].
    * renderTargetSymbol
        * short description: Renders the target symbol, handles vortex animation[cite: 710, 1496, 1497, 1498, 1499, 1500, 1325].
        * input / output: None / JSX or `null`[cite: 711, 1326].
    * input / output: Props: `cell`, `x`, `y`, `size` / JSX div[cite: 712, 1487, 1327].

### src/components/GameBoard/GameBoard.tsx

* GameBoard (Function Component - memoized) [cite: 415, 713, 1504, 1505, 1519, 1328]
    * short description: Renders the game board grid with cells and robots. Handles robot selection and move initiation (keyboard/click). Manages `isMoving` state[cite: 713, 714, 1502, 1503, 1504, 1505, 1512, 1513, 1514, 1515, 1516, 1518, 1328, 1329, 1330].
    * handleKeyDown
        * short description: Handles arrow keys for robot movement[cite: 715, 1505, 1506, 1330].
        * input / output: `e: React.KeyboardEvent` / `void`[cite: 716, 1331]. Calls `handleRobotMove`[cite: 1506, 716, 1331].
    * handleRobotMove
        * short description: Calculates path via `calculatePath`, calls `onRobotMove` prop, sets `isMoving`[cite: 717, 718, 1506, 1507, 1508, 1509, 1332].
        * input / output: `color` (RobotColor), `direction` (Direction) / `void`[cite: 718, 1506, 1333]. Calls `calculatePath`, `onRobotMove`[cite: 719, 1508, 1333].
    * handleRobotClick
        * short description: Toggles robot selection state[cite: 719, 1510, 1511, 1334].
        * input / output: `color` (RobotColor) / `void`[cite: 720, 1335]. Updates `selectedRobot` state[cite: 720, 1505, 1335].
    * input / output: Props: `board`, `isPlayerTurn`, `onRobotMove` / JSX div[cite: 721, 1504, 1336].

### src/components/GameBoard/Robot.tsx

* DirectionArrow (Function Component) [cite: 304, 653, 1282]
    * short description: Renders a clickable arrow button for robot movement direction[cite: 653, 1175, 1176, 1177, 1178, 1282].
    * input / output: `direction`, `onClick`, `position` / JSX button[cite: 654, 1174, 655, 1283].
* Robot (Function Component) [cite: 308, 655, 1284]
    * short description: Renders a robot piece, handling position, color, selection, clicks, and displaying movement arrows[cite: 655, 1171, 1172, 1173, 1178, 1184, 1185, 1186, 1187, 1284].
    * getPositionStyle
        * short description: Calculates CSS style for robot position/size[cite: 656, 1178, 1179, 1180, 1285].
        * input / output: None / `CSSProperties`[cite: 657, 1286].
    * getColorStyle
        * short description: Returns Tailwind CSS classes for robot color[cite: 658, 1181, 1182, 1286].
        * input / output: None / `string`[cite: 659, 1287].
    * handleMove
        * short description: Calls `onMove` prop when an arrow is clicked[cite: 660, 1182, 1183, 1287].
        * input / output: `direction` (Direction) / `void`[cite: 661, 1288].
    * input / output: Props: `color`, `position`, `boardSize`, `isActive`, `isSelected`, `onMove`, `onClick`, `style` / JSX div[cite: 662, 1172, 1178, 663, 1288].

### src/components/GameInfo.tsx

* GameInfo (Function Component) [cite: 262, 590, 1178]
    * short description: Displays game info: score, move count, declaration, timer, current target card, remaining cards, and draw card button[cite: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 590, 591, 1178].
    * input / output: Props: `score`, `moveCount`, `declaredMoves`, `timer`, `isDeclarationPhase`, `currentCard`, `remainingCards`, `onDrawCard`, `phase` / JSX[cite: 262, 263, 264, 592, 593, 1179].

### src/components/GameResultDisplay.tsx

* GameResultDisplay (Function Component)
    * short description: Displays game results (rankings, scores) when the game phase is 'finished'[cite: 187, 188, 189, 191, 914, 1144]. Retrieves data from `useGameStore` and maps player names[cite: 188, 190, 915]. Includes a leave room button[cite: 193, 1145].
    * input / output: Props: `players: Player[]`, `onLeaveRoom: () => void` / JSX[cite: 187, 188, 915, 916, 1146].

### src/components/room/CreateRoomForm.tsx

* CreateRoomForm (Function Component)
    * short description: Form for creating a game room (name, optional password). Uses `useGameStore`'s `createRoom` action. Handles validation, errors, loading state, and success callback. Disables submit until player is registered[cite: 486, 487, 497, 498, 499, 827, 489, 493, 828, 488, 489, 491, 492, 493, 494, 495, 496, 500, 829, 830, 501, 502, 503, 935, 936, 1230, 1231, 1232].
    * handleSubmit
        * short description: Validates input, calls `createRoom`, triggers `onSuccess`[cite: 490, 492, 493, 494, 831, 1233].
        * input / output: `e: React.FormEvent` / `void`[cite: 490, 832, 1234].

### src/components/room/RoomList.tsx

* RoomList (Function Component)
    * short description: Displays a list of available game rooms, allows selection, password entry, and joining via `useGameStore`. Shows room status and lock icon. Handles errors and loading state[cite: 161, 162, 164, 172, 173, 832, 833, 834, 835, 175, 176, 177, 180, 184, 836, 1138, 1429, 1430].
    * handleJoinRoom
        * short description: Validates selection/password, calls `joinRoom` action (now void), manages isLoading state[cite: 164, 165, 166, 837, 1430, 1431].
        * input / output: `e: React.FormEvent` / `void`[cite: 164, 838, 1431].
    * getStatusText
        * short description: Converts room status enum ('waiting', etc.) to Japanese text[cite: 167, 168, 169, 170, 171, 839, 1142].
        * input / output: `status: string` / `string`[cite: 167, 840, 1143].

### src/hooks/useGameState.ts

* useGameState (Custom Hook) [cite: 474, 743, 1718, 1354]
    * short description: Manages single-player game state (board, card, phase, score, moves, declarations, timers) and provides interaction functions. Handles goal checks and animations[cite: 743, 744, 745, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1753, 745, 1729, 1731, 1354, 1355].
    * declareMoves
        * short description: Updates declared moves and max declared moves state[cite: 489, 491, 746, 747, 1736, 1737, 1738, 1739, 1355].
        * input / output: `moves` (number) / `void`[cite: 747, 1356].
    * checkGoal
        * short description: Checks if the moved robot reached the current target. Includes debug logs[cite: 492, 495, 748, 1739, 1740, 1741, 1742, 1356, 1357].
        * input / output: `robot` (Robot) / `boolean`[cite: 749, 1357].
    * drawNextCard
        * short description: Draws next card, updates state, transitions phase to 'declaration' or 'finished'[cite: 495, 496, 497, 750, 751, 1742, 1743, 1744, 1745, 1358].
        * input / output: None / `Card | null`[cite: 751, 752, 1359].
    * moveRobot
        * short description: Initiates robot move, calculates path, updates state (moves, history, score, phase), triggers animation[cite: 498, 499, 500, 501, 502, 752, 753, 754, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1360].
        * input / output: `robotColor` (RobotColor), `direction` (Direction) / `void`[cite: 754, 1745, 1361]. Updates `gameState`, `movingRobot`[cite: 755, 1361].
    * input / output: `mode` ('single' | 'multi') / `{ gameState, moveRobot, declareMoves, drawNextCard, remainingCards, totalCards }`[cite: 755, 756, 1362].

### src/index.css

* Short description: Defines base, component (e.g., `.btn`), and utility styles using Tailwind CSS directives[cite: 239, 240, 241, 242, 243, 570, 1162].

### src/main.tsx

* Short description: Main entry point for the React application, rendering the root `App` component[cite: 243, 571, 572, 1163].

### src/pages/BoardTestPage.tsx

* BoardTestPage (Function Component) [cite: 328, 625, 1195]
    * short description: Development page to load, display, rotate, select, and combine board patterns using `BoardLoader`, `GameBoard`, and rotation utils. Validates boards on load[cite: 326, 327, 328, 329, 330, 331, 332, 336, 339, 340, 348, 349, 350, 351, 352, 353, 625, 626, 331, 338, 626, 1195, 1196].
    * handleBoardSelect
        * short description: Updates state for the selected board in a quadrant[cite: 333, 343, 627, 1196].
        * input / output: `position` (keyof typeof selectedBoards), `board` (BoardPattern) / `void`[cite: 333, 628, 1197].
    * handleCreateComposite
        * short description: Creates a composite board from selected quadrants. Calls `createCompositeBoardPattern`. Updates `compositeBoard` state[cite: 334, 335, 336, 347, 629, 335, 630, 330, 336, 630, 1198, 1199].
        * input / output: None / `void`[cite: 334, 630, 1199].

### src/pages/CreateRoomPage.tsx

* CreateRoomPage (Function Component)
    * short description: Page for creating a new game room. Connects to the socket, registers player if needed, shows loading/error states, renders `CreateRoomForm`, and handles successful room creation by navigating to the game page[cite: 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954].
    * handleCreateSuccess
        * short description: Navigates to the game page using the created room's ID[cite: 945, 946, 947]. Logs errors if room data is invalid[cite: 948].
        * input / output: `room: Room` / `void`[cite: 945].

### src/pages/GamePage.tsx

* GamePage (Function Component)
    * short description: Main multiplayer game screen. Displays header (room name, leave button), player list, game board, and game info/controls panel. Retrieves state from `useGameStore` (`game`, `generatedBoard`, `currentPlayer`, etc.). Handles game actions (start, declare, move, draw card, leave). Renders `GameBoard`, `DeclarationCardList`, `GameResultDisplay` conditionally based on game phase. Shows connection/loading states[cite: 1549, 1550, 1551, 1552, 1559, 1560, 1561, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1588, 1592, 1596, 1600, 1604, 1605, 1606, 1446, 1447, 1799, 1800, 1801].
    * handleStartGame
        * short description: Calls the `startGame` action from the store[cite: 1561].
        * input / output: None / `void`[cite: 1561].
    * handleDeclareMoves
        * short description: Calls the `storeDeclareMoves` action from the store[cite: 1562].
        * input / output: `moves: number` / `void`[cite: 1562].
    * handleRobotMove
        * short description: Calculates the robot's path using `calculatePath` and the `generatedBoard`, then calls the `storeMoveRobot` action with the path[cite: 1563, 1564, 1565, 1566, 1567, 1568, 1448].
        * input / output: `robotColor: RobotColor`, `direction: Direction` / `void`[cite: 1563].
    * handleDrawCard
        * short description: Calls the `drawCard` action from the store[cite: 1568, 1795].
        * input / output: None / `void`[cite: 1568].
    * handleLeaveRoom
        * short description: Calls the `leaveRoom` action from the store and navigates back[cite: 1569].
        * input / output: None / `void`[cite: 1569].
    * getPhaseText (Helper)
        * short description: Converts `GamePhase` enum to Japanese display text[cite: 1553].
        * input / output: `phase: GamePhase` / `string`[cite: 1553].
    * getTargetColorClass (Helper)
        * short description: Returns Tailwind CSS class string for target color display[cite: 1555].
        * input / output: `color: Card['color']` / `string`[cite: 1555].

### src/pages/JoinRoomPage.tsx

* JoinRoomPage (Function Component)
    * short description: Page for joining an existing room. Connects to the socket, registers the player if needed (checks `socketId`), displays available rooms via `RoomList`, and redirects on successful join. Handles connection errors and loading states[cite: 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 945, 946, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 1246, 1428, 1429].
    * input / output: None / JSX[cite: 746].

### src/pages/OnlinePage.tsx

* OnlinePage (Function Component)
    * short description: Renders buttons to navigate to "Create Room", "Join Room", or back to the title page[cite: 195, 196, 197, 198, 558, 1147].
    * input / output: Takes no input, returns JSX elements. Uses `react-router-dom` for navigation[cite: 195, 559, 1148].

### src/pages/SinglePlayerPage.tsx

* SinglePlayerPage (Function Component) [cite: 362, 680, 1302]
    * short description: Renders single-player UI: board, info panel, declaration list. Manages layout scaling. Uses `useGameState` hook[cite: 680, 681, 1334, 1335, 1336, 1343, 1347, 1348, 1350, 681, 1336, 1339, 1342, 684, 1338, 1302, 1303].
    * getBoardScale
        * short description: Calculates board scaling factor based on window size[cite: 682, 1339, 1340, 1341, 1342, 1304].
        * input / output: None / `number`[cite: 683, 1305].
    * input / output: None / JSX[cite: 684, 1305].

### src/pages/TitlePage.tsx

* TitlePage (Function Component) [cite: 532, 631, 1248]
    * short description: Renders the title screen with buttons for Single Player, Online Play, and Board Test[cite: 533, 534, 535, 536, 631, 1248].
    * input / output: None / JSX. Uses `react-router-dom`[cite: 532, 632, 1249].

### src/services/socketService.ts

* SocketService (Class - Singleton) [cite: 495, 843, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1560, 1392]
    * getInstance (static public)
        * short description: Provides singleton access[cite: 497, 844, 1525, 1392].
        * input / output: None / `SocketService` instance[cite: 844, 1393].
    * connect
        * short description: Establishes WebSocket connection, handles events, retries. Returns socket ID[cite: 498, 499, 845, 846, 847, 937, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1393, 1394].
        * input / output: None / `Promise<string>`[cite: 847, 938, 1395].
    * disconnect
        * short description: Disconnects socket, clears reference[cite: 500, 501, 848, 1531, 1532, 1395].
        * input / output: None / `void`[cite: 849, 1396].
    * emit (private helper)
        * short description: Helper to emit events if connected[cite: 1532, 1533, 1534, 1396].
        * input / output: `event`, `...args` / `void`[cite: 1397].
    * registerPlayer
        * short description: Emits 'register' event[cite: 502, 849, 1534, 1535, 1397].
        * input / output: `name: string` / `void`[cite: 850, 1398].
    * createRoom
        * short description: Emits 'createRoom' event and returns Promise for the created room with timeout[cite: 503, 850, 1535, 1536, 1537, 1538, 1398].
        * input / output: `options: { name: string; password?: string }` / `Promise<Room>`[cite: 851, 1535, 1399].
    * joinRoom
        * short description: Emits 'joinRoom' event (now a void function)[cite: 504, 852, 1538, 1539, 1400, 1424, 1425].
        * input / output: `roomId: string`, `password?: string` / `void`[cite: 853, 1401, 1425].
    * leaveRoom
        * short description: Emits 'leaveRoom' event[cite: 505, 854, 1539, 1540, 1402].
        * input / output: `roomId: string` / `void`[cite: 855, 1403].
    * getAvailableRooms
        * short description: Emits 'getAvailableRooms' event[cite: 1540, 1541, 1403].
        * input / output: None / `void`[cite: 1404].
    * startGame
        * short description: Emits 'startGame' event[cite: 888, 1541, 1542, 1404].
        * input / output: `roomId: string` / `void`[cite: 1405].
    * declareMoves
        * short description: Emits 'declareMoves' event[cite: 888, 1542, 1543, 1405].
        * input / output: `roomId: string`, `moves: number` / `void`[cite: 1406].
    * moveRobot
        * short description: Emits 'moveRobot' event[cite: 888, 1543, 1544, 1407].
        * input / output: `roomId: string`, `robotColor: RobotColor`, `path: Position[]` / `void`[cite: 1408].
    * drawCard
        * short description: Added method to emit the 'drawCard' event to the server[cite: 1793].
        * input / output: Input: `roomId: string` / Output: `void`[cite: 1794].
    * registerEventListener (private helper)
        * short description: Registers a callback for a server event, removing existing listener first[cite: 1544, 1545, 1546, 1409].
        * input / output: `event`, `callback` / `void`[cite: 1410].
    * onRegistered / onRoomCreated / onRoomJoined / onRoomLeft / onRoomUpdated / onRoomListUpdated / onError / onGameStarted / onGameStateUpdated / onDeclarationMade / onTurnChanged / onSolutionAttemptResult / onGameOver
        * short description: Methods to register callbacks for specific server events. `onRoomListUpdated` replaces `onAvailableRoomsUpdated`[cite: 506, 507, 508, 509, 510, 511, 855, 856, 889, 954, 955, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559, 1410, 954, 955].
        * input / output: `callback: (data: any) => void` / `void`[cite: 856, 1411].
    * removeAllListeners
        * short description: Removes all registered event listeners[cite: 512, 857, 1559, 1560, 1412].
        * input / output: None / `void`[cite: 858, 1413].

### src/services/__tests__/socketService.test.ts

* Short description: Contains Vitest unit tests for the `SocketService` class. Mocks `socket.io-client` and tests the singleton pattern, connection logic, room operations (`createRoom`, `joinRoom`, `leaveRoom`), event handler registration, and the disconnect method[cite: 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 841, 200, 478, 480, 206, 481, 483, 484, 485, 210, 211, 212, 486, 487, 488, 489, 213, 214, 215, 490, 491, 492, 216, 493, 1149, 1150, 1391].

### src/stores/gameStore.ts

* useGameStore (Zustand Hook/Store)
    * short description: Manages global client state (connection, player, room, game list, multiplayer game state, generatedBoard, socketId) using Zustand. Provides actions interacting with `SocketService`. Handles socket events to update state. Includes `isMultiplayerGameState` type guard[cite: 513, 517, 858, 862, 1663, 1664, 1665, 860, 863, 1670, 1671, 1672, 1673, 1674, 1675, 861, 927, 929, 931, 956, 957, 1676, 1677, 1678, 1679, 1680, 1683, 1685, 1686, 1687, 1690, 1691, 1692, 930, 932, 933, 1665, 1666, 1667, 938, 939, 940, 941, 942, 1668, 1669, 1701, 1413, 1414, 1415, 1416].
    * State: `isConnected`, `isConnecting`, `connectionError`, `currentPlayer`, `currentRoom`, `availableRooms`, `socketId`, `game`, `generatedBoard`[cite: 859, 862, 939, 1667, 1668, 1669, 1670, 1701, 1417].
    * Actions: `connect`[cite: 940, 956, 1675, 1676], `disconnect`[cite: 941, 942, 1676], `registerPlayer`[cite: 1676, 1697], `createRoom` (async, returns Promise<Room>)[cite: 1671, 1697, 1698, 1699, 1700, 1701, 1702], `joinRoom` (void)[cite: 1702, 1703, 1426, 1427], `leaveRoom`[cite: 1703, 1704, 1705], `setConnectionError`[cite: 1705, 1706], `startGame`[cite: 947, 948, 1706, 1707, 1708, 1709], `declareMoves` (checks connection)[cite: 1709, 1710, 1711, 1712, 1713, 1801, 1802], `moveRobot`[cite: 1713, 1714, 1715, 1716, 1717], `drawCard`[cite: 1706, 1794, 1795].

### src/types/board.ts

* Short description: Defines TypeScript types for board patterns: `WallDirection`, `ReflectorDirection`, `TargetSymbol`, `TargetColor`, `BaseBoardPattern`, `RawBoardPattern`, `BoardPattern`, `RawBoardSet`, `WallPosition`, `ReflectorPosition`, `TargetPosition`, `BoardCollection`. Includes type guards `isValidBoardPattern`, `isValidBoardCollection`[cite: 663, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 664, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1289, 1290].

### src/types/game.ts

* Short description: Defines core game logic types: `Position`, `RobotColor`, `GameMode`, `Robot`, `Reflector`, `CellType`, `Cell`, `Board`, `Card`, `GamePhase`, `SinglePlayerState`, `GameState`, `Direction`. Also includes `MultiplayerGameState` aligned with server (using `Record`, added `boardPatternIds`). Imports `Player`[cite: 429, 430, 431, 432, 433, 434, 442, 444, 445, 446, 448, 451, 452, 722, 1627, 1628, 1629, 1630, 1631, 1632, 1640, 1641, 1642, 1643, 1644, 1646, 1647, 1649, 1650, 972, 973, 1651, 1654, 1655, 1656, 1657, 1658, 1659, 1442, 973, 1627, 1337, 1338, 1339].

### src/types/player.ts

* Short description: Defines TypeScript interfaces and types for players on the client-side: `Player`, `PlayerSession`, `PlayerStatus` (*Note: May differ from server-side definition*)[cite: 217, 218, 219, 863, 864, 1151, 1152, 1419].

### src/types/room.ts

* Short description: Defines TypeScript interfaces and types for game rooms on the client-side: `Room`, `GameState`, `GameStatus`, `RoomSummary`, `RoomOptions` (*Note: May differ from server-side definition*)[cite: 219, 220, 221, 222, 223, 224, 225, 864, 865, 1152, 1153, 1420].

### src/types/socket.ts

* Short description: Defines TypeScript interfaces for Socket.IO events (`ServerToClientEvents`, `ClientToServerEvents`) and `GameSocket` type. Includes game-related events. `roomListUpdated` replaces `availableRoomsUpdated`. Added 'drawCard' to ClientToServerEvents[cite: 540, 541, 542, 543, 865, 866, 867, 952, 953, 976, 977, 1519, 1520, 1521, 1522, 1523, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626, 886, 952, 953, 1792, 1421, 1422].

### src/utils/boardGenerator.ts

* createEmptyCell
    * short description: Creates a default, empty `Cell` object[cite: 454, 723, 1561, 1339].
    * input / output: None / `Cell`[cite: 724, 1340].
* getTargetSymbol
    * short description: Converts `TargetSymbol` enum to display character using `SYMBOL_MAP`[cite: 455, 725, 1562, 1563, 1340].
    * input / output: `symbol` (TargetSymbol) / `string`[cite: 726, 1341].
* createEmptyBoard
    * short description: Creates a `Board` object of given size, filled with empty cells[cite: 456, 727, 1563, 1341].
    * input / output: `size` (number) / `Board`[cite: 728, 1342].
* placeWalls
    * short description: Modifies board by setting wall properties based on `BoardPattern`, including adjacent cells[cite: 457, 729, 730, 1564, 1565, 1566, 1342].
    * input / output: `board` (Board), `pattern` (BoardPattern) / `void`[cite: 730, 731, 1343].
* placeReflectors
    * short description: Modifies board by adding reflector properties based on `BoardPattern`[cite: 460, 731, 1567, 1568, 1344].
    * input / output: `board` (Board), `pattern` (BoardPattern) / `void`[cite: 732, 1345].
* placeTargets
    * short description: Modifies board by setting target properties based on `BoardPattern`[cite: 461, 733, 1568, 1569, 1346].
    * input / output: `board` (Board), `pattern` (BoardPattern) / `void`[cite: 734, 1347].
* isCenterArea
    * short description: Checks if coordinates are in the central 2x2 area (16x16 assumed)[cite: 462, 735, 1569, 1570, 1348].
    * input / output: `x` (number), `y` (number) / `boolean`[cite: 736, 1349].
* getRandomEmptyPosition
    * short description: Finds a random valid starting position (empty, not target, not center)[cite: 463, 737, 738, 1570, 1571, 1572, 1573, 1574, 1350].
    * input / output: `board` (Board), `occupiedPositions` (Position[]), `maxAttempts` (number) / `Position`[cite: 738, 1351].
* placeRobots
    * short description: Modifies board by adding robots at random valid positions[cite: 467, 739, 1574, 1575, 1576, 1352].
    * input / output: `board` (Board) / `void`[cite: 740, 1353].
* generateBoardFromPattern
    * short description: Creates a complete `Board` from a `BoardPattern` by placing walls, reflectors, targets, and robots[cite: 469, 741, 1576, 1577, 1353].
    * input / output: `pattern` (BoardPattern) / `Board`[cite: 742, 1354].

### src/utils/boardLoader.ts

* BoardLoader (Class - Singleton) [cite: 376, 685, 1351, 1306]
    * constructor (private)
        * short description: Loads raw board data from JSON[cite: 377, 685, 1352, 1353, 1306].
        * input / output: None / `void`[cite: 686, 1307].
    * getInstance (static public)
        * short description: Singleton pattern implementation[cite: 378, 687, 1353, 1354, 1307].
        * input / output: None / `BoardLoader` instance[cite: 688, 1308].
    * getPatternKey (private)
        * short description: Generates JSON key string (e.g., 'boards\_A')[cite: 379, 689, 1354, 1355, 1308].
        * input / output: `pattern` (string) / `keyof RawBoardSet`[cite: 690, 1309].
    * getBoardSetByPattern (public)
        * short description: Retrieves, transforms (adds string ID), and validates boards for a pattern. Filters invalid boards[cite: 380, 382, 691, 1355, 1356, 1357, 1358, 692, 1358, 1310, 1311].
        * input / output: `pattern` (string) / `BoardPattern[]`[cite: 692, 1311].
    * getBoardById (public)
        * short description: Retrieves and validates a specific board by ID string. Expects format 'board\_XN'[cite: 383, 387, 693, 1359, 1360, 1361, 1362, 1363, 1312, 1445].
        * input / output: `boardId` (string) / `BoardPattern | undefined`[cite: 694, 1313].
    * getRandomGameBoards (public)
        * short description: Selects one random board from each set (A, B, C, D)[cite: 388, 695, 1363, 1364, 1365, 1314].
        * input / output: None / `BoardPattern[]`[cite: 696, 1315].
    * debugPrintState (public)
        * short description: Logs loaded board data state for debugging[cite: 390, 697, 1365, 1366, 1315].
        * input / output: None / `void`[cite: 698, 1316].
    * validateAllBoards (public)
        * short description: Validates all loaded board patterns[cite: 392, 699, 1367, 1368, 1369, 1370, 1371, 1316].
        * input / output: None / `{ valid: boolean; errors: string[] }`[cite: 700, 1317].

### src/utils/boardRotation.ts

* rotateWallDirection
    * short description: Calculates new wall direction after board rotation[cite: 354, 355, 633, 1200].
    * input / output: `direction` (WallDirection), `rotation` (number) / `WallDirection`[cite: 354, 634, 1201].
* rotateReflectorDirection
    * short description: Calculates new reflector orientation after rotation (changes only for 90/270 deg)[cite: 356, 357, 635, 1202].
    * input / output: `direction` (ReflectorDirection), `rotation` (number) / `ReflectorDirection`[cite: 356, 636, 1203].
* rotatePosition
    * short description: Calculates new (x, y) coordinates after rotation[cite: 358, 359, 360, 361, 637, 1204].
    * input / output: `x`, `y`, `size`, `rotation` (all number) / `[number, number]`[cite: 358, 638, 639, 1205].
* rotateBoard
    * short description: Rotates an entire `BoardPattern` (walls, reflectors, targets)[cite: 362, 363, 364, 365, 366, 367, 639, 1206].
    * input / output: `board` (BoardPattern), `rotation` (number) / `BoardPattern`[cite: 362, 640, 1207].
* createCompositeBoardPattern
    * short description: Combines four 8x8 `BoardPattern`s into one 16x16 pattern with rotations/transformations[cite: 367, 368, 369, 370, 377, 378, 641, 1208, 1426].
    * transformCoordinates (Helper)
        * short description: Converts 8x8 coordinates to 16x16 based on quadrant[cite: 370, 371, 372, 373, 642, 1209].
        * input / output: `x`, `y`, `quadrant` / `[number, number]`[cite: 370, 643, 1210].
    * transformElements (Helper)
        * short description: Applies coordinate transformation to an array of elements[cite: 374, 375, 376, 644, 1211].
        * input / output: `elements` array, `quadrant` / new array[cite: 374, 645, 1212].
    * input / output: `topLeft`, `topRight`, `bottomLeft`, `bottomRight` (all BoardPattern) / `BoardPattern`[cite: 367, 646, 1213].

### src/utils/boardValidator.ts

* BoardValidator (Class) [cite: 225, 560, 1153]
    * isValidPosition (static private)
        * short description: Checks if (x, y) coordinates are within board bounds[cite: 225, 560, 1153].
        * input / output: `x` (number), `y` (number), `size` (number) / `boolean`[cite: 225, 561, 1154].
    * isValidTargetColor (static private)
        * short description: Checks if a target color is valid, considering vortex targets[cite: 226, 227, 228, 562, 1155].
        * input / output: `color` (TargetColor), `isVortex` (boolean) / `boolean`[cite: 226, 563, 1156].
    * validateBoard (static public)
        * short description: Validates a single board pattern (size, walls, reflectors, targets). Logs warnings[cite: 228, 229, 230, 231, 232, 233, 234, 564, 228, 229, 230, 231, 232, 233, 566, 1157, 1159].
        * input / output: `board` (BoardPattern | RawBoardPattern) / `boolean`[cite: 228, 565, 1158].
    * validateBoardSet (static public)
        * short description: Validates an array of board patterns. Logs errors[cite: 235, 236, 237, 567, 237, 569, 1159, 1160].
        * input / output: `pattern` (string), `boards` (BoardPattern[] | RawBoardPattern[]) / `{ valid: boolean; errors: string[] }`[cite: 235, 238, 239, 568, 569, 1160, 1161].

### src/utils/constants.ts

* Short description: Defines constant mappings and arrays: `SYMBOL_MAP` (symbol name to character), `SYMBOLS` (array of symbol names), `ROBOT_COLORS`[cite: 276, 277, 601, 1180].

### src/utils/robotMovement.ts

* calculateReflection
    * short description: Calculates new robot direction after hitting a reflector[cite: 280, 281, 282, 602, 1181].
    * input / output: `direction` (Direction), `reflectorDirection` ('／' | '＼') / `Direction`[cite: 281, 603, 1182].
* getNextPosition
    * short description: Calculates the next grid position based on current position and direction[cite: 282, 283, 604, 1183].
    * input / output: `position` (Position), `direction` (Direction) / `Position`[cite: 283, 605, 1184].
* hasCollision
    * short description: Checks for collisions with boundaries, other robots, or walls[cite: 284, 285, 286, 287, 288, 289, 606, 1185].
    * input / output: `board` (Board), `position` (Position), `nextPosition` (Position), `direction` (Direction) / `boolean`[cite: 284, 607, 1186].
* calculatePath
    * short description: Calculates the full path a robot takes in a direction until an obstacle or reflection[cite: 289, 290, 291, 292, 293, 294, 295, 296, 297, 608, 1187].
    * input / output: `board` (Board), `robot` (Robot), `initialDirection` (Direction) / `Position[]`[cite: 289, 609, 610, 1188].
* calculateFinalPosition
    * short description: Calculates only the final stopping position of a robot's move[cite: 298, 299, 611, 1189].
    * input / output: `board` (Board), `robot` (Robot), `direction` (Direction) / `Position`[cite: 298, 612, 1190].

### src/vite-env.d.ts

* Short description: TypeScript declaration file for Vite client types[cite: 243, 573, 1164].

### .env.development

* Short description: Environment variable for the frontend development build, setting the `VITE_SOCKET_URL`[cite: 299, 574, 1191].

### .gitignore

* Short description: Specifies files and directories for Git to ignore (logs, `node_modules`, build outputs, editor files)[cite: 244, 575, 1165].

### eslint.config.js

* Short description: ESLint configuration, setting up rules, plugins (react-hooks, react-refresh), language options, and ignoring `dist`[cite: 244, 245, 576, 1166].

### index.html

* Short description: Main HTML file, includes the root div for the React app and loads the main JavaScript module[cite: 245, 577, 578, 1167].

### package.json

* Short description: Frontend project metadata, scripts (dev, build, lint, preview), dependencies (React, zustand, socket.io-client), and devDependencies (Vite, TypeScript, ESLint, Tailwind)[cite: 299, 300, 579, 1192].

### postcss.config.js

* Short description: PostCSS configuration, specifying plugins like `tailwindcss/nesting`, `tailwindcss`, and `autoprefixer`[cite: 246, 580, 1168].

### README.md

* Short description: Introduction to the Vite + React + TypeScript template, suggesting ESLint configuration expansion[cite: 247, 248, 581, 1169].

### tailwind.config.js

* Short description: Tailwind CSS configuration, specifying content files, theme extensions (colors), and plugins[cite: 249, 250, 583, 1170].

### tsconfig.app.json

* Short description: TypeScript configuration for the application source (`src`), setting compiler options (target, libs, module, JSX) and strict linting rules[cite: 251, 584, 585, 1171].

### tsconfig.json

* Short description: Root TypeScript configuration, referencing `tsconfig.app.json` and `tsconfig.node.json` for a composite project[cite: 251, 586, 1172].

### tsconfig.node.json

* Short description: TypeScript configuration for Node.js files (like `vite.config.ts`), setting Node-suitable compiler options and strict linting[cite: 252, 587, 588, 1173].

### vite.config.ts

* Short description: Vite configuration file, using the `@vitejs/plugin-react` plugin[cite: 252, 589, 1174].


================================================================
End of Codebase
================================================================

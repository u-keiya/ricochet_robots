This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)

Additional Info:
----------------

================================================================
Directory Structure
================================================================
public/
  vite.svg
src/
  assets/
    boards.json
    react.svg
  components/
    GameBoard/
      BoardCell.tsx
      GameBoard.tsx
      Robot.tsx
    DeclarationCard.tsx
    GameInfo.tsx
  hooks/
    useGameState.ts
  pages/
    BoardTestPage.tsx
    CreateRoomPage.tsx
    GamePage.tsx
    JoinRoomPage.tsx
    OnlinePage.tsx
    SinglePlayerPage.tsx
    TitlePage.tsx
  types/
    board.ts
    game.ts
  utils/
    boardGenerator.ts
    boardLoader.ts
    boardRotation.ts
    boardValidator.ts
    cardGenerator.ts
    constants.ts
    robotMovement.ts
  App.tsx
  index.css
  main.tsx
  vite-env.d.ts
.env.development
.gitignore
eslint.config.js
index.html
online-implementation-plan.md
package.json
postcss.config.js
README.md
requirements.md
tailwind.config.js
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts

================================================================
Files
================================================================

Okay, here is the source code description for each file from the repository, formatted as requested:

### project_desc/definition.md

* Short description: Defines the objectives, system requirements (tech stack, functional, non-functional), UI, and development phases for the multiplayer mode of the Ricochet Robots game[cite: 17, 18].

### project_desc/requirements.md

* Short description: Outlines the requirements for the browser-based Ricochet Robots game, including system architecture, technology stack (React, TypeScript, Node.js, Socket.io), functional requirements (title screen, online play, game mechanics), extensibility considerations (CPU mode), and development phases[cite: 19].

### public/vite.svg

* Short description: This is an SVG file for the Vite logo[cite: 20, 551].

### server/coverage/lcov-report/base.css

* Short description: Provides base CSS styling for the LCOV code coverage report generated by Istanbul, including layout, typography, tables, and coverage indicators[cite: 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 757].

### server/coverage/lcov-report/block-navigation.js

* short description: JavaScript for the LCOV report enabling keyboard navigation ('n', 'j', 'b', 'p', 'k') between uncovered code blocks or low-coverage files[cite: 55, 56, 66, 759].
* init (IIFE)
    * short description: Initializes keyboard navigation, queries elements, sets up listeners, and returns the `jump` function[cite: 760, 761].
    * input / output: None / `jump` function[cite: 761].
* toggleClass (Inner function)
    * short description: Adds/removes the 'highlighted' class from coverage elements[cite: 57, 58, 762].
    * input / output: `index` (number) / `void`[cite: 57, 763].
* makeCurrent (Inner function)
    * short description: Highlights the element at the given index and scrolls it into view[cite: 59, 60, 764].
    * input / output: `index` (number) / `void`[cite: 59, 765].
* goToPrevious (Inner function)
    * short description: Calculates the index of the previous coverage element and jumps to it[cite: 61, 62, 63, 766].
    * input / output: None / `void`[cite: 61, 767].
* goToNext (Inner function)
    * short description: Calculates the index of the next coverage element and jumps to it[cite: 64, 65, 768].
    * input / output: None / `void`[cite: 64, 769].
* jump (Returned function)
    * short description: Handles keydown events, triggers navigation if appropriate keys are pressed and search input is not focused[cite: 66, 67, 68, 770].
    * input / output: `event` (KeyboardEvent) / `void`[cite: 66, 771].

### server/coverage/lcov-report/prettify.css

* Short description: CSS for syntax highlighting in the LCOV report using "prettify" conventions, defining colors for code elements[cite: 69, 775, 776].

### server/coverage/lcov-report/prettify.js

* Short description: Google Code Prettify library for syntax highlighting in the LCOV report, parsing code and applying CSS classes[cite: 69, 70, 71, 777, 778].

### server/coverage/lcov-report/roomManager.ts.html

* Short description: HTML file showing the detailed code coverage report for the `server/src/services/roomManager.ts` file, highlighting covered/uncovered lines, statements, and branches[cite: 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 112, 113, 779, 780, 781].

### server/coverage/lcov-report/sorter.js

* Short description: JavaScript for the LCOV report adding sort functionality to coverage summary table columns and a search/filter box[cite: 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 782].

### server/.env.development

* Short description: Environment variables for the server's development environment, setting `PORT`, `HOST`, `NODE_ENV`, and `CORS_ORIGIN`[cite: 155, 819, 820].

### server/jest.config.js

* Short description: Configuration file for Jest testing framework, specifying preset (`ts-jest`), environment (`node`), test file locations, and code coverage settings[cite: 155, 821, 822].

### server/tsconfig.json

* Short description: TypeScript configuration for the server project, setting compiler options (target, module, directories, strict checking, source maps) and including/excluding files[cite: 156, 824, 825, 826].

### src/assets/react.svg

* Short description: This is an SVG file for the React logo[cite: 157, 158, 159, 160, 551].

### src/components/room/RoomList.tsx

* RoomList (Function Component)
    * short description: Displays a list of available game rooms, allows selection, password entry, and joining via `useGameStore`[cite: 161, 162, 164, 172, 173, 832, 833, 834, 835]. Shows room status and lock icon[cite: 175, 176, 177, 180]. Handles errors and success callbacks[cite: 164, 166, 184, 836].
    * handleJoinRoom
        * short description: Validates selection/password, calls `joinRoom` action, and triggers `onJoinSuccess`[cite: 164, 165, 166, 837].
        * input / output: `e: React.FormEvent` / `void`[cite: 164, 838].
    * getStatusText
        * short description: Converts room status enum ('waiting', etc.) to Japanese text[cite: 167, 168, 169, 170, 171, 839].
        * input / output: `status: string` / `string`[cite: 167, 840].

### src/components/GameResultDisplay.tsx

* GameResultDisplay (Function Component)
    * short description: Displays game results (rankings, scores) when the game phase is 'finished'[cite: 187, 188, 189, 191, 914]. Retrieves data from `useGameStore` and maps player names[cite: 188, 190, 915]. Includes a leave room button[cite: 193].
    * input / output: Props: `players: Player[]`, `onLeaveRoom: () => void` / JSX[cite: 187, 188, 915, 916].

### src/pages/OnlinePage.tsx

* OnlinePage (Function Component)
    * short description: Renders buttons to navigate to "Create Room", "Join Room", or back to the title page[cite: 195, 196, 197, 198, 558].
    * input / output: Takes no input, returns JSX elements. Uses `react-router-dom` for navigation[cite: 195, 559].

### src/services/__tests__/socketService.test.ts

* Short description: Contains Vitest unit tests for the `SocketService` class[cite: 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 841]. It mocks `socket.io-client` [cite: 200, 478] and tests the singleton pattern[cite: 480], connection logic[cite: 206, 481, 483, 484, 485], room operations (`createRoom`, `joinRoom`, `leaveRoom`)[cite: 210, 211, 212, 486, 487, 488, 489], event handler registration[cite: 213, 214, 215, 490, 491, 492], and the disconnect method[cite: 216, 493].

### src/types/player.ts

* Short description: Defines TypeScript interfaces and types for players on the client-side: `Player`, `PlayerSession`, `PlayerStatus`[cite: 217, 218, 219, 863, 864]. (*Note: May differ from server-side definition*)[cite: 864].

### src/types/room.ts

* Short description: Defines TypeScript interfaces and types for game rooms on the client-side: `Room`, `GameState`, `GameStatus`, `RoomSummary`, `RoomOptions`[cite: 219, 220, 221, 222, 223, 224, 225, 864, 865]. (*Note: May differ from server-side definition*)[cite: 865].

### src/utils/boardValidator.ts

* BoardValidator (Class) [cite: 225, 560]
    * isValidPosition (static private)
        * short description: Checks if (x, y) coordinates are within board bounds[cite: 225, 560].
        * input / output: `x` (number), `y` (number), `size` (number) / `boolean`[cite: 225, 561].
    * isValidTargetColor (static private)
        * short description: Checks if a target color is valid, considering vortex targets[cite: 226, 227, 228, 562].
        * input / output: `color` (TargetColor), `isVortex` (boolean) / `boolean`[cite: 226, 563].
    * validateBoard (static public)
        * short description: Validates a single board pattern (size, walls, reflectors, targets)[cite: 228, 229, 230, 231, 232, 233, 234, 564].
        * input / output: `board` (BoardPattern | RawBoardPattern) / `boolean`[cite: 228, 565]. Logs warnings[cite: 228, 229, 230, 231, 232, 233, 566].
    * validateBoardSet (static public)
        * short description: Validates an array of board patterns[cite: 235, 236, 237, 567].
        * input / output: `pattern` (string), `boards` (BoardPattern[] | RawBoardPattern[]) / `{ valid: boolean; errors: string[] }`[cite: 235, 238, 239, 568, 569]. Logs errors[cite: 237, 569].

### src/index.css

* Short description: Defines base, component (e.g., `.btn`), and utility styles using Tailwind CSS directives[cite: 239, 240, 241, 242, 243, 570].

### src/main.tsx

* Short description: Main entry point for the React application, rendering the root `App` component[cite: 243, 571, 572].

### src/vite-env.d.ts

* Short description: TypeScript declaration file for Vite client types[cite: 243, 573].

### .gitignore

* Short description: Specifies files and directories for Git to ignore (logs, `node_modules`, build outputs, editor files)[cite: 244, 575].

### eslint.config.js

* Short description: ESLint configuration, setting up rules, plugins (react-hooks, react-refresh), language options, and ignoring `dist`[cite: 244, 245, 576].

### index.html

* Short description: Main HTML file, includes the root div for the React app and loads the main JavaScript module[cite: 245, 577, 578].

### postcss.config.js

* Short description: PostCSS configuration, specifying plugins like `tailwindcss/nesting`, `tailwindcss`, and `autoprefixer`[cite: 246, 580].

### README.md

* Short description: Introduction to the Vite + React + TypeScript template, suggesting ESLint configuration expansion[cite: 247, 248, 581].

### tailwind.config.js

* Short description: Tailwind CSS configuration, specifying content files, theme extensions (colors), and plugins[cite: 249, 250, 583].

### tsconfig.app.json

* Short description: TypeScript configuration for the application source (`src`), setting compiler options (target, libs, module, JSX) and strict linting rules[cite: 251, 584, 585].

### tsconfig.json

* Short description: Root TypeScript configuration, referencing `tsconfig.app.json` and `tsconfig.node.json` for a composite project[cite: 251, 586].

### tsconfig.node.json

* Short description: TypeScript configuration for Node.js files (like `vite.config.ts`), setting Node-suitable compiler options and strict linting[cite: 252, 587, 588].

### vite.config.ts

* Short description: Vite configuration file, using the `@vitejs/plugin-react` plugin[cite: 252, 589].

### server/src/types/player.ts

* Short description: Defines TypeScript interfaces for server-side players: `Player` (including `lastConnected`) and `PlayerStatus`[cite: 253, 254, 806, 916, 917].

### server/src/types/room.ts

* Short description: Defines TypeScript interfaces for server-side rooms: `Room` (including `gameManager`), `RoomSummary` (using `GamePhase`), and `RoomOptions`[cite: 255, 256, 257, 258, 259, 260, 807, 958, 959, 960, 961]. `GameState` and `GameStatus` are removed[cite: 960].

### server/package.json

* Short description: Node.js server project metadata, scripts, dependencies (`dotenv`, `express`, `socket.io`, `uuid`, `winston`), and devDependencies[cite: 261, 823].

### src/components/GameInfo.tsx

* GameInfo (Function Component) [cite: 262, 590]
    * short description: Displays game info: score, move count, declaration, timer, current target card, remaining cards, and draw card button[cite: 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 590, 591].
    * input / output: Props: `score`, `moveCount`, `declaredMoves`, `timer`, `isDeclarationPhase`, `currentCard`, `remainingCards`, `onDrawCard`, `phase` / JSX[cite: 262, 263, 264, 592, 593].

### src/utils/constants.ts

* Short description: Defines constant mappings and arrays: `SYMBOL_MAP` (symbol name to character), `SYMBOLS` (array of symbol names), `ROBOT_COLORS`[cite: 276, 277, 601].

### src/utils/robotMovement.ts

* calculateReflection
    * short description: Calculates new robot direction after hitting a reflector[cite: 280, 281, 282, 602].
    * input / output: `direction` (Direction), `reflectorDirection` ('／' | '＼') / `Direction`[cite: 281, 603].
* getNextPosition
    * short description: Calculates the next grid position based on current position and direction[cite: 282, 283, 604].
    * input / output: `position` (Position), `direction` (Direction) / `Position`[cite: 283, 605].
* hasCollision
    * short description: Checks for collisions with boundaries, other robots, or walls[cite: 284, 285, 286, 287, 288, 289, 606].
    * input / output: `board` (Board), `position` (Position), `nextPosition` (Position), `direction` (Direction) / `boolean`[cite: 284, 607].
* calculatePath
    * short description: Calculates the full path a robot takes in a direction until an obstacle or reflection[cite: 289, 290, 291, 292, 293, 294, 295, 296, 297, 608].
    * input / output: `board` (Board), `robot` (Robot), `initialDirection` (Direction) / `Position[]`[cite: 289, 609, 610].
* calculateFinalPosition
    * short description: Calculates only the final stopping position of a robot's move[cite: 298, 299, 611].
    * input / output: `board` (Board), `robot` (Robot), `direction` (Direction) / `Position`[cite: 298, 612].

### .env.development

* Short description: Environment variable for the frontend development build, setting the `VITE_SOCKET_URL`[cite: 299, 574].

### package.json

* Short description: Frontend project metadata, scripts (dev, build, lint, preview), dependencies (React, zustand, socket.io-client), and devDependencies (Vite, TypeScript, ESLint, Tailwind)[cite: 299, 300, 579].

### server/src/services/__tests__/roomManager.test.ts

* Short description: Jest unit tests for the server-side `RoomManager` class[cite: 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 789]. Tests room creation[cite: 304, 305, 306, 307, 308, 790], joining[cite: 309, 310, 311, 312, 313, 790], leaving[cite: 314, 315, 316, 790], summaries[cite: 319, 320, 790], connection updates[cite: 321, 322, 323, 324, 325, 790], and inactive room cleanup[cite: 317, 318, 790].

### src/pages/BoardTestPage.tsx

* BoardTestPage (Function Component) [cite: 328, 625]
    * short description: Development page to load, display, rotate, select, and combine board patterns using `BoardLoader`, `GameBoard`, and rotation utils[cite: 326, 327, 328, 329, 330, 331, 332, 336, 339, 340, 348, 349, 350, 351, 352, 353, 625, 626]. Validates boards on load[cite: 331, 338, 626].
    * handleBoardSelect
        * short description: Updates state for the selected board in a quadrant[cite: 333, 343, 627].
        * input / output: `position` (keyof typeof selectedBoards), `board` (BoardPattern) / `void`[cite: 333, 628].
    * handleCreateComposite
        * short description: Creates a composite board from selected quadrants[cite: 334, 335, 336, 347, 629].
        * input / output: None / `void`[cite: 334, 630]. Calls `createCompositeBoardPattern`[cite: 335, 630]. Updates `compositeBoard` state[cite: 330, 336, 630].

### src/utils/boardRotation.ts

* rotateWallDirection
    * short description: Calculates new wall direction after board rotation[cite: 354, 355, 633].
    * input / output: `direction` (WallDirection), `rotation` (number) / `WallDirection`[cite: 354, 634].
* rotateReflectorDirection
    * short description: Calculates new reflector orientation after rotation (changes only for 90/270 deg)[cite: 356, 357, 635].
    * input / output: `direction` (ReflectorDirection), `rotation` (number) / `ReflectorDirection`[cite: 356, 636].
* rotatePosition
    * short description: Calculates new (x, y) coordinates after rotation[cite: 358, 359, 360, 361, 637].
    * input / output: `x`, `y`, `size`, `rotation` (all number) / `[number, number]`[cite: 358, 638, 639].
* rotateBoard
    * short description: Rotates an entire `BoardPattern` (walls, reflectors, targets)[cite: 362, 363, 364, 365, 366, 367, 639].
    * input / output: `board` (BoardPattern), `rotation` (number) / `BoardPattern`[cite: 362, 640].
* createCompositeBoardPattern
    * short description: Combines four 8x8 `BoardPattern`s into one 16x16 pattern with rotations/transformations[cite: 367, 368, 369, 370, 377, 378, 641].
    * transformCoordinates (Helper)
        * short description: Converts 8x8 coordinates to 16x16 based on quadrant[cite: 370, 371, 372, 373, 642].
        * input / output: `x`, `y`, `quadrant` / `[number, number]`[cite: 370, 643].
    * transformElements (Helper)
        * short description: Applies coordinate transformation to an array of elements[cite: 374, 375, 376, 644].
        * input / output: `elements` array, `quadrant` / new array[cite: 374, 645].
    * input / output: `topLeft`, `topRight`, `bottomLeft`, `bottomRight` (all BoardPattern) / `BoardPattern`[cite: 367, 646].

### server/src/services/roomManager.ts

* RoomManager (Class) [cite: 378, 592, 923]
    * constructor
        * short description: Initializes with an empty room map[cite: 380, 381, 593].
        * input / output: None / `void`[cite: 792].
    * createRoom
        * short description: Creates a room, sets host, instantiates `GameManager`, stores room[cite: 381, 382, 383, 384, 385, 386, 387, 594, 595, 596, 597, 792, 962, 963]. Stores initial game state[cite: 962, 963].
        * input / output: `hostPlayer: Player`, `options: RoomOptions` / `Room`[cite: 381, 594, 793].
    * joinRoom
        * short description: Adds player to room, checks password, limits, existing player[cite: 388, 389, 390, 391, 392, 393, 598, 599, 600, 601, 602, 603, 794, 921, 924]. Updates player object properties[cite: 924, 926].
        * input / output: `player: Player`, `roomId: string`, `password?: string` / `boolean`[cite: 388, 925, 795]. Throws errors[cite: 795].
    * leaveRoom
        * short description: Removes player. Deletes room if empty. Assigns new host if host leaves[cite: 396, 397, 398, 399, 400, 401, 402, 403, 604, 605, 606, 607, 608, 796, 797]. Resets player's `roomId`[cite: 399].
        * input / output: `playerId: string`, `roomId: string` / `boolean`[cite: 396, 604, 798]. Throws errors[cite: 798].
    * getRoomSummaries
        * short description: Returns array of summaries for all rooms[cite: 404, 609, 799]. Reads status from `gameState.phase`[cite: 964, 965].
        * input / output: None / `RoomSummary[]`[cite: 404, 800].
    * getRoom
        * short description: Retrieves full details of a room by ID[cite: 405, 610, 800].
        * input / output: `roomId: string` / `Room | undefined`[cite: 405, 801].
    * updatePlayerConnection
        * short description: Updates player's `connected` status and `lastConnected` time in a room[cite: 406, 407, 408, 409, 410, 411, 412, 413, 611, 612, 613, 614, 802]. Logs warnings if room/player not found[cite: 407, 409].
        * input / output: `playerId: string`, `roomId: string`, `connected: boolean` / `void`[cite: 406, 803, 804].
    * cleanupInactiveRooms
        * short description: Removes rooms where all players are disconnected and last activity is old[cite: 414, 415, 416, 615, 616, 617, 805].
        * input / output: None / `void`[cite: 806].

### src/assets/boards.json

* Short description: JSON file defining board patterns (A, B, C, D) including size, walls, reflectors, and targets (colors, symbols, vortex)[cite: 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 650, 651, 652].

### src/components/room/CreateRoomForm.tsx

* CreateRoomForm (Function Component)
    * short description: Form for creating a game room (name, optional password)[cite: 486, 487, 497, 498, 499, 827]. Uses `useGameStore`'s `createRoom` action[cite: 489, 493, 828]. Handles validation, errors, loading state, and success callback[cite: 488, 489, 491, 492, 493, 494, 495, 496, 500, 829, 830]. Disables submit until player is registered[cite: 501, 502, 503, 935, 936].
    * handleSubmit
        * short description: Validates input, calls `createRoom`, triggers `onSuccess`[cite: 490, 492, 493, 494, 831].
        * input / output: `e: React.FormEvent` / `void`[cite: 490, 832].

### src/components/DeclarationCard.tsx

* DeclarationCard (Function Component) [cite: 505, 613]
    * short description: Renders a single card for declaring moves, showing number and selection/disabled state[cite: 505, 506, 613, 614].
    * input / output: `number`, `isSelected`, `isDisabled`, `onClick` function / JSX button[cite: 504, 505, 614, 615].
* ChevronLeft (Function Component) [cite: 507, 615]
    * short description: Renders a left chevron SVG icon[cite: 507, 615].
    * input / output: None / SVG JSX[cite: 507, 616].
* ChevronRight (Function Component) [cite: 508, 617]
    * short description: Renders a right chevron SVG icon[cite: 508, 617].
    * input / output: None / SVG JSX[cite: 508, 618].
* DeclarationCardList (Function Component) [cite: 509, 510, 619, 883]
    * short description: Renders a scrollable list of `DeclarationCard`s for move declaration, with navigation arrows[cite: 509, 513, 514, 515, 517, 518, 519, 619, 620, 882]. Handles null `selectedNumber`[cite: 884].
    * handlePrevClick
        * short description: Decrements start index for visible cards[cite: 511, 514, 621].
        * input / output: None / `void`[cite: 511, 621].
    * handleNextClick
        * short description: Increments start index for visible cards[cite: 512, 518, 622].
        * input / output: None / `void`[cite: 512, 623].
    * input / output: `selectedNumber: number | null`, `maxNumber`, `onSelect`, `className` / JSX[cite: 509, 510, 624, 885].

### src/pages/JoinRoomPage.tsx

* JoinRoomPage (Function Component)
    * short description: Page for joining an existing room. Connects to the socket, registers the player if needed (checks `socketId`), displays available rooms via `RoomList`, and redirects on successful join[cite: 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 945, 946]. Handles connection errors[cite: 527].

### src/pages/TitlePage.tsx

* TitlePage (Function Component) [cite: 532, 631]
    * short description: Renders the title screen with buttons for Single Player, Online Play, and Board Test[cite: 533, 534, 535, 536, 631].
    * input / output: None / JSX. Uses `react-router-dom`[cite: 532, 632].

### src/App.tsx

* App (Function Component) [cite: 539, 647]
    * short description: Sets up application routing using `react-router-dom` for Title, Single Player, Online (Create/Join/Game), and Test pages[cite: 536, 537, 538, 539, 540, 541, 647, 648].
    * input / output: None / JSX (`Router`, `Routes`, `Route`)[cite: 539, 649].

### project_desc/repo/repository.txt

* Short description: A merged representation of the entire codebase, generated by Repomix for AI consumption[cite: 541, 542, 543, 544, 545, 546, 547, 548, 549]. Includes file summary, usage guidelines, directory structure, and concatenated file contents[cite: 542, 544, 549].

### project_desc/roadmap.md

* Short description: Development roadmap for the multiplayer mode, outlining phases (Basic Implementation, Game Logic, UI/UX, Extra Features), weekly tasks, responsibilities, milestones, priorities, and risks[cite: 977, 978, 979, 980, 981, 982].

### server/coverage/lcov-report/services/gameManager.ts.html

* Short description: HTML code coverage report for `server/src/services/gameManager.ts`, showing line/branch/function coverage details[cite: 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 1001, 1062, 1063].

### server/coverage/lcov-report/services/index.html

* Short description: HTML index page for the code coverage report of the `services` directory, summarizing coverage statistics for files within it (e.g., `gameManager.ts`, `roomManager.ts`)[cite: 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072].

### server/coverage/lcov-report/services/roomManager.ts.html

* Short description: HTML code coverage report for `server/src/services/roomManager.ts`[cite: 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1126, 1127].

### server/coverage/lcov-report/types/game.ts.html

* Short description: HTML code coverage report for `server/src/types/game.ts`[cite: 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1148, 1149, 1150].

### server/coverage/lcov-report/types/index.html

* Short description: HTML index page for the code coverage report of the `types` directory, summarizing coverage for files within it (e.g., `game.ts`)[cite: 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159].

### server/coverage/coverage-final.json

* Short description: Raw, detailed code coverage data in JSON format generated by Istanbul, used by reporters like LCOV[cite: 785, 786, 1160]. Contains metrics for `gameManager.ts`, `roomManager.ts`, and `types/game.ts`[cite: 1160].

### server/coverage/lcov.info

* Short description: Code coverage data in LCOV text format, suitable for reporting tools like Coveralls or Codecov[cite: 787, 788, 1160].

### server/src/types/game.ts

* Short description: Defines TypeScript types for server-side multiplayer game state: `GamePhase`, `Position`, `RobotColor`, `Card`, `Declaration`, `PlayerGameState`, `MultiplayerGameState` (using `Record` instead of `Map`), `GameRules`, `DEFAULT_GAME_RULES`[cite: 867, 868, 869, 870, 871, 872, 891, 892, 902, 903, 904, 905, 970, 971, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170].

### server/src/services/gameManager.ts

* GameManager (Class)
    * short description: Manages the state and logic of a multiplayer Ricochet Robots game instance[cite: 868, 1426]. Uses `Record` internally for state properties[cite: 969, 972].
    * constructor
        * short description: Initializes game with players and rules, setting initial game state[cite: 868, 869, 1427, 1428, 1429, 1430, 1431].
        * input / output: `players: Player[]`, `rules: GameRules` / `void`[cite: 869].
    * startGame
        * short description: Starts the game if phase is WAITING and players >= 2[cite: 870, 1432, 1433, 1434]. Sets first player and starts declaration phase[cite: 1434].
        * input / output: None / `void`[cite: 870]. Throws if conditions not met[cite: 871, 1432, 1433].
    * declareMoves
        * short description: Handles player move declarations during the DECLARATION phase[cite: 872, 1443, 1444, 1445, 1446].
        * input / output: `playerId: string`, `moves: number` / `void`[cite: 872]. Throws if invalid phase or moves[cite: 873, 1443, 1444].
    * moveRobot
        * short description: Handles robot movement attempts during the SOLUTION phase[cite: 873, 1456, 1457, 1458, 1459, 1460, 1461]. Checks for goal achievement[cite: 1461, 1462].
        * input / output: `playerId: string`, `robotColor: RobotColor`, `positions: Position[]` / `void`[cite: 873, 874]. Throws if invalid phase/turn/moves[cite: 1456, 1457, 1459].
    * getGameState
        * short description: Returns a copy of the current game state (using Records)[cite: 874, 968, 969, 1485].
        * input / output: None / `MultiplayerGameState`[cite: 875, 969].
    * endDeclarationPhase (private)
        * short description: Sorts declarations, sets `declarationOrder`, sets `currentPlayer`, and starts the solution phase or draws the next card[cite: 892, 893, 1447, 1448, 1449, 1450, 1451, 1452].
        * input / output: None / `void`[cite: 893, 894].
    * failCurrentSolution (private)
        * short description: Removes current player from `declarationOrder` and moves to the next player or next card[cite: 894, 895, 896, 908, 909, 1468, 1469, 1470, 1471, 1472, 1473, 1474]. No penalty points[cite: 909].
        * input / output: None / `void`[cite: 896, 909].
    * successCurrentSolution (private)
        * short description: Awards points to the current player and draws the next card[cite: 905, 1463, 1464, 1465, 1466, 1467, 1468].
        * input / output: None / `void`[cite: 906].
    * drawNextCard (private)
        * short description: Decrements remaining cards and starts the next declaration phase or ends the game[cite: 910, 911, 1474, 1475, 1476, 1477, 1478].
        * input / output: None / `void`[cite: 911, 912].
    * endGame (private)
        * short description: Sets phase to FINISHED, calculates rankings, and cleans up timers[cite: 912, 913, 1479, 1480, 1481, 1482, 1483, 1484].
        * input / output: None / `void`[cite: 913].
    * cleanup (public)
        * short description: Clears any active timer interval[cite: 1486].
        * input / output: None / `void`.

### server/src/services/__tests__/gameManager.test.ts

* Short description: Jest tests for `GameManager` covering initialization, declaration phase (valid/invalid declarations, sorting, timeouts), solution phase (turn transitions on failure), game end conditions (running out of cards), timer management, and score management (no penalties)[cite: 875, 876, 1371, 1372, 1373, 1374, 1375, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425]. Includes helper `simulateFailedRound`[cite: 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384].

### src/components/GameBoard/Robot.tsx

* DirectionArrow (Function Component) [cite: 304, 653]
    * short description: Renders a clickable arrow button for robot movement direction[cite: 653, 1175, 1176, 1177, 1178].
    * input / output: `direction`, `onClick`, `position` / JSX button[cite: 654, 1174, 655].
* Robot (Function Component) [cite: 308, 655]
    * short description: Renders a robot piece, handling position, color, selection, clicks, and displaying movement arrows[cite: 655, 1171, 1172, 1173, 1178, 1184, 1185, 1186, 1187].
    * getPositionStyle
        * short description: Calculates CSS style for robot position/size[cite: 656, 1178, 1179, 1180].
        * input / output: None / `CSSProperties`[cite: 657].
    * getColorStyle
        * short description: Returns Tailwind CSS classes for robot color[cite: 658, 1181, 1182].
        * input / output: None / `string`[cite: 659].
    * handleMove
        * short description: Calls `onMove` prop when an arrow is clicked[cite: 660, 1182, 1183].
        * input / output: `direction` (Direction) / `void`[cite: 661].
    * input / output: Props: `color`, `position`, `boardSize`, `isActive`, `isSelected`, `onMove`, `onClick`, `style` / JSX div[cite: 662, 1172, 1178, 663].

### src/types/board.ts

* Short description: Defines TypeScript types for board patterns: `WallDirection`, `ReflectorDirection`, `TargetSymbol`, `TargetColor`, `BaseBoardPattern`, `RawBoardPattern`, `BoardPattern`, `RawBoardSet`, `WallPosition`, `ReflectorPosition`, `TargetPosition`, `BoardCollection`[cite: 663, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195]. Includes type guards `isValidBoardPattern`, `isValidBoardCollection`[cite: 664, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209].

### src/utils/cardGenerator.ts

* CardDeck (Class) [cite: 341, 665, 1230]
    * constructor
        * short description: Initializes deck, generates, shuffles cards[cite: 342, 665, 1231, 1232].
        * input / output: `board` (Board) / `void`[cite: 666, 1231].
    * generateCards (private)
        * short description: Creates initial 17 cards (4 colors x 4 symbols + vortex)[cite: 343, 667, 1232, 1233, 1234, 1235].
        * input / output: None / `Omit<Card, 'position'>[]`[cite: 668].
    * findTargetPosition (private)
        * short description: Searches board for matching target cell position[cite: 346, 669, 1236, 1237, 1238, 1239, 1240].
        * input / output: `color` (CardColor), `symbol` (TargetSymbol) / `Position | null`[cite: 347, 670, 1236].
    * shuffle (private)
        * short description: Randomizes card order (Fisher-Yates)[cite: 351, 671, 1240, 1241].
        * input / output: None / `void`[cite: 672].
    * drawNext
        * short description: Draws next card, finds position, returns `Card`. Returns null if empty/not found[cite: 352, 353, 355, 673, 674, 1242, 1243, 1244, 1245, 1246, 1247].
        * input / output: None / `Card | null`[cite: 675, 1242].
    * getRemaining
        * short description: Returns number of cards left[cite: 358, 676, 1247, 1248].
        * input / output: None / `number`[cite: 677].
    * getTotalCards
        * short description: Returns total initial cards[cite: 359, 678, 1248, 1249].
        * input / output: None / `number`[cite: 679].

### src/pages/SinglePlayerPage.tsx

* SinglePlayerPage (Function Component) [cite: 362, 680]
    * short description: Renders single-player UI: board, info panel, declaration list[cite: 680, 681, 1334, 1335, 1336, 1343, 1347, 1348, 1350]. Manages layout scaling[cite: 681, 1336, 1339, 1342]. Uses `useGameState` hook[cite: 684, 1338].
    * getBoardScale
        * short description: Calculates board scaling factor based on window size[cite: 682, 1339, 1340, 1341, 1342].
        * input / output: None / `number`[cite: 683].
    * input / output: None / JSX[cite: 684].

### src/utils/boardLoader.ts

* BoardLoader (Class - Singleton) [cite: 376, 685, 1351]
    * constructor (private)
        * short description: Loads raw board data from JSON[cite: 377, 685, 1352, 1353].
        * input / output: None / `void`[cite: 686].
    * getInstance (static public)
        * short description: Singleton pattern implementation[cite: 378, 687, 1353, 1354].
        * input / output: None / `BoardLoader` instance[cite: 688].
    * getPatternKey (private)
        * short description: Generates JSON key string (e.g., 'boards\_A')[cite: 379, 689, 1354, 1355].
        * input / output: `pattern` (string) / `keyof RawBoardSet`[cite: 690].
    * getBoardSetByPattern (public)
        * short description: Retrieves, transforms (adds string ID), and validates boards for a pattern[cite: 380, 382, 691, 1355, 1356, 1357, 1358]. Filters invalid boards[cite: 692, 1358].
        * input / output: `pattern` (string) / `BoardPattern[]`[cite: 692].
    * getBoardById (public)
        * short description: Retrieves and validates a specific board by ID string[cite: 383, 387, 693, 1359, 1360, 1361, 1362, 1363].
        * input / output: `boardId` (string) / `BoardPattern | undefined`[cite: 694].
    * getRandomGameBoards (public)
        * short description: Selects one random board from each set (A, B, C, D)[cite: 388, 695, 1363, 1364, 1365].
        * input / output: None / `BoardPattern[]`[cite: 696].
    * debugPrintState (public)
        * short description: Logs loaded board data state for debugging[cite: 390, 697, 1365, 1366].
        * input / output: None / `void`[cite: 698].
    * validateAllBoards (public)
        * short description: Validates all loaded board patterns[cite: 392, 699, 1367, 1368, 1369, 1370, 1371].
        * input / output: None / `{ valid: boolean; errors: string[] }`[cite: 700].

### src/components/GameBoard/BoardCell.tsx

* BoardCell (Function Component - memoized) [cite: 398, 701, 1487, 1488, 1502]
    * short description: Renders a single board cell with background, walls, target, and reflector[cite: 701, 1488, 1491, 1493, 1496, 1500, 1501].
    * getWallClasses
        * short description: Determines CSS classes for cell walls[cite: 702, 1488, 1489].
        * input / output: None / `string`[cite: 703].
    * getTargetClasses
        * short description: Determines CSS classes for target styling (color/gradient/animation)[cite: 704, 1489, 1490, 1491]. Handles vortex[cite: 1490].
        * input / output: None / `string`[cite: 705].
    * getReflectorClasses
        * short description: Determines CSS classes for reflector styling[cite: 706, 1491, 1492, 1493].
        * input / output: None / `string`[cite: 707].
    * renderReflector
        * short description: Renders the reflector symbol ('／' or '＼') with layered text[cite: 708, 1493, 1494, 1495].
        * input / output: None / JSX or `null`[cite: 709].
    * renderTargetSymbol
        * short description: Renders the target symbol, handles vortex animation[cite: 710, 1496, 1497, 1498, 1499, 1500].
        * input / output: None / JSX or `null`[cite: 711].
    * input / output: Props: `cell`, `x`, `y`, `size` / JSX div[cite: 712, 1487].

### src/components/GameBoard/GameBoard.tsx

* GameBoard (Function Component - memoized) [cite: 415, 713, 1504, 1505, 1519]
    * short description: Renders the game board grid with cells and robots. Handles robot selection and move initiation (keyboard/click)[cite: 713, 714, 1502, 1503, 1504, 1505, 1512, 1513, 1514, 1515, 1516, 1518]. Manages `isMoving` state[cite: 718, 1505].
    * handleKeyDown
        * short description: Handles arrow keys for robot movement[cite: 715, 1505, 1506].
        * input / output: `e: React.KeyboardEvent` / `void`[cite: 716]. Calls `handleRobotMove`[cite: 1506, 716].
    * handleRobotMove
        * short description: Calculates path via `calculatePath`, calls `onRobotMove` prop, sets `isMoving`[cite: 717, 718, 1506, 1507, 1508, 1509].
        * input / output: `color` (RobotColor), `direction` (Direction) / `void`[cite: 718, 1506]. Calls `calculatePath`, `onRobotMove`[cite: 719, 1508].
    * handleRobotClick
        * short description: Toggles robot selection state[cite: 719, 1510, 1511].
        * input / output: `color` (RobotColor) / `void`[cite: 720]. Updates `selectedRobot` state[cite: 720, 1505].
    * input / output: Props: `board`, `isPlayerTurn`, `onRobotMove` / JSX div[cite: 721, 1504].

### src/types/game.ts

* Short description: Defines core game logic types: `Position`, `RobotColor`, `GameMode`, `Robot`, `Reflector`, `CellType`, `Cell`, `Board`, `Card`, `GamePhase`, `SinglePlayerState`, `GameState`, `Direction`[cite: 429, 430, 431, 432, 433, 434, 442, 444, 445, 446, 448, 451, 452, 722, 1627, 1628, 1629, 1630, 1631, 1632, 1640, 1641, 1642, 1643, 1644, 1646, 1647, 1649, 1650]. Also includes `MultiplayerGameState` aligned with server (using `Record`)[cite: 972, 973, 1651, 1654, 1655, 1656, 1657, 1658, 1659]. Imports `Player`[cite: 973, 1627].

### src/utils/boardGenerator.ts

* createEmptyCell
    * short description: Creates a default, empty `Cell` object[cite: 454, 723, 1561].
    * input / output: None / `Cell`[cite: 724].
* getTargetSymbol
    * short description: Converts `TargetSymbol` enum to display character using `SYMBOL_MAP`[cite: 455, 725, 1562, 1563].
    * input / output: `symbol` (TargetSymbol) / `string`[cite: 726].
* createEmptyBoard
    * short description: Creates a `Board` object of given size, filled with empty cells[cite: 456, 727, 1563].
    * input / output: `size` (number) / `Board`[cite: 728].
* placeWalls
    * short description: Modifies board by setting wall properties based on `BoardPattern`, including adjacent cells[cite: 457, 729, 730, 1564, 1565, 1566].
    * input / output: `board` (Board), `pattern` (BoardPattern) / `void`[cite: 730, 731].
* placeReflectors
    * short description: Modifies board by adding reflector properties based on `BoardPattern`[cite: 460, 731, 1567, 1568].
    * input / output: `board` (Board), `pattern` (BoardPattern) / `void`[cite: 732].
* placeTargets
    * short description: Modifies board by setting target properties based on `BoardPattern`[cite: 461, 733, 1568, 1569].
    * input / output: `board` (Board), `pattern` (BoardPattern) / `void`[cite: 734].
* isCenterArea
    * short description: Checks if coordinates are in the central 2x2 area (16x16 assumed)[cite: 462, 735, 1569, 1570].
    * input / output: `x` (number), `y` (number) / `boolean`[cite: 736].
* getRandomEmptyPosition
    * short description: Finds a random valid starting position (empty, not target, not center)[cite: 463, 737, 738, 1570, 1571, 1572, 1573, 1574].
    * input / output: `board` (Board), `occupiedPositions` (Position[]), `maxAttempts` (number) / `Position`[cite: 738].
* placeRobots
    * short description: Modifies board by adding robots at random valid positions[cite: 467, 739, 1574, 1575, 1576].
    * input / output: `board` (Board) / `void`[cite: 740].
* generateBoardFromPattern
    * short description: Creates a complete `Board` from a `BoardPattern` by placing walls, reflectors, targets, and robots[cite: 469, 741, 1576, 1577].
    * input / output: `pattern` (BoardPattern) / `Board`[cite: 742].

### src/hooks/useGameState.ts

* useGameState (Custom Hook) [cite: 474, 743, 1718]
    * short description: Manages single-player game state (board, card, phase, score, moves, declarations, timers) and provides interaction functions[cite: 743, 744, 745, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1753]. Handles goal checks and animations[cite: 745, 1729, 1731].
    * declareMoves
        * short description: Updates declared moves and max declared moves state[cite: 489, 491, 746, 747, 1736, 1737, 1738, 1739].
        * input / output: `moves` (number) / `void`[cite: 747].
    * checkGoal
        * short description: Checks if the moved robot reached the current target[cite: 492, 495, 748, 1739, 1740, 1741, 1742]. Includes debug logs[cite: 1739].
        * input / output: `robot` (Robot) / `boolean`[cite: 749].
    * drawNextCard
        * short description: Draws next card, updates state, transitions phase to 'declaration' or 'finished'[cite: 495, 496, 497, 750, 751, 1742, 1743, 1744, 1745].
        * input / output: None / `Card | null`[cite: 751, 752].
    * moveRobot
        * short description: Initiates robot move, calculates path, updates state (moves, history, score, phase), triggers animation[cite: 498, 499, 500, 501, 502, 752, 753, 754, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752].
        * input / output: `robotColor` (RobotColor), `direction` (Direction) / `void`[cite: 754, 1745]. Updates `gameState`, `movingRobot`[cite: 755].
    * input / output: `mode` ('single' | 'multi') / `{ gameState, moveRobot, declareMoves, drawNextCard, remainingCards, totalCards }`[cite: 755, 756].

### server/coverage/lcov-report/base.css

* Short description: Base CSS for the LCOV code coverage report[cite: 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 757].

### server/coverage/lcov-report/block-navigation.js

* short description: Keyboard navigation for LCOV report[cite: 55, 56, 66, 759].
* init (IIFE)
    * short description: Initializes navigation[cite: 760, 761].
    * input / output: None / `jump` function[cite: 761].
* toggleClass
    * short description: Toggles 'highlighted' class[cite: 57, 58, 762].
    * input / output: `index` / `void`[cite: 57, 763].
* makeCurrent
    * short description: Highlights and scrolls to element[cite: 59, 60, 764].
    * input / output: `index` / `void`[cite: 59, 765].
* goToPrevious
    * short description: Jumps to previous element[cite: 61, 62, 63, 766].
    * input / output: None / `void`[cite: 61, 767].
* goToNext
    * short description: Jumps to next element[cite: 64, 65, 768].
    * input / output: None / `void`[cite: 64, 769].
* jump
    * short description: Keydown handler for navigation[cite: 66, 67, 68, 770].
    * input / output: `event` / `void`[cite: 66, 771].

### server/coverage/lcov-report/index.html

* Short description: Main HTML for LCOV coverage report summary table[cite: 291, 292, 293, 294, 295, 297, 298, 299, 300, 772, 773, 774, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258].

### server/coverage/lcov-report/prettify.css

* Short description: CSS for syntax highlighting in LCOV report[cite: 69, 775, 776].

### server/coverage/lcov-report/prettify.js

* Short description: Google Code Prettify library for LCOV syntax highlighting[cite: 69, 70, 71, 777, 778].

### server/coverage/lcov-report/roomManager.ts.html

* Short description: HTML coverage report for `server/src/services/roomManager.ts`[cite: 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 112, 113, 779, 780, 781].

### server/coverage/lcov-report/sorter.js

* Short description: JavaScript for sorting and filtering the LCOV coverage summary table[cite: 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 782].

### server/coverage/clover.xml

* Short description: Code coverage results in Clover XML format[cite: 388, 389, 390, 391, 392, 783, 784, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283].

### server/coverage/coverage-final.json

* Short description: Raw Istanbul coverage data in JSON format[cite: 785, 786, 1160].

### server/coverage/lcov.info

* Short description: Code coverage data in LCOV text format[cite: 787, 788, 1160].

### server/src/services/__tests__/roomManager.test.ts

* Short description: Jest unit tests for server-side `RoomManager`[cite: 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 789, 790].

### server/src/services/roomManager.ts

* RoomManager (Class) [cite: 378, 592, 923]
    * (See previous entry for detailed function descriptions)

### server/src/types/player.ts

* Short description: Server-side TypeScript types for players[cite: 253, 254, 806, 916, 917].

### server/src/types/room.ts

* Short description: Server-side TypeScript types for rooms[cite: 255, 256, 257, 258, 259, 260, 807, 958, 959, 960, 961].

### server/src/server.ts

* Short description: Main entry point for the Node.js WebSocket server (Socket.IO)[cite: 403, 404, 808]. Sets up Express, Socket.IO, RoomManager, session tracking, logging (Winston), and event handlers[cite: 405, 406, 407, 408, 409, 410, 809, 810, 811]. Emits initial room list[cite: 950, 951].
* Event Handlers:
    * connection: Logs connection, sets up listeners, emits initial room list[cite: 410, 812, 950, 951].
    * register: Creates player, stores session, emits 'registered'[cite: 411, 813, 917]. Retrieves Player from session map[cite: 918].
    * createRoom: Uses `RoomManager`, joins socket, emits 'roomCreated', updates list[cite: 414, 415, 814, 918, 919, 920]. Retrieves Player from session map[cite: 918].
    * joinRoom: Uses `RoomManager`, joins socket, notifies room, emits 'roomJoined', updates list[cite: 417, 418, 815, 921, 922, 923]. Retrieves Player from session map[cite: 921].
    * leaveRoom: Uses `RoomManager`, leaves socket, notifies room, updates list[cite: 419, 816].
    * disconnect: Updates player status via `RoomManager`, notifies room, removes session[cite: 420, 421, 817].
    * ping: Updates `lastConnected`, emits 'pong'[cite: 422, 818].
    * startGame: Verifies host, calls `gameManager.startGame`, emits 'gameStarted'[cite: 965, 966, 967].

### src/components/room/CreateRoomForm.tsx

* CreateRoomForm (Function Component)
    * (See previous entry for detailed descriptions)

### src/components/room/RoomList.tsx

* RoomList (Function Component)
    * (See previous entry for detailed descriptions)

### src/services/__tests__/socketService.test.ts

* Short description: Vitest unit tests for `SocketService`[cite: 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 841, 842].

### src/services/socketService.ts

* SocketService (Class - Singleton) [cite: 495, 843, 1519, 1520, 1521, 1522, 1523, 1524, 1525, 1560]
    * getInstance (static public)
        * short description: Provides singleton access[cite: 497, 844, 1525].
        * input / output: None / `SocketService` instance[cite: 844].
    * connect
        * short description: Establishes WebSocket connection, handles events, retries. Returns socket ID[cite: 498, 499, 845, 846, 847, 937, 1525, 1526, 1527, 1528, 1529, 1530, 1531].
        * input / output: None / `Promise<string>`[cite: 847, 938].
    * disconnect
        * short description: Disconnects socket, clears reference[cite: 500, 501, 848, 1531, 1532].
        * input / output: None / `void`[cite: 849].
    * emit (private helper)
        * short description: Helper to emit events if connected[cite: 1532, 1533, 1534].
        * input / output: `event`, `...args` / `void`.
    * registerPlayer
        * short description: Emits 'register' event[cite: 502, 849, 1534, 1535].
        * input / output: `name: string` / `void`[cite: 850].
    * createRoom
        * short description: Emits 'createRoom' event and returns Promise for the created room with timeout[cite: 503, 850, 1535, 1536, 1537, 1538].
        * input / output: `options: { name: string; password?: string }` / `Promise<Room>`[cite: 851, 1535].
    * joinRoom
        * short description: Emits 'joinRoom' event[cite: 504, 852, 1538, 1539].
        * input / output: `roomId: string`, `password?: string` / `void`[cite: 853].
    * leaveRoom
        * short description: Emits 'leaveRoom' event[cite: 505, 854, 1539, 1540].
        * input / output: `roomId: string` / `void`[cite: 855].
    * getAvailableRooms
        * short description: Emits 'getAvailableRooms' event[cite: 1540, 1541].
        * input / output: None / `void`.
    * startGame
        * short description: Emits 'startGame' event[cite: 888, 1541, 1542].
        * input / output: `roomId: string` / `void`.
    * declareMoves
        * short description: Emits 'declareMoves' event[cite: 888, 1542, 1543].
        * input / output: `roomId: string`, `moves: number` / `void`.
    * moveRobot
        * short description: Emits 'moveRobot' event[cite: 888, 1543, 1544].
        * input / output: `roomId: string`, `robotColor: RobotColor`, `path: Position[]` / `void`.
    * registerEventListener (private helper)
        * short description: Registers a callback for a server event, removing existing listener first[cite: 1544, 1545, 1546].
        * input / output: `event`, `callback` / `void`.
    * onRegistered / onRoomCreated / onRoomJoined / onRoomLeft / onRoomUpdated / onRoomListUpdated / onError / onGameStarted / onGameStateUpdated / onDeclarationMade / onTurnChanged / onSolutionAttemptResult / onGameOver
        * short description: Methods to register callbacks for specific server events[cite: 506, 507, 508, 509, 510, 511, 855, 856, 889, 954, 955, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559]. `onRoomListUpdated` replaces `onAvailableRoomsUpdated`[cite: 954, 955].
        * input / output: `callback: (data: any) => void` / `void`[cite: 856].
    * removeAllListeners
        * short description: Removes all registered event listeners[cite: 512, 857, 1559, 1560].
        * input / output: None / `void`[cite: 858].

### src/stores/gameStore.ts

* useGameStore (Zustand Hook/Store)
    * short description: Manages global client state (connection, player, room, game list, multiplayer game state) using Zustand[cite: 513, 517, 858, 862, 1663, 1664, 1665]. Provides actions interacting with `SocketService`[cite: 860, 863, 1670, 1671, 1672, 1673, 1674, 1675]. Handles socket events to update state[cite: 861, 927, 929, 931, 956, 957, 1676, 1677, 1678, 1679, 1680, 1683, 1685, 1686, 1687, 1690, 1691, 1692]. Includes `isMultiplayerGameState` type guard[cite: 930, 932, 933, 1665, 1666, 1667]. Stores `socketId`[cite: 938, 939, 940, 941, 942, 1668, 1669].
    * State: `isConnected`, `isConnecting`, `connectionError`, `currentPlayer`, `currentRoom`, `availableRooms`, `socketId`, `game`[cite: 859, 862, 939, 1667, 1668, 1669, 1670].
    * Actions: `connect`[cite: 940, 956, 1675, 1676], `disconnect`[cite: 941, 942, 1676], `registerPlayer`[cite: 1676, 1697], `createRoom`[cite: 1671, 1697, 1698, 1699, 1700, 1701, 1702], `joinRoom`[cite: 1702, 1703], `leaveRoom`[cite: 1703, 1704, 1705], `setConnectionError`[cite: 1705, 1706], `startGame`[cite: 947, 948, 1706, 1707, 1708, 1709], `declareMoves`[cite: 1709, 1710, 1711, 1712, 1713], `moveRobot`[cite: 1713, 1714, 1715, 1716, 1717].

### src/types/player.ts

* Short description: Client-side TypeScript types for players[cite: 217, 218, 219, 863, 864].

### src/types/room.ts

* Short description: Client-side TypeScript types for rooms[cite: 219, 220, 221, 222, 223, 224, 225, 864, 865].

### src/types/socket.ts

* Short description: Defines TypeScript interfaces for Socket.IO events (`ServerToClientEvents`, `ClientToServerEvents`) and `GameSocket` type[cite: 540, 541, 542, 543, 865, 866, 867, 952, 953, 976, 977, 1519, 1520, 1521, 1522, 1523, 1609, 1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1626]. Includes game-related events[cite: 886]. `roomListUpdated` replaces `availableRoomsUpdated`[cite: 952, 953].

### src/hooks/useGameState.ts

* useGameState (Custom Hook) [cite: 474, 743, 1718]
    * (See previous entry for detailed descriptions)

================================================================
End of Codebase
================================================================

---
file name: server/src/types/player.ts
classname: Player (Interface)
property name: lastConnected
short description: Added property to track the last time the player's socket was active. Replaces the need for a separate PlayerSession interface.
input / output: type: Date

---
file name: server/src/server.ts
function name: (event handler) 'createRoom'
short description: Modified to retrieve the existing Player object from the sessions map (created during 'register' event) instead of creating a new one. Sets the retrieved player's isHost and roomId properties before passing it to roomManager.createRoom.
input / output: Uses socket ID to get Player from sessions map. Calls roomManager.createRoom with the retrieved Player. Emits 'roomCreated' with the Room object.

---
file name: server/src/server.ts
function name: (event handler) 'joinRoom'
short description: Modified to retrieve the existing Player object from the sessions map. Passes the retrieved Player object to roomManager.joinRoom. Updates the player's roomId upon successful join.
input / output: Uses socket ID to get Player from sessions map. Calls roomManager.joinRoom with the retrieved Player. Emits 'playerJoined' with the Player object.

---
file name: server/src/services/roomManager.ts
classname: RoomManager
function name: joinRoom
short description: Modified the first parameter to accept a Player object instead of just a playerId string. Updates the passed Player object's roomId, isHost, connected, and lastConnected properties upon successful join.
input / output: Takes `player: Player`, `roomId: string`, `password?: string`. Returns `boolean`. Modifies the input `player` object and the room's `players` map.
---
file name: src/stores/gameStore.ts
function name: (event handler) 'onRoomJoined'
short description: Modified to update 'currentPlayer' based on the joined room's player list and reset 'game' state to null upon joining a room.
input / output: Takes 'room: Room'. Updates 'currentRoom', 'game', and 'currentPlayer' state.

---
file name: src/stores/gameStore.ts
function name: (event handler) 'onRoomUpdated'
short description: Modified to update 'currentPlayer' based on the updated room's player list. Added a type guard 'isMultiplayerGameState' to safely update the 'game' state using 'room.gameState' only if it conforms to the 'MultiplayerGameState' interface.
input / output: Takes 'room: Room'. Updates 'currentRoom', 'game', and 'currentPlayer' state.

---
file name: src/stores/gameStore.ts
function name: isMultiplayerGameState (Type Guard)
short description: Added a type guard function to check if a given state object has all the necessary properties of the 'MultiplayerGameState' interface. Used within 'onRoomUpdated' handler for safer type assertion.
input / output: Takes 'state: any'. Returns 'boolean' (true if state is MultiplayerGameState).
---
file name: src/components/room/CreateRoomForm.tsx
classname: CreateRoomForm (Function Component)
function name: (Component Logic & JSX)
short description: Modified to prevent room creation before player registration is confirmed. Fetches 'currentPlayer' from useGameStore. Disables the submit button and displays "プレイヤー情報登録中..." if 'currentPlayer' is null.
input / output: Uses 'currentPlayer' from useGameStore state to control button 'disabled' state and text. Calls 'createRoom' action only when enabled.
---
file name: src/services/socketService.ts
classname: SocketService
function name: connect
short description: Modified to return a Promise resolving with the socket ID upon successful connection.
input / output: Takes no input. Returns `Promise<string>`.

---
file name: src/stores/gameStore.ts
classname: GameStore (Interface)
property name: socketId
short description: Added optional `socketId` state to store the current socket connection ID.
input / output: type: string | null

---
file name: src/stores/gameStore.ts
classname: useGameStore (Zustand Hook/Store)
function name: connect (Action)
short description: Modified to await the socket ID from `socketService.connect` and store it in the `socketId` state. Also resets `socketId` on initiation and error.
input / output: Takes no input. Returns `Promise<void>`. Updates `isConnected`, `isConnecting`, `connectionError`, `socketId` state.

---
file name: src/stores/gameStore.ts
classname: useGameStore (Zustand Hook/Store)
function name: disconnect (Action)
short description: Modified to reset the `socketId` state to null upon disconnection.
input / output: Takes no input. Returns `void`. Updates `isConnected`, `currentPlayer`, `currentRoom`, `availableRooms`, `game`, `socketId` state.

---
file name: src/pages/CreateRoomPage.tsx
classname: CreateRoomPage (Function Component)
function name: (useEffect hook for player registration)
short description: Modified the condition to trigger player registration (`registerPlayer`) to also check for the presence of `socketId` in the `gameStore` state, ensuring registration only happens after a successful connection with an ID. Added `socketId` to the dependency array.
input / output: Uses `isConnected`, `socketId`, `currentPlayer`, `isConnecting` from `useGameStore`. Calls `registerPlayer`.

---
file name: src/pages/JoinRoomPage.tsx
classname: JoinRoomPage (Function Component)
function name: (useEffect hook for player registration)
short description: Modified the condition to trigger player registration (`registerPlayer`) to also check for the presence of `socketId` in the `gameStore` state, ensuring registration only happens after a successful connection with an ID. Added `socketId` to the dependency array.
input / output: Uses `isConnected`, `socketId`, `currentPlayer`, `isConnecting` from `useGameStore`. Calls `registerPlayer`.
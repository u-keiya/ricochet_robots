<![CDATA[
---
file name: server/src/types/game.ts
classname: MultiplayerGameState (Interface)
property name: declarationOrder?
short description: Optional array of player IDs representing the order in which players are eligible to present their solution, sorted by declared moves and timestamp.
input / output: type: string[] | undefined

---
file name: server/src/services/gameManager.ts
classname: GameManager
function name: endDeclarationPhase (private)
short description: Modified to sort valid declarations by moves (asc) then timestamp (asc), store the resulting player order in `gameState.declarationOrder`, and set the first player in the order as the `currentPlayer` to start the solution phase. If no valid declarations, proceeds to draw the next card.
input / output: Takes no input. Returns `void`. Modifies `gameState.phase`, `gameState.declarationOrder`, `gameState.currentPlayer`. Calls `startSolutionPhase()` or `drawNextCard()`.

---
file name: server/src/services/gameManager.ts
classname: GameManager
function name: failCurrentSolution (private)
short description: Modified to remove the current player from `gameState.declarationOrder`. If players remain in the order, sets the next player as `currentPlayer` and starts their solution phase. Otherwise, draws the next card.
input / output: Takes no input. Returns `void`. Modifies `gameState.declarationOrder`, `gameState.currentPlayer`. Calls `startSolutionPhase()` or `drawNextCard()`.

---
file name: server/src/services/gameManager.ts
classname: GameManager
function name: moveToNextPlayer (private)
short description: Removed. Logic is now handled within `failCurrentSolution`.
input / output: N/A
]]>
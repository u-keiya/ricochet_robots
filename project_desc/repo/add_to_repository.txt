- file name: src/components/PlayerNameInput.tsx
    - classname: N/A (Function Component)
    - function name: PlayerNameInput
    - short description: Component for inputting and registering a player name. Handles input, loading state, and basic error display. Uses useGameStore for registration.
    - input / output: Props: `onRegistered?: () => void` / JSX
    
    - file name: src/pages/CreateRoomPage.tsx
    - classname: N/A (Function Component)
    - function name: CreateRoomPage
    - short description: Page for creating a game room. Modified to display PlayerNameInput component if the player is not yet registered, before showing the room creation form. Removed automatic player registration logic.
    - input / output: None / JSX
    
    - file name: src/pages/JoinRoomPage.tsx
    - classname: N/A (Function Component)
    - function name: JoinRoomPage
    - short description: Page for joining an existing game room. Modified to display PlayerNameInput component if the player is not yet registered, before showing the room list. Removed automatic player registration logic.
    - input / output: None / JSX
    
    - file name: server/src/types/game.ts
    - classname: N/A (Interface)
    - function name: MultiplayerGameState
    - short description: Added `playersInfo: Record<string, { name: string }>` property to include player names in the game state sent to clients.
    - input / output: N/A
    
    - file name: server/src/services/gameManager.ts
    - classname: GameManager
    - function name: initializeGameState, startGame
    - short description: Modified to populate the new `playersInfo` property in the `MultiplayerGameState`.
    - input / output: N/A
    
    - file name: src/services/socketService.ts
    - classname: SocketService
    - function name: registerPlayer
    - short description: Changed the payload sent for the 'register' event from a string `name` to an object `{ name }` to match server expectations.
    - input / output: `name: string` / `void`
    
    - file name: src/types/socket.ts
    - classname: N/A (Interface)
    - function name: ClientToServerEvents
    - short description: Updated the type definition for the 'register' event to expect a payload of type `{ name: string }` instead of just `string`.
    - input / output: N/A
   
    - file name: src/pages/GamePage.tsx
    - classname: N/A (Function Component)
    - function name: GamePage, MovingRobotInfo (interface)
    - short description: Modified robot animation logic to follow the calculated path smoothly segment by segment using requestAnimationFrame and linear interpolation. Stored the calculated path in the component's state (`movingRobots`) when a move is initiated. Adjusted animation timing based on segment duration. Refactored useEffect hooks related to game state changes and animation triggering.
    - input / output: N/A
  
   - file name: server/src/services/gameManager.ts
    - classname: GameManager
    - function name: proceedToNextRound, endGame
    - short description: Modified to reset robot positions to their initial state when proceeding to the next round or ending the game.
    - input / output: N/A
  
  - file name: server/src/services/gameManager.ts
    - classname: GameManager
    - function name: successCurrentSolution, failCurrentSolution, handleDrawCard, proceedToNextRound
    - short description: Modified game flow to transition to WAITING phase after a solution attempt (success or failure) instead of automatically proceeding to the next round. The next round now starts explicitly when a player requests to draw a card in the WAITING phase.
    - input / output: N/A
  
  - file name: src/components/GameInfo.tsx
    - classname: N/A (Function Component)
    - function name: GameInfo
    - short description: Removed the duplicate "draw card" button. This button is now handled solely within the GamePage's control area.
    - input / output: N/A
  
  - file name: src/pages/GamePage.tsx
    - classname: N/A (Function Component)
    - function name: GamePage
    - short description: Changed the style of the "draw card" button in the control area to use the primary color (blue) when it is clickable (active).
    - input / output: N/A
  
  - file name: src/components/DeclarationCard.tsx
    - classname: N/A (Function Component)
    - function name: DeclarationCardList
    - short description: Modified the arrow buttons to allow scrolling even after a declaration is made. Removed the `isDisabled` check from the arrow button's `disabled` attribute and CSS classes to ensure they remain functional and visually appropriate regardless of the overall list's disabled state.
    - input / output: N/A
 
  - file name: server/src/services/gameManager.ts
    - classname: GameManager
    - function name: constructor, initializeGameState, generateRandomRobotPositions, isTargetPosition, startGame, successCurrentSolution, failCurrentSolution, proceedToNextRound, endGame
    - short description: (Issue #79) Changed robot initial positions to be generated randomly once at game start, avoiding center area, other robots, and target positions. Reset positions to these initial values during phase/round transitions.
    - input / output: N/A
 
  - file name: server/src/services/gameManager.ts
    - classname: GameManager
    - function name: failCurrentSolution
    - short description: (Issue #78) Fixed an issue where robot positions were not reset to initial state when the turn passed to the next player after a failed solution attempt.
    - input / output: N/A
 
  - file name: server/src/server.ts
    - classname: N/A
    - function name: Event handlers for 'joinRoom', 'leaveRoom', 'disconnect'
    - short description: (Issue #77) Refactored player list updates. Instead of sending individual events ('playerJoined', 'playerLeft', 'playerDisconnected'), now sends the complete updated player list via a 'playerListUpdated' event to all clients in the room whenever the list changes.
    - input / output: N/A

- file name: src/types/socket.ts
  - classname: N/A (Interface)
  - function name: ServerToClientEvents
  - short description: (Issue #77) Updated `playerListUpdated` event payload type to `{ players: Player[] }` to match the actual server data format.
  - input / output: N/A

- file name: src/services/socketService.ts
  - classname: SocketService
  - function name: onPlayerListUpdated
  - short description: (Issue #77) Updated the callback type for `onPlayerListUpdated` method to accept `{ players: Player[] }`.
  - input / output: `callback: (payload: { players: Player[] }) => void` / `void`

- file name: src/stores/gameStore.ts
  - classname: N/A (Zustand Hook/Store)
  - function name: connect (action), onGameStateUpdated callback
  - short description: (Issue #77) Updated the `onPlayerListUpdated` listener callback to correctly handle the `{ players: Player[] }` payload, convert it to a map for `currentRoom.players`, and update `currentPlayer`. Removed player-related update logic from the `onGameStateUpdated` callback to centralize updates.
  - input / output: N/A

- file name: src/pages/GamePage.tsx
  - classname: N/A (Function Component)
  - function name: GamePage (playersArray creation logic)
  - short description: (Issue #77 Fix) Modified the logic for creating `playersArray` to generate the list from `currentRoom.players` even when `game.playersInfo` is not yet available (before game start), ensuring the player list is visible upon joining the room.
  - input / output: N/A
---
file name: server/src/utils/boardGenerator.ts
function name: extractTargetPositions
short description: Extracts target positions from a generated Board object and returns them as a Map.
input / output: input: Board object, output: Map<string, Position> (key: 'symbol-color' or 'symbol-null')

---
file name: server/src/utils/boardLoader.ts
function name: getBoardPatternsByIds
short description: Retrieves an array of BoardPattern objects corresponding to the provided array of board IDs.
input / output: input: string[] (array of board IDs like "board_A1"), output: BoardPattern[]
---
file name: src/pages/GamePage.tsx
classname: N/A (Function Component)
function name: GamePage
short description: (Issue #87) Modified the display condition for the "Draw Card" button. It is now displayed only for the host player when the game phase is 'waiting', ensuring only the host can initiate the next round.
input / output: N/A
---
file name: src/components/GameInfo.tsx
classname: N/A (Function Component)
function name: GameInfo
short description: (Issue #90) Changed the background style of the Vortex card in the sidebar to match the style used on the game board (gradient + pulse animation) for better visibility and consistency. Updated the condition to check for `currentCard.color === null` based on server-side type definition.
input / output: N/A
---
file name: src/pages/GamePage.tsx
classname: N/A (Function Component)
function name: GamePage
short description: (Issue #91) Changed the header display on the game page to show the room name (`currentRoom.name`) instead of the room ID.
input / output: N/A
---
file name: src/pages/SinglePlayerPage.tsx, src/components/DeclarationCard.tsx, src/hooks/useGameState.ts
classname: N/A (Function Components and Hook)
function name: SinglePlayerPage, DeclarationCardList, useGameState, checkGoal, moveRobot
short description: (Issue #93) Resolved multiple issues in single-player mode:
- Fixed page rendering by passing correct props (`scores`, `players`) to `GameInfo`.
- Added the missing "Draw Card" button.
- Fixed `DeclarationCardList` logic to allow clicking cards when `declaredMoves` is 0.
- Implemented smooth robot movement animation using `requestAnimationFrame`.
- Corrected game phase transitions and move count logic to enforce declared move limits.
- Fixed score calculation logic to correctly award points on successful goal completion.
- Corrected `checkGoal` function to compare target symbols correctly using `SYMBOL_MAP`.
input / output: N/A
---
file name: server/src/services/gameManager.ts
classname: GameManager
function name: resetGame
short description: Resets the game state for a new round within the same room. Generates new initial robot positions, creates a new card deck, resets player scores, and sets the game phase to WAITING. Emits the updated game state.
input / output: input: None / output: void

---
file name: server/src/server.ts
classname: N/A
function name: 'resetGame' event handler
short description: Handles the 'resetGame' event from the client (host only). Calls the `resetGame` method on the corresponding GameManager instance to start a new game in the room.
input / output: input: { roomId: string } / output: Emits 'gameStateUpdated' via GameManager, or 'error' on failure.
---
file name: server/src/types/player.ts
classname: Player (Interface)
property name: lastConnected
short description: Added property to track the last time the player's socket was active. Replaces the need for a separate PlayerSession interface.
input / output: type: Date

---
file name: server/src/server.ts
function name: (event handler) 'createRoom'
short description: Modified to retrieve the existing Player object from the sessions map (created during 'register' event) instead of creating a new one. Sets the retrieved player's isHost and roomId properties before passing it to roomManager.createRoom.
input / output: Uses socket ID to get Player from sessions map. Calls roomManager.createRoom with the retrieved Player. Emits 'roomCreated' with the Room object.

---
file name: server/src/server.ts
function name: (event handler) 'joinRoom'
short description: Modified to retrieve the existing Player object from the sessions map. Passes the retrieved Player object to roomManager.joinRoom. Updates the player's roomId upon successful join.
input / output: Uses socket ID to get Player from sessions map. Calls roomManager.joinRoom with the retrieved Player. Emits 'playerJoined' with the Player object.

---
file name: server/src/services/roomManager.ts
classname: RoomManager
function name: joinRoom
short description: Modified the first parameter to accept a Player object instead of just a playerId string. Updates the passed Player object's roomId, isHost, connected, and lastConnected properties upon successful join.
input / output: Takes `player: Player`, `roomId: string`, `password?: string`. Returns `boolean`. Modifies the input `player` object and the room's `players` map.
---
file name: src/stores/gameStore.ts
function name: (event handler) 'onRoomJoined'
short description: Modified to update 'currentPlayer' based on the joined room's player list and reset 'game' state to null upon joining a room.
input / output: Takes 'room: Room'. Updates 'currentRoom', 'game', and 'currentPlayer' state.

---
file name: src/stores/gameStore.ts
function name: (event handler) 'onRoomUpdated'
short description: Modified to update 'currentPlayer' based on the updated room's player list. Added a type guard 'isMultiplayerGameState' to safely update the 'game' state using 'room.gameState' only if it conforms to the 'MultiplayerGameState' interface.
input / output: Takes 'room: Room'. Updates 'currentRoom', 'game', and 'currentPlayer' state.

---
file name: src/stores/gameStore.ts
function name: isMultiplayerGameState (Type Guard)
short description: Added a type guard function to check if a given state object has all the necessary properties of the 'MultiplayerGameState' interface. Used within 'onRoomUpdated' handler for safer type assertion.
input / output: Takes 'state: any'. Returns 'boolean' (true if state is MultiplayerGameState).
---
file name: src/components/room/CreateRoomForm.tsx
classname: CreateRoomForm (Function Component)
function name: (Component Logic & JSX)
short description: Modified to prevent room creation before player registration is confirmed. Fetches 'currentPlayer' from useGameStore. Disables the submit button and displays "プレイヤー情報登録中..." if 'currentPlayer' is null.
input / output: Uses 'currentPlayer' from useGameStore state to control button 'disabled' state and text. Calls 'createRoom' action only when enabled.
---
file name: src/services/socketService.ts
classname: SocketService
function name: connect
short description: Modified to return a Promise resolving with the socket ID upon successful connection.
input / output: Takes no input. Returns `Promise<string>`.

---
file name: src/stores/gameStore.ts
classname: GameStore (Interface)
property name: socketId
short description: Added optional `socketId` state to store the current socket connection ID.
input / output: type: string | null

---
file name: src/stores/gameStore.ts
classname: useGameStore (Zustand Hook/Store)
function name: connect (Action)
short description: Modified to await the socket ID from `socketService.connect` and store it in the `socketId` state. Also resets `socketId` on initiation and error.
input / output: Takes no input. Returns `Promise<void>`. Updates `isConnected`, `isConnecting`, `connectionError`, `socketId` state.

---
file name: src/stores/gameStore.ts
classname: useGameStore (Zustand Hook/Store)
function name: disconnect (Action)
short description: Modified to reset the `socketId` state to null upon disconnection.
input / output: Takes no input. Returns `void`. Updates `isConnected`, `currentPlayer`, `currentRoom`, `availableRooms`, `game`, `socketId` state.

---
file name: src/pages/CreateRoomPage.tsx
classname: CreateRoomPage (Function Component)
function name: (useEffect hook for player registration)
short description: Modified the condition to trigger player registration (`registerPlayer`) to also check for the presence of `socketId` in the `gameStore` state, ensuring registration only happens after a successful connection with an ID. Added `socketId` to the dependency array.
input / output: Uses `isConnected`, `socketId`, `currentPlayer`, `isConnecting` from `useGameStore`. Calls `registerPlayer`.

---
file name: src/pages/JoinRoomPage.tsx
classname: JoinRoomPage (Function Component)
function name: (useEffect hook for player registration)
short description: Modified the condition to trigger player registration (`registerPlayer`) to also check for the presence of `socketId` in the `gameStore` state, ensuring registration only happens after a successful connection with an ID. Added `socketId` to the dependency array.
input / output: Uses `isConnected`, `socketId`, `currentPlayer`, `isConnecting` from `useGameStore`. Calls `registerPlayer`.
---
file name: src/stores/gameStore.ts
classname: useGameStore (Zustand Hook/Store)
function name: startGame (Action)
short description: Uncommented the call to `socketService.startGame` to ensure the 'startGame' event is emitted to the server when the action is called.
input / output: Takes no input. Calls `socketService.startGame` with `currentRoom.id`.
---
file name: server/src/server.ts
function name: (event handler) 'connection'
short description: Modified to emit the 'roomListUpdated' event with the current room summaries to the newly connected client. This ensures the client receives the initial room list upon connecting.
input / output: Emits 'roomListUpdated' event with `RoomSummary[]` payload to the connecting socket.

---
file name: src/types/socket.ts
classname: ServerToClientEvents (Interface)
property name: roomListUpdated
short description: Renamed the 'availableRoomsUpdated' event to 'roomListUpdated' for consistency with the server-side event name.
input / output: Event name changed from 'availableRoomsUpdated' to 'roomListUpdated'. Payload remains `RoomSummary[]`.

---
file name: src/services/socketService.ts
classname: SocketService
function name: onRoomListUpdated
short description: Renamed the 'onAvailableRoomsUpdated' method to 'onRoomListUpdated' and updated the registered event listener to listen for 'roomListUpdated' instead of 'availableRoomsUpdated'.
input / output: Method name changed. Listens for 'roomListUpdated' event.

---
file name: src/stores/gameStore.ts
classname: useGameStore (Zustand Hook/Store)
function name: connect (Action)
short description: Modified the event listener registration within the connect action to use `socketService.onRoomListUpdated` instead of `socketService.onAvailableRoomsUpdated`.
input / output: Calls `onRoomListUpdated` to register the listener for room list updates.
---
file name: server/src/types/room.ts
classname: Room (Interface)
property name: gameManager
short description: Added a mandatory 'gameManager' property to hold the GameManager instance responsible for the room's game logic. Replaced the previous simple 'gameState' property.
input / output: type: GameManager

---
file name: server/src/types/room.ts
classname: (Removed) GameState, GameStatus
short description: Removed the outdated 'GameState' interface and 'GameStatus' type as game state is now managed by 'GameManager' and represented by 'MultiplayerGameState'.
input / output: N/A

---
file name: server/src/types/room.ts
classname: RoomSummary (Interface)
property name: status
short description: Changed the type of the 'status' property from the removed 'GameStatus' to 'GamePhase' (imported from '../types/game') to align with the 'MultiplayerGameState'.
input / output: type: GamePhase

---
file name: server/src/services/roomManager.ts
classname: RoomManager
function name: createRoom
short description: Modified to instantiate a 'GameManager' upon room creation. The 'GameManager' instance is stored in the 'room.gameManager' property, and the initial game state from the manager is stored in 'room.gameState'.
input / output: Instantiates GameManager, sets room.gameManager and room.gameState.

---
file name: server/src/services/roomManager.ts
classname: RoomManager
function name: getRoomSummaries
short description: Modified to retrieve the game status from 'room.gameState?.phase' instead of the removed 'room.gameState.status'. Added a nullish coalescing operator to default to 'GamePhase.WAITING' if gameState is null.
input / output: Reads 'room.gameState.phase', returns 'GamePhase'.

---
file name: server/src/server.ts
function name: (event handler) 'startGame'
short description: Implemented the 'startGame' event handler. It retrieves the player and room, verifies host privileges, calls 'room.gameManager.startGame()', retrieves the initial game state, and emits the 'gameStarted' event to all clients in the room. Includes error handling.
input / output: Receives '{ roomId }'. Calls 'gameManager.startGame()'. Emits 'gameStarted' with 'MultiplayerGameState'. Emits 'error' on failure.

---
file name: server/src/services/gameManager.ts
classname: GameManager
function name: getGameState
short description: Modified to return a plain object copy of the game state, ensuring Maps are not directly exposed for serialization. Internal logic now uses Record instead of Map.
input / output: Returns `MultiplayerGameState` (with Records).

---
file name: server/src/types/game.ts
classname: MultiplayerGameState (Interface)
property name: declarations, playerStates, robotPositions
short description: Changed type from Map<...> to Record<...> to ensure proper serialization over Socket.IO.
input / output: type: Record<string, Declaration>, Record<string, PlayerGameState>, Record<RobotColor, Position>

---
file name: server/src/services/gameManager.ts
classname: GameManager
function name: (various methods) initializeGameState, startDeclarationPhase, declareMoves, endDeclarationPhase, moveRobot, successCurrentSolution, failCurrentSolution, endGame
short description: Modified internal logic to use plain object operations (Record) instead of Map methods (.set, .get, .clear, .values, .entries) for declarations, playerStates, and robotPositions properties.
input / output: N/A (Internal logic change)

---
file name: src/types/game.ts
classname: MultiplayerGameState (Interface)
function name: (definition)
short description: Added MultiplayerGameState interface definition consistent with the server-side type (using Record instead of Map) to ensure correct client-side type checking and state management. Imported Player type.
input / output: N/A (Type definition added)

---
file name: src/stores/gameStore.ts
classname: useGameStore (Zustand Hook/Store)
function name: (module scope & onDeclarationMade handler)
short description: Removed duplicate internal definitions of MultiplayerGameState and Declaration. Updated the onDeclarationMade event handler to correctly process the declarations data received as a Record<string, Declaration> from the server.
input / output: N/A (Refactoring and handler logic update)

---
file name: src/services/socketService.ts
classname: SocketService
function name: (import statement)
short description: Corrected the import path for MultiplayerGameState to import from '../types/game' instead of '../stores/gameStore'.
input / output: N/A (Import path correction)

---
file name: src/types/socket.ts
classname: (module scope)
function name: (import statement)
short description: Corrected the import path for MultiplayerGameState to import from './game' instead of '../stores/gameStore'.
input / output: N/A (Import path correction)
<![CDATA[================================================================
Added Files
================================================================

### server/src/types/game.ts

* Short description: Defines TypeScript types for multiplayer game state management.
* Key types:
  - GamePhase: Enum for game phases (waiting, declaration, solution, finished)
  - Position: Interface for robot positions (x, y coordinates)
  - RobotColor: Enum for robot colors (red, blue, green, yellow)
  - Card: Interface for game cards (color, symbol, position)
  - Declaration: Interface for move declarations
  - PlayerGameState: Interface for player-specific game state
  - MultiplayerGameState: Interface for overall game state
  - GameRules: Interface for game configuration
  - DEFAULT_GAME_RULES: Constant with default game rules

### server/src/services/gameManager.ts

* GameManager (Class)
  * constructor
    * short description: Initializes game manager with players and rules
    * input / output: Takes `players: Player[]`, `rules: GameRules`. Returns `void`.
  * startGame
    * short description: Starts the game if enough players are present
    * input / output: Takes no input. Returns `void`. Throws if game already started or too few players.
  * declareMoves
    * short description: Handles player's move count declarations
    * input / output: Takes `playerId: string`, `moves: number`. Returns `void`. Throws if invalid phase or moves.
  * moveRobot
    * short description: Handles robot movement during solution phase
    * input / output: Takes `playerId: string`, `robotColor: RobotColor`, `positions: Position[]`. Returns `void`.
  * getGameState
    * short description: Returns current game state
    * input / output: Takes no input. Returns `MultiplayerGameState`.

### server/src/services/__tests__/gameManager.test.ts

* Short description: Contains comprehensive tests for GameManager class.
* Test suites:
  - Game Initialization: Tests game setup and starting conditions
  - Declaration Phase: Tests move declaration validation and timing
  - Solution Phase: Tests robot movement validation and player turns
  - Game End: Tests game completion conditions

================================================================
Implementation Details
================================================================

### Multiplayer Game Logic
- Game state management using GameManager class
- Phase-based gameplay (waiting → declaration → solution)
- Timer system for declaration and solution phases
- Move validation and scoring system
- Player turn management

### Game Flow
1. Game starts with 2+ players
2. Players declare move counts (1-30 moves)
3. Lowest declarer attempts solution
4. Success: +1 point, new card
5. Failure: -1 point, next lowest declarer tries
6. Game ends when all cards are used

### Testing
- Unit tests cover all major functionality
- Mock timers for testing time-dependent features
- Edge cases tested (invalid moves, timeouts)
- Player interaction scenarios verified

================================================================
Notes
================================================================

TODO:
1. Card deck implementation
2. Goal achievement validation logic
3. Integration with Socket.IO events

================================================================
Added/Modified Frontend Components/Hooks/Stores (Issue #7)
================================================================

### src/stores/gameStore.ts

* useGameStore (Zustand Hook/Store)
  * short description: Extended to manage multiplayer game state (`game`) including board, phase, timer, declarations, scores, etc. Added actions (`startGame`, `declareMoves`, `moveRobot`) to interact with the server via Socket.IO. Added listeners for server-sent game events (`gameStarted`, `gameStateUpdated`, etc.) to update the local state.
  * input / output: Provides game state and actions to components.

### src/pages/GamePage.tsx

* GamePage (Function Component)
  * short description: Refactored to use `useGameStore` for multiplayer game state and actions. Displays player list with scores and connection status, game board, game info (phase, timer, card), declarations, and game controls (start game button for host). Renders `DeclarationCardList` during the declaration phase. Handles player turns and game over display.
  * input / output: Takes no props. Renders the main game UI. Uses `useGameStore`, `GameBoard`, `DeclarationCardList`.

### src/components/DeclarationCard.tsx

* DeclarationCardList (Function Component)
  * short description: Modified `selectedNumber` prop to accept `number | null`. Adjusted internal logic to handle `null` value for `selectedNumber` when calculating disabled state.
  * input / output: Takes `selectedNumber: number | null`, `maxNumber: number`, `onSelect: (num: number) => void`. Returns JSX.

### src/types/socket.ts

* ServerToClientEvents / ClientToServerEvents (Interfaces)
  * short description: Added event definitions for multiplayer game interactions: `gameStarted`, `gameStateUpdated`, `declarationMade`, `turnChanged`, `solutionAttemptResult`, `gameOver`, `startGame`, `declareMoves`, `moveRobot`, `getAvailableRooms`, `availableRoomsUpdated`. Updated existing event payloads for consistency.
  * input / output: Defines the contract for client-server communication via Socket.IO.

### src/services/socketService.ts

* SocketService (Class - Singleton)
  * short description: Added methods to emit new game-related events (`startGame`, `declareMoves`, `moveRobot`, `getAvailableRooms`). Added methods to register listeners for new server-sent game events (`onGameStarted`, `onGameStateUpdated`, etc.). Refined the `emit` helper and listener registration logic.
  * input / output: Provides methods for components/stores to interact with the WebSocket server.
]]>